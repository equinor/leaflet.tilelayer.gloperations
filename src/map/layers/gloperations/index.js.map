{"version":3,"file":"index.js","sources":["../src/constants.ts","../src/util.ts","../node_modules/.pnpm/style-inject@0.3.0/node_modules/style-inject/dist/style-inject.es.js","../src/reglCommands/default.ts","../src/reglCommands/hillshading.ts","../src/reglCommands/transitions.ts","../src/reglCommands/contours.ts","../src/reglCommands/multiLayers.ts","../src/reglCommands/util.ts","../src/TextureManager.ts","../src/Renderer.ts","../src/index.ts"],"sourcesContent":["import REGL from 'regl';\n\nexport const CLEAR_COLOR: REGL.Vec4 = [0, 0, 0, 0];\nexport const MAX_TEXTURE_DIMENSION = 1024;\nexport const EARTH_SUN_DISTANCE = 149600000000;\nexport const EARTH_CIRCUMFERENCE = 40075016.686;\nexport const SUN_RADIUS = 695508000;\nexport const DEG2RAD = 0.017453292519943295;\nexport const SLOPEFACTOR = 0.0333334;\nexport const RGB_REGEX = /^rgb\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)$/;\nexport const HEX_REGEX = /(?:#)[0-9a-f]{8}|(?:#)[0-9a-f]{6}|(?:#)[0-9a-f]{4}|(?:#)[0-9a-f]{3}/ig;\n","import { memoize } from 'lodash-es';\nimport REGL from 'regl';\nimport { decode, toRGBA8 } from 'upng-js';\n\nimport {\n  Color,\n  SentinelValue,\n  TextureBounds,\n  TileCoordinates,\n} from './types';\n\nimport {\n  RGB_REGEX,\n  HEX_REGEX,\n} from './constants';\n\nimport TextureManager from './TextureManager';\n\nexport function machineIsLittleEndian() {\n  const uint8Array = new Uint8Array([0xAA, 0xBB]);\n  const uint16array = new Uint16Array(uint8Array.buffer);\n  return uint16array[0] === 0xBBAA;\n}\n\n/**\n * Cribbed from Python's built-in `range` function.\n */\nexport function range(...args: number[]) {\n  if (args.length === 1) {\n    const [until] = args;\n    return new Array(until).fill(undefined).map((_, i) => i);\n  } else {\n    const [from, until, step = 1] = args;\n    if (step === 0) {\n      throw new Error('Argument step must be nonzero.');\n    }\n    const output = [];\n    for (let val = from; (step > 0) ? val < until : val > until; val += step) {\n      output.push(val);\n    }\n    return output;\n  }\n}\n\n/**\n * Fetch a png and decode data. If png does not exist return an array with nodataValue.\n */\nexport async function fetchPNGData(url: string, nodataValue: number, tileDimension: number): Promise<Uint8Array> {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", url, true);\n    xhr.responseType = \"arraybuffer\";\n    xhr.addEventListener('load', () => {\n      resolve(xhr.response);\n    });\n    xhr.addEventListener('error', reject);\n    xhr.send(null);\n  }).then((data: ArrayBuffer) => {\n    const img = decode(data);\n    const rgba = toRGBA8(img)[0];\n    return new Uint8Array(rgba);\n  }).catch(() => <Uint8Array>createNoDataTile(nodataValue, tileDimension));\n}\n\n/**\n * Check if two TypedArrays are equal\n */\nexport function typedArraysAreEqual(a: Uint8Array, b: Uint8Array) {\n  if (a.byteLength !== b.byteLength) return false;\n  return a.every((val, i) => val === b[i]);\n}\n\n/**\n * The matrix output by this function transforms coordinates in pixel space within the drawing\n * buffer (with upper left corner (0, 0) and lower right corner (buffer width, buffer height))\n * to WebGL \"clipspace\", with upper left corner (-1, 1) and lower right corner (1, -1).\n */\nexport function getTransformMatrix(\n  drawingBufferWidth: number,\n  drawingBufferHeight: number,\n): REGL.Mat4 {\n  // To scale horizontally, divide by width (in pixels) and multiply by 2, because width is 2 in clipspace.\n  const sx = 2 / drawingBufferWidth;\n  // To scale vertically, divide by height (in pixels) and multiply by -2, because height is 2 in clipspace,\n  // and the direction is flipped (positive is up, negative is down).\n  const sy = -2 / drawingBufferHeight;\n  // We translate by -1 horizontally (so the range 0 to 2 maps to the range -1 to 1).\n  const tx = -1;\n  // We translate by 1 horizontally (so the range -2 to 0 maps to the range -1 to 1).\n  const ty = 1;\n  // Matrix must be in column-major order for WebGL.\n  return [\n    sx, 0,  0, 0,\n    0,  sy, 0, 0,\n    0,  0,  1, 0,\n    tx, ty, 0, 1,\n  ];\n}\n\n/**\n * From a TextureBounds object, this function generates the four vertices WebGL needs to draw the\n * corresponding rectangle (as two conjoined triangles generated with the triangle strip primitive).\n */\nexport function getTexCoordVerticesTriangleStripQuad(textureBounds: TextureBounds): REGL.Vec2[] {\n  const [{ x: left, y: top }, { x: right, y: bottom }] = textureBounds;\n  return [\n    [left,  top   ],\n    [right, top   ],\n    [left,  bottom],\n    [right, bottom],\n  ];\n}\n\n/**\n * From a TextureBounds object, this function generates the six vertices WebGL needs to draw the\n * corresponding rectangle (as two triangles).\n */\nexport function getTexCoordVerticesTriangleQuad(textureBounds: TextureBounds): REGL.Vec2[] {\n  const [{ x: left, y: top }, { x: right, y: bottom }] = textureBounds;\n  return [\n    [left,  top   ],\n    [right, top   ],\n    [left,  bottom],\n    [right, bottom],\n    [right, top   ],\n    [left,  bottom],\n  ];\n}\n\n/**\n * Produces a Promise that resolves when the desired `duration` has expired.\n */\nexport function Timer(duration: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, duration));\n}\n\n/**\n * Useful for sorting TileCoordinates objects.\n */\nexport function compareTileCoordinates(a: TileCoordinates, b: TileCoordinates): number {\n  const z = a.z - b.z;\n  const x = a.x - b.x;\n  const y = a.y - b.y;\n  if (z !== 0) {\n    // First compare z values.\n    return z;\n  } else if (x !== 0) {\n    // If z values are the same, compare x values.\n    return x;\n  } else {\n    // If x values are the same, compare y values.\n    return y;\n  }\n}\n\n/**\n * Determines whether two arrays of TileCoordinates are the same.\n */\nexport function sameTiles(a: TileCoordinates[], b: TileCoordinates[]): boolean {\n  return (\n    // arrays are of the same length\n    a.length === b.length\n    // and corresponding elements have the same tile coordinates\n    && a.every((tileA, index) => compareTileCoordinates(tileA, b[index]) === 0)\n  );\n}\n\nexport const createNoDataTile: any = memoize((nodataValue: number, tileDimension = 256): Uint8Array => {\n  // Create a float 32 array.\n  const float32Tile = new Float32Array(tileDimension * tileDimension);\n  // Fill the tile array with the no data value\n  float32Tile.fill(nodataValue);\n  // return the no data tile.\n  return new Uint8Array(float32Tile.buffer);\n});\n\n/**\n * Force TypeScript to interpret value `val` as type `T`.\n */\nexport function staticCast<T>(val: any): T {\n  return val as T;\n}\n\n/**\n * Add one or more macro definitions to a GLSL source string.\n */\nexport function defineMacros(src: string, macros: { [key: string]: any }): string {\n  const defs = Object.keys(macros).map((key) => `#define ${key} ${<string>macros[key]}\\n`).join('');\n  return `${defs}\\n${src}`;\n}\n\n/**\n * Ping-pong technique. Render to a destination framebuffer,\n * then use it as a source texture in our next iteration.\n * Then swap them and continue. Used for advanced hillshading.\n */\nexport function PingPong(regl: REGL.Regl, opts: REGL.FramebufferOptions) {\n  const fbos = [regl.framebuffer(opts), regl.framebuffer(opts)];\n\n  let index = 0;\n\n  function ping() {\n    return fbos[index];\n  }\n\n  function pong() {\n    return fbos[1 - index];\n  }\n\n  function swap() {\n    index = 1 - index;\n  }\n\n  function destroy() {\n    fbos[0].destroy();\n    fbos[1].destroy();\n  }\n\n  return {\n    ping,\n    pong,\n    swap,\n    destroy\n  };\n}\n\n/**\n * hexToRGB converts a color from hex format to rgba.\n * const [r, g, b, a] = hexToRGB(\"#ffeeaaff\")\n */\nexport const hexToRGB = (hex: string) => {\n  const hasAlpha = hex.length === 9;\n  const start = hasAlpha ? 24 : 16;\n  const bigint = parseInt(hex.slice(1), 16);\n  const r = (bigint >> start) & 255;\n  const g = (bigint >> (start - 8)) & 255;\n  const b = (bigint >> (start - 16)) & 255;\n  const a = hasAlpha ? (bigint >> (start - 24)) & 255 : 255;\n  return [r, g, b, a];\n};\n\n/**\n * Parses a color string of the form 'rgb({rVal}, {gVal}, {bVal})' and converts the resulting values\n * to an array with ints 0 - 255.\n */\nexport function colorStringToInts(colorstring: string): number[] {\n  if (colorstring === 'transparent') {\n    return [0, 0, 0, 0];\n  }\n  const rgbmatch = colorstring.match(RGB_REGEX);\n  const hexmatch = colorstring.match(HEX_REGEX);\n  if (rgbmatch !== null) {\n    const [, r, g, b] = rgbmatch;\n    return [+r, +g, +b, 255];\n  } else if (hexmatch !== null) {\n    return hexToRGB(colorstring);\n  } else {\n    throw new Error(`'${colorstring}' is not a valid RGB or hex color expression.`);\n  }\n}\n\n/**\n * colormapToFlatArray takes the input colormap and returns a flat array to be\n * used as input to a texture. The first row in the array contains the colors.\n * The second row contains the encoded offset values.\n */\nexport const colormapToFlatArray = (colormap: Color[]) => {\n  const offsets: number[] = [];\n  let colors: number[] = [];\n  for (let i = 0; i < colormap.length; i++) {\n    offsets.push(colormap[i].offset);\n    const colorsnew = colorStringToInts(colormap[i].color);\n    colors = colors.concat(colorsnew);\n  }\n\n  const floatOffsets = new Float32Array(offsets);\n  const uintOffsets = new Uint8Array(floatOffsets.buffer);\n  const normalOffsets = Array.from(uintOffsets);\n  const colormapArray: number[] = colors.concat(normalOffsets);\n\n  return colormapArray;\n};\n\n/**\n * Creates a texture with colors on first row and offsets on second row\n */\nexport function createColormapTexture(colormapInput: Color[]|SentinelValue[], regl: REGL.Regl) {\n  const colormapFlatArray = colormapToFlatArray(colormapInput);\n  let colormapTexture: REGL.Texture2D;\n  if (colormapInput.length === 0) {\n    // empty texture\n    colormapTexture = regl.texture({\n      shape: [2, 2]\n    });\n  } else {\n    colormapTexture = regl.texture({\n      width: colormapInput.length,\n      height: 2,\n      data: colormapFlatArray\n    });\n  }\n\n  return colormapTexture;\n}\n\n/**\n * Fetch 8 adjacent tiles, if not already existing in tileManager.\n * Return array with texture coord vertices for all tiles.\n */\nexport async function getAdjacentTilesTexCoords(\n  gloperations: any,\n  textureManager: TextureManager,\n  coords: TileCoordinates,\n  url: string,\n  ): Promise<number[][]> {\n  // Get existing tiles in TextureManager\n  const textureContents = textureManager.contents;\n\n  // use 3x3 tiles for adv. hillshading\n  // TODO: add as plugin option?\n  const adjacentTiles = 3;\n  let textureCoords: number[][] = [];\n\n    for (let i = 0; i < adjacentTiles; i++) {\n      const _x = coords['x'] + (i - 1);\n      for (let j = 0; j < adjacentTiles; j++) {\n        const _y = coords['y'] + (j - 1);\n        const coordsAdjacent = {\n          x: _x,\n          y: _y,\n          z: coords['z'],\n        };\n\n        // Fetch data for adjacent tile if not already existing in TextureManager\n        const hashKey = textureManager.hashTileCoordinates(coordsAdjacent);\n        if (!textureContents.has(hashKey)) {\n          // Retrieve and add data to TextureManager\n          const pixelDataAdjacent = await gloperations._fetchTileData(coordsAdjacent, url);\n          const textureBounds = gloperations._renderer.textureManager.addTile(coordsAdjacent, pixelDataAdjacent);\n          textureCoords = textureCoords.concat(getTexCoordVerticesTriangleQuad(textureBounds));\n        } else {\n          const textureBounds = gloperations._renderer.textureManager.getTextureCoordinates(coordsAdjacent);\n          textureCoords = textureCoords.concat(getTexCoordVerticesTriangleQuad(textureBounds));\n        }\n      }\n    }\n    return textureCoords;\n}\n\nexport function delay(ms: number) {\n  return new Promise(function(resolve) {\n      setTimeout(resolve, ms);\n  });\n}\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import REGL from 'regl';\n\nimport vertSingle from '../shaders/vertex/single.vs';\n\nimport fragSingle from '../shaders/fragment/single.fs';\n\nimport {\n\tDictionary,\n\tDrawCommon,\n\tDrawTile,\n} from '../types';\n\nimport {\n\tDEG2RAD,\n\tSLOPEFACTOR,\n} from '../constants';\n\nimport * as util from '../util';\n\n/**\n * The resulting Regl DrawCommand is used to draw a single tile. The fragment shader decodes the\n * Float32 value of a pixel and colorizes it with the given color scale (and/or sentinel values).\n */\nexport function createDrawTileCommand(\n\tregl: REGL.Regl,\n\tcommonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n\tfragMacros: Dictionary<any>,\n) {\n\treturn regl<DrawTile.Uniforms, DrawTile.Attributes, DrawTile.Props>({\n\t  ...commonConfig,\n\t  vert: vertSingle,\n\t  frag: util.defineMacros(fragSingle, fragMacros),\n\t  uniforms: {\n\t\t...commonConfig.uniforms as DrawCommon.Uniforms,\n\t\tscaleLength: regl.prop<DrawTile.Props, 'scaleLength'>('scaleLength'),\n\t\tsentinelLength: regl.prop<DrawTile.Props, 'sentinelLength'>('sentinelLength'),\n\t\tscaleColormap: regl.prop<DrawTile.Props, 'scaleColormap'>('scaleColormap'),\n\t\tsentinelColormap: regl.prop<DrawTile.Props, 'sentinelColormap'>('sentinelColormap'),\n\t\ttexture: (_, { texture }) => texture,\n\t\tenableSimpleHillshade: (_, { enableSimpleHillshade }) => enableSimpleHillshade,\n\t\toffset: 0,\n\t\tazimuth: 0,\n\t\taltitude: 0,\n\t\tslopescale: 0,\n\t\tdeg2rad: DEG2RAD,\n\t\tslopeFactor: SLOPEFACTOR,\n\t\ttileSize: 0,\n\t\ttextureSize: 0,\n\t\ttextureBounds: [0, 0, 0, 0],\n\t  },\n\t  attributes: {\n\t\t...commonConfig.attributes as DrawCommon.Attributes,\n\t\ttexCoord: (_, { textureBounds }) => util.getTexCoordVerticesTriangleStripQuad(textureBounds),\n\t  },\n\t});\n}","import REGL from 'regl';\n\nimport vertSingle from '../shaders/vertex/single.vs';\nimport vertDouble from '../shaders/vertex/double.vs';\nimport vertSingleNotTransformed from '../shaders/vertex/singleNotTransformed.vs';\n\nimport fragSingle from '../shaders/fragment/single.fs';\nimport fragHsPregen from '../shaders/fragment/hillshading/hsPregen.fs';\nimport fragHsAdvMergeAndScaleTiles from '../shaders/fragment/hillshading/hsAdvMergeAndScaleTiles.fs';\nimport fragHsAdvNormals from '../shaders/fragment/hillshading/hsAdvNormals.fs';\nimport fragHsAdvDirectLight from '../shaders/fragment/hillshading/hsAdvDirect.fs';\nimport fragHsAdvSoftShadows from '../shaders/fragment/hillshading/hsAdvSoftShadows.fs';\nimport fragHsAdvAmbientShadows from '../shaders/fragment/hillshading/hsAdvAmbientShadows.fs';\nimport fragHsAdvFinalColorscale from '../shaders/fragment/hillshading/hsAdvFinalColorscale.fs';\nimport fragHsAdvFinalBaselayer from '../shaders/fragment/hillshading/hsAdvFinalBaselayer.fs';\nimport fragHsAdvSmooth from '../shaders/fragment/hillshading/hsAdvSmooth.fs';\n\nimport {\n  Dictionary,\n  DrawCommon,\n  DrawTileHsSimple,\n  DrawTileHsPregen,\n  HsAdvMergeAndScaleTiles,\n  HsAdvCalcNormals,\n  HsAdvDirectLightning,\n  HsAdvSoftShadows,\n  HsAdvAmbientShadows,\n  HsAdvFinalColorscale,\n  HsAdvFinalBaselayer,\n  HsAdvSmooth,\n} from '../types';\n\nimport {\n\tDEG2RAD,\n\tSLOPEFACTOR,\n} from '../constants';\n\nimport * as util from '../util';\n\nconst littleEndian = util.machineIsLittleEndian();\n\n/**\n * The resulting Regl DrawCommand is used to draw a single tile. The fragment shader decodes the\n * Float32 value of a pixel and colorizes it with the given color scale (and/or sentinel values).\n * Hillshading is applied with a simple and fast algorithm\n */\nexport function createDrawTileHsSimpleCommand(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n  fragMacros: Dictionary<any>,\n) {\n  return regl<DrawTileHsSimple.Uniforms, DrawTileHsSimple.Attributes, DrawTileHsSimple.Props>({\n    ...commonConfig,\n    vert: vertSingle,\n    frag: util.defineMacros(fragSingle, fragMacros),\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      scaleLength: regl.prop<DrawTileHsSimple.Props, 'scaleLength'>('scaleLength'),\n      sentinelLength: regl.prop<DrawTileHsSimple.Props, 'sentinelLength'>('sentinelLength'),\n      scaleColormap: regl.prop<DrawTileHsSimple.Props, 'scaleColormap'>('scaleColormap'),\n      sentinelColormap: regl.prop<DrawTileHsSimple.Props, 'sentinelColormap'>('sentinelColormap'),\n      texture: (_, { texture }) => texture,\n      enableSimpleHillshade: (_, { enableSimpleHillshade }) => enableSimpleHillshade,\n      azimuth: (_, { azimuth }) => azimuth,\n      altitude: (_, { altitude }) => altitude,\n      slopescale: (_, { slopescale }) => slopescale,\n      deg2rad: DEG2RAD,\n      slopeFactor: SLOPEFACTOR,\n      offset: (_, { offset }) => offset,\n      textureBounds: (_, { textureBounds }) => {\n        return [\n          [textureBounds[0].x],\n          [textureBounds[0].y],\n          [textureBounds[1].x],\n          [textureBounds[1].y]\n        ];\n      },\n      textureSize: (_, { textureSize }) => textureSize,\n      tileSize: (_, { tileSize }) => tileSize,\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoord: (_, { textureBounds }) => util.getTexCoordVerticesTriangleStripQuad(textureBounds),\n    },\n  });\n}\n\n/**\n * The resulting Regl DrawCommand is used to draw a single tile. The fragment shader decodes the\n * Float32 value of a pixel and colorizes it with the given color scale (and/or sentinel values).\n * Hillshading is applied from a pre-generated texture\n */\nexport function createDrawTileHsPregenCommand(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n  fragMacros: Dictionary<any>,\n) {\n  return regl<DrawTileHsPregen.Uniforms, DrawTileHsPregen.Attributes, DrawTileHsPregen.Props>({\n    ...commonConfig,\n    vert: vertDouble,\n    frag: util.defineMacros(fragHsPregen, fragMacros),\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      scaleLength: regl.prop<DrawTileHsPregen.Props, 'scaleLength'>('scaleLength'),\n      sentinelLength: regl.prop<DrawTileHsPregen.Props, 'sentinelLength'>('sentinelLength'),\n      scaleColormap: regl.prop<DrawTileHsPregen.Props, 'scaleColormap'>('scaleColormap'),\n      sentinelColormap: regl.prop<DrawTileHsPregen.Props, 'sentinelColormap'>('sentinelColormap'),\n      texture: (_, { texture }) => texture,\n      hillshadePregenTexture: (_, { hillshadePregenTexture }) => hillshadePregenTexture,\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoordA: (_, { textureBounds }) => util.getTexCoordVerticesTriangleStripQuad(textureBounds),\n      texCoordB: (_, { textureBoundsHs }) => util.getTexCoordVerticesTriangleStripQuad(textureBoundsHs),\n    },\n  });\n}\n\n\n/**\n * The resulting Regl DrawCommand is used to get the float values from the 3x3\n * adjacent tiles. The float values can be scaled to adjust the hillshading.\n * It will be saved to a framebuffer and is used as an input to advanced hillshading\n */\nexport function createHsAdvMergeAndScaleTiles(\n  regl: REGL.Regl,\n) {\n  return regl<HsAdvMergeAndScaleTiles.Uniforms, HsAdvMergeAndScaleTiles.Attributes, HsAdvMergeAndScaleTiles.Props>({\n    vert: vertSingleNotTransformed,\n    frag: fragHsAdvMergeAndScaleTiles,\n    uniforms: {\n      littleEndian: littleEndian,\n      nodataValue: regl.prop<HsAdvMergeAndScaleTiles.Props, 'nodataValue'>(\"nodataValue\"),\n      texture: regl.prop<HsAdvMergeAndScaleTiles.Props, 'texture'>(\"texture\"),\n      floatScale: regl.prop<HsAdvMergeAndScaleTiles.Props, 'floatScale'>(\"floatScale\"),\n    },\n    attributes: {\n      // 18 triangles = 9 tiles\n      position: [\n        [-1, 1], [-1/3, 1], [-1, 1/3], [-1/3, 1/3], [-1/3, 1], [-1, 1/3],\n        [-1, 1/3], [-1/3, 1/3], [-1, -1/3], [-1/3, -1/3], [-1/3, 1/3], [-1, -1/3],\n        [-1, -1/3], [-1/3, -1/3], [-1, -1], [-1/3, -1], [-1/3, -1/3], [-1, -1],\n        [-1/3, 1], [1/3, 1], [-1/3, 1/3], [1/3, 1/3], [1/3, 1], [-1/3, 1/3],\n        [-1/3, 1/3], [1/3, 1/3], [-1/3, -1/3], [1/3, -1/3], [1/3, 1/3], [-1/3, -1/3],\n        [-1/3, -1/3], [1/3, -1/3], [-1/3, -1], [1/3, -1], [1/3, -1/3], [-1/3, -1],\n        [1/3, 1], [1, 1], [1/3, 1/3], [1, 1/3], [1, 1], [1/3, 1/3],\n        [1/3, 1/3], [1, 1/3], [1/3, -1/3], [1, -1/3], [1, 1/3], [1/3, -1/3],\n        [1/3, -1/3], [1, -1/3], [1/3, -1], [1, -1], [1, -1/3], [1/3, -1]\n      ],\n      texCoord: regl.prop<HsAdvMergeAndScaleTiles.Props, 'texCoord'>(\"texCoord\"),\n    },\n    depth: { enable: false },\n    primitive: 'triangles',\n    count: 54,\n    viewport: (_, { canvasSize: [width, height] }) => ({ width, height }),\n    framebuffer: regl.prop<HsAdvMergeAndScaleTiles.Props, 'fbo'>(\"fbo\"),\n  });\n}\n\n\n/**\n * The resulting Regl DrawCommand is for using a convolution kernel to smooth the input data.\n * Currently hard-coded the kernel and positions in the shader to reduce number of uniforms.\n * TODO: Merge with contours function\n */\n export function createHsAdvSmoothCommand(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n) {\n  return regl<HsAdvSmooth.Uniforms, HsAdvSmooth.Attributes, HsAdvSmooth.Props>({\n    ...commonConfig,\n    vert: vertSingleNotTransformed,\n    frag: fragHsAdvSmooth,\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      tInput: regl.prop<HsAdvSmooth.Props, 'tInput'>(\"tInput\"),\n      textureSize: regl.prop<HsAdvSmooth.Props, 'textureSize'>(\"textureSize\"),\n      kernelSize: regl.prop<HsAdvSmooth.Props, 'kernelSize'>(\"kernelSize\"),\n    },\n    attributes: {\n      position: [[-1, 1], [1, 1], [-1, -1], [1, -1]],\n      texCoord: [[0, 1], [1, 1], [0, 0], [1, 0]],\n    },\n    framebuffer: regl.prop<HsAdvSmooth.Props, 'fbo'>(\"fbo\"),\n  });\n}\n\n\n/**\n * The resulting Regl DrawCommand is used to calculate the normals.\n * It is used as an input to advanced hillshading\n */\nexport function createHsAdvCalcNormals(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n) {\n  return regl<HsAdvCalcNormals.Uniforms, HsAdvCalcNormals.Attributes, HsAdvCalcNormals.Props>({\n    ...commonConfig,\n    vert: vertSingleNotTransformed,\n    frag: fragHsAdvNormals,\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      tInput: regl.prop<HsAdvCalcNormals.Props, 'tInput'>(\"tInput\"),\n      pixelScale: regl.prop<HsAdvCalcNormals.Props, 'pixelScale'>(\"pixelScale\"),\n      onePixel: regl.prop<HsAdvCalcNormals.Props, 'onePixel'>(\"onePixel\"),\n    },\n    attributes: {\n      position: [[-1, 1], [1, 1], [-1, -1], [1, -1]],\n      texCoord: [[0, 1], [1, 1], [0, 0], [1, 0]],\n    },\n    framebuffer: regl.prop<HsAdvCalcNormals.Props, 'fbo'>(\"fbo\"),\n  });\n}\n\n/**\n * The resulting Regl DrawCommand is used to show hillshading without shadows.\n * Not currently used\n */\nexport function createHsAdvDirectLightning(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n) {\n  return regl<HsAdvDirectLightning.Uniforms, HsAdvDirectLightning.Attributes, HsAdvDirectLightning.Props>({\n    ...commonConfig,\n    vert: vertSingleNotTransformed,\n    frag: fragHsAdvDirectLight,\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      scaleLength: regl.prop<HsAdvDirectLightning.Props, 'scaleLength'>('scaleLength'),\n      sentinelLength: regl.prop<HsAdvDirectLightning.Props, 'sentinelLength'>('sentinelLength'),\n      scaleColormap: regl.prop<HsAdvDirectLightning.Props, 'scaleColormap'>('scaleColormap'),\n      sentinelColormap: regl.prop<HsAdvDirectLightning.Props, 'sentinelColormap'>('sentinelColormap'),\n      tInput: regl.prop<HsAdvDirectLightning.Props, 'tInput'>(\"tInput\"),\n      tNormal: regl.prop<HsAdvDirectLightning.Props, 'tNormal'>(\"tNormal\"),\n      floatScale: regl.prop<HsAdvDirectLightning.Props, 'floatScale'>(\"floatScale\"),\n      sunDirection: regl.prop<HsAdvDirectLightning.Props, 'sunDirection'>(\"sunDirection\"),\n    },\n    attributes: {\n      position: [[-1, 1], [1, 1], [-1, -1], [1, -1]],\n      texCoord: [[0, 1], [1, 1], [0, 0], [1, 0]],\n    },\n  });\n}\n\n/**\n * The resulting Regl DrawCommand is used to calculate soft shadows.\n */\nexport function createHsAdvSoftShadows(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n) {\n  return regl<HsAdvSoftShadows.Uniforms, HsAdvSoftShadows.Attributes, HsAdvSoftShadows.Props>({\n    ...commonConfig,\n    vert: vertSingleNotTransformed,\n    frag: fragHsAdvSoftShadows,\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      tInput: regl.prop<HsAdvSoftShadows.Props, 'tInput'>(\"tInput\"),\n      tNormal: regl.prop<HsAdvSoftShadows.Props, 'tNormal'>(\"tNormal\"),\n      tSrc: regl.prop<HsAdvSoftShadows.Props, 'tSrc'>(\"tSrc\"),\n      softIterations: regl.prop<HsAdvSoftShadows.Props, 'softIterations'>(\"softIterations\"),\n      pixelScale: regl.prop<HsAdvSoftShadows.Props, 'pixelScale'>(\"pixelScale\"),\n      resolution: regl.prop<HsAdvSoftShadows.Props, 'resolution'>(\"resolution\"),\n      sunDirection: regl.prop<HsAdvSoftShadows.Props, 'sunDirection'>(\"sunDirection\"),\n    },\n    attributes: {\n      position: [[-1, 1], [1, 1], [-1, -1], [1, -1]],\n      texCoord: [[1/3, 2/3], [2/3, 2/3], [1/3, 1/3], [2/3, 1/3]],\n    },\n    framebuffer: regl.prop<HsAdvSoftShadows.Props, 'fbo'>(\"fbo\"),\n  });\n}\n\n/**\n * The resulting Regl DrawCommand is used to calculate ambient lighting.\n */\nexport function createHsAdvAmbientShadows(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n) {\n  return regl<HsAdvAmbientShadows.Uniforms, HsAdvAmbientShadows.Attributes, HsAdvAmbientShadows.Props>({\n    ...commonConfig,\n    vert: vertSingleNotTransformed,\n    frag: fragHsAdvAmbientShadows,\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      tInput: regl.prop<HsAdvAmbientShadows.Props, 'tInput'>(\"tInput\"),\n      tNormal: regl.prop<HsAdvAmbientShadows.Props, 'tNormal'>(\"tNormal\"),\n      tSrc: regl.prop<HsAdvAmbientShadows.Props, 'tSrc'>(\"tSrc\"),\n      ambientIterations: regl.prop<HsAdvAmbientShadows.Props, 'ambientIterations'>(\"ambientIterations\"),\n      pixelScale: regl.prop<HsAdvAmbientShadows.Props, 'pixelScale'>(\"pixelScale\"),\n      resolution: regl.prop<HsAdvAmbientShadows.Props, 'resolution'>(\"resolution\"),\n      direction: regl.prop<HsAdvAmbientShadows.Props, 'direction'>(\"direction\"),\n    },\n    attributes: {\n      position: [[-1, 1], [1, 1], [-1, -1], [1, -1]],\n      texCoord: [[1/3, 2/3], [2/3, 2/3], [1/3, 1/3], [2/3, 1/3]],\n    },\n    framebuffer: regl.prop<HsAdvAmbientShadows.Props, 'fbo'>(\"fbo\"),\n  });\n}\n\n/**\n * The resulting Regl DrawCommand is used to combine soft and ambient shading,\n * use the colormap on the input floats and apply the hillshading.\n */\nexport function createHsAdvFinalColorscale(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n) {\n  return regl<HsAdvFinalColorscale.Uniforms, HsAdvFinalColorscale.Attributes, HsAdvFinalColorscale.Props>({\n    ...commonConfig,\n    vert: vertDouble,\n    frag: fragHsAdvFinalColorscale,\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      scaleLength: regl.prop<HsAdvFinalColorscale.Props, 'scaleLength'>('scaleLength'),\n      sentinelLength: regl.prop<HsAdvFinalColorscale.Props, 'sentinelLength'>('sentinelLength'),\n      scaleColormap: regl.prop<HsAdvFinalColorscale.Props, 'scaleColormap'>('scaleColormap'),\n      sentinelColormap: regl.prop<HsAdvFinalColorscale.Props, 'sentinelColormap'>('sentinelColormap'),\n      tInput: regl.prop<HsAdvFinalColorscale.Props, 'tInput'>(\"tInput\"),\n      tSoftShadow: regl.prop<HsAdvFinalColorscale.Props, 'tSoftShadow'>(\"tSoftShadow\"),\n      tAmbient: regl.prop<HsAdvFinalColorscale.Props, 'tAmbient'>(\"tAmbient\"),\n      floatScale: regl.prop<HsAdvFinalColorscale.Props, 'floatScale'>(\"floatScale\"),\n      finalSoftMultiplier: regl.prop<HsAdvFinalColorscale.Props, 'finalSoftMultiplier'>(\"finalSoftMultiplier\"),\n      finalAmbientMultiplier: regl.prop<HsAdvFinalColorscale.Props, 'finalAmbientMultiplier'>(\"finalAmbientMultiplier\"),\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoordA: [[1/3, 2/3], [2/3, 2/3], [1/3, 1/3], [2/3, 1/3]],\n      texCoordB: [[0, 1], [1, 1], [0, 0], [1, 0]],\n    },\n  });\n}\n\n/**\n * The resulting Regl DrawCommand is used to combine soft and ambient shading,\n * use the baselayer tile and apply the hillshading.\n */\nexport function createHsAdvFinalBaselayer(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n) {\n  return regl<HsAdvFinalBaselayer.Uniforms, HsAdvFinalBaselayer.Attributes, HsAdvFinalBaselayer.Props>({\n    ...commonConfig,\n    vert: vertDouble,\n    frag: fragHsAdvFinalBaselayer,\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      tBase: regl.prop<HsAdvFinalBaselayer.Props, 'tBase'>(\"tBase\"),\n      tSoftShadow: regl.prop<HsAdvFinalBaselayer.Props, 'tSoftShadow'>(\"tSoftShadow\"),\n      tAmbient: regl.prop<HsAdvFinalBaselayer.Props, 'tAmbient'>(\"tAmbient\"),\n      finalSoftMultiplier: regl.prop<HsAdvFinalBaselayer.Props, 'finalSoftMultiplier'>(\"finalSoftMultiplier\"),\n      finalAmbientMultiplier: regl.prop<HsAdvFinalBaselayer.Props, 'finalAmbientMultiplier'>(\"finalAmbientMultiplier\"),\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoordA: regl.prop<HsAdvFinalBaselayer.Props, 'baseTexCoords'>(\"baseTexCoords\"),\n      texCoordB: [[0, 1], [1, 1], [0, 0], [1, 0]],\n    },\n  });\n}\n","import REGL from 'regl';\n\nimport vertSingle from '../shaders/vertex/single.vs';\nimport vertDouble from '../shaders/vertex/double.vs';\n\nimport fragInterpolateColor from '../shaders/fragment/interpolateColor.fs';\nimport fragInterpolateColorOnly from '../shaders/fragment/interpolateColorOnly.fs';\nimport fragInterpolateValue from '../shaders/fragment/interpolateValue.fs';\n\nimport {\n  Dictionary,\n  DrawCommon,\n  DrawTileInterpolateColor,\n  DrawTileInterpolateColorOnly,\n  DrawTileInterpolateValue,\n} from '../types';\n\nimport * as util from '../util';\n\n/**\n * The DrawCommand output by this function interpolates, for each pixel, between two values, one\n * from `textureA` and one from `textureB`. The same color scale / sentinel values are applied to\n * both.\n */\nexport function createDrawTileInterpolateValueCommand(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n  fragMacros: Dictionary<any>,\n) {\n  return regl<\n    DrawTileInterpolateValue.Uniforms,\n    DrawTileInterpolateValue.Attributes,\n    DrawTileInterpolateValue.Props\n  >({\n    ...commonConfig,\n    vert: vertDouble,\n    frag: util.defineMacros(fragInterpolateValue, fragMacros),\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      scaleLength: regl.prop<DrawTileInterpolateValue.Props, 'scaleLength'>('scaleLength'),\n      sentinelLength: regl.prop<DrawTileInterpolateValue.Props, 'sentinelLength'>('sentinelLength'),\n      scaleColormap: regl.prop<DrawTileInterpolateValue.Props, 'scaleColormap'>('scaleColormap'),\n      sentinelColormap: regl.prop<DrawTileInterpolateValue.Props, 'sentinelColormap'>('sentinelColormap'),\n      textureA: (_, { textureA }) => textureA,\n      textureB: (_, { textureB }) => textureB,\n      interpolationFraction: (_, { interpolationFraction }) => interpolationFraction,\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoordA: (_, { textureBoundsA }) => util.getTexCoordVerticesTriangleStripQuad(textureBoundsA),\n      texCoordB: (_, { textureBoundsB }) => util.getTexCoordVerticesTriangleStripQuad(textureBoundsB),\n    },\n  });\n}\n\n/**\n * The behavior of this DrawCommand is similar to the one above, except that pixels from `textureA`\n * are colorized with one color scale / set of sentinel values, while pixels from `textureB` use a\n * different color scale / set of sentinel values.\n */\nexport function createDrawTileInterpolateColorCommand(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n  fragMacros: Dictionary<any>,\n) {\n  return regl<\n    DrawTileInterpolateColor.Uniforms,\n    DrawTileInterpolateColor.Attributes,\n    DrawTileInterpolateColor.Props\n  >({\n    ...commonConfig,\n    vert: vertDouble,\n    frag: util.defineMacros(fragInterpolateColor, fragMacros),\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      scaleLengthA: regl.prop<DrawTileInterpolateColor.Props, 'scaleLengthA'>('scaleLengthA'),\n      sentinelLengthA: regl.prop<DrawTileInterpolateColor.Props, 'sentinelLengthA'>('sentinelLengthA'),\n      scaleColormapA: regl.prop<DrawTileInterpolateColor.Props, 'scaleColormapA'>('scaleColormapA'),\n      sentinelColormapA: regl.prop<DrawTileInterpolateColor.Props, 'sentinelColormapA'>('sentinelColormapA'),\n      scaleLengthB: regl.prop<DrawTileInterpolateColor.Props, 'scaleLengthB'>('scaleLengthB'),\n      sentinelLengthB: regl.prop<DrawTileInterpolateColor.Props, 'sentinelLengthB'>('sentinelLengthB'),\n      scaleColormapB: regl.prop<DrawTileInterpolateColor.Props, 'scaleColormapB'>('scaleColormapB'),\n      sentinelColormapB: regl.prop<DrawTileInterpolateColor.Props, 'sentinelColormapB'>('sentinelColormapB'),\n      textureA: (_, { textureA }) => textureA,\n      textureB: (_, { textureB }) => textureB,\n      interpolationFraction: (_, { interpolationFraction }) => interpolationFraction,\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoordA: (_, { textureBoundsA }) => util.getTexCoordVerticesTriangleStripQuad(textureBoundsA),\n      texCoordB: (_, { textureBoundsB }) => util.getTexCoordVerticesTriangleStripQuad(textureBoundsB),\n    },\n  });\n}\n\n/**\n * The behavior of this DrawCommand is similar to the one above, except that the pixel values\n * are the same. Only the colorscale changes.\n */\nexport function createDrawTileInterpolateColorOnlyCommand(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n  fragMacros: Dictionary<any>,\n) {\n  return regl<\n    DrawTileInterpolateColorOnly.Uniforms,\n    DrawTileInterpolateColorOnly.Attributes,\n    DrawTileInterpolateColorOnly.Props\n  >({\n    ...commonConfig,\n    vert: vertSingle,\n    frag: util.defineMacros(fragInterpolateColorOnly, fragMacros),\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      scaleLengthA: regl.prop<DrawTileInterpolateColorOnly.Props, 'scaleLengthA'>('scaleLengthA'),\n      sentinelLengthA: regl.prop<DrawTileInterpolateColorOnly.Props, 'sentinelLengthA'>('sentinelLengthA'),\n      scaleColormapA: regl.prop<DrawTileInterpolateColorOnly.Props, 'scaleColormapA'>('scaleColormapA'),\n      sentinelColormapA: regl.prop<DrawTileInterpolateColorOnly.Props, 'sentinelColormapA'>('sentinelColormapA'),\n      scaleLengthB: regl.prop<DrawTileInterpolateColorOnly.Props, 'scaleLengthB'>('scaleLengthB'),\n      sentinelLengthB: regl.prop<DrawTileInterpolateColorOnly.Props, 'sentinelLengthB'>('sentinelLengthB'),\n      scaleColormapB: regl.prop<DrawTileInterpolateColorOnly.Props, 'scaleColormapB'>('scaleColormapB'),\n      sentinelColormapB: regl.prop<DrawTileInterpolateColorOnly.Props, 'sentinelColormapB'>('sentinelColormapB'),\n      texture: (_, { texture }) => texture,\n      interpolationFraction: (_, { interpolationFraction }) => interpolationFraction,\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoord: (_, { textureBounds }) => util.getTexCoordVerticesTriangleStripQuad(textureBounds),\n    },\n  });\n}\n","import REGL from 'regl';\n\nimport vertSingleNotTransformed from '../shaders/vertex/singleNotTransformed.vs';\n\nimport fragConvolutionSmooth from '../shaders/fragment/convolutionSmooth.fs';\n\nimport {\n  DrawCommon,\n  ConvolutionSmooth,\n} from '../types';\n\n/**\n * The resulting Regl DrawCommand is for using a convolution kernel to smooth the input data.\n * Currently hard-coded the kernel and positions in the shader to reduce number of uniforms.\n */\nexport function createConvolutionSmoothCommand(\n\tregl: REGL.Regl,\n\tcommonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n  ) {\n\treturn regl<ConvolutionSmooth.Uniforms, ConvolutionSmooth.Attributes, ConvolutionSmooth.Props>({\n\t  vert: vertSingleNotTransformed,\n\t  frag: fragConvolutionSmooth,\n\t  uniforms: {\n\t\t...commonConfig.uniforms as DrawCommon.Uniforms,\n\t\ttexture: regl.prop<ConvolutionSmooth.Props, 'texture'>(\"texture\"),\n\t\ttextureSize: regl.prop<ConvolutionSmooth.Props, 'textureSize'>(\"textureSize\"),\n\t\tkernelSize: regl.prop<ConvolutionSmooth.Props, 'kernelSize'>(\"kernelSize\"),\n\t  },\n\t  attributes: {\n\t\ttexCoord: [0, 1, 1, 1, 0, 0, 1, 0],\n\t\tposition: [-1, 1, 1, 1, -1, -1, 1, -1],\n\t  },\n\t  depth: { enable: false },\n\t  primitive: 'triangle strip',\n\t  count: 4,\n\t});\n}\n","import REGL from 'regl';\n\nimport vertSingle from '../shaders/vertex/single.vs';\nimport vertDouble from '../shaders/vertex/double.vs';\nimport vertMulti3 from '../shaders/vertex/multi3.vs';\nimport vertMulti4 from '../shaders/vertex/multi4.vs';\nimport vertMulti5 from '../shaders/vertex/multi5.vs';\nimport vertMulti6 from '../shaders/vertex/multi6.vs';\n\nimport fragMulti1Calc from '../shaders/fragment/multiAnalyze1Calc.fs';\nimport fragMulti2Calc from '../shaders/fragment/multiAnalyze2Calc.fs';\nimport fragMulti3Calc from '../shaders/fragment/multiAnalyze3Calc.fs';\nimport fragMulti4Calc from '../shaders/fragment/multiAnalyze4Calc.fs';\nimport fragMulti5Calc from '../shaders/fragment/multiAnalyze5Calc.fs';\nimport fragMulti6Calc from '../shaders/fragment/multiAnalyze6Calc.fs';\nimport fragDiffCalc from '../shaders/fragment/diffCalc.fs';\nimport fragDrawResult from '../shaders/fragment/drawResult.fs';\n\nimport {\n\tDictionary,\n\tDrawCommon,\n\tCalcTileMultiAnalyze1,\n\tCalcTileMultiAnalyze2,\n\tCalcTileMultiAnalyze3,\n\tCalcTileMultiAnalyze4,\n\tCalcTileMultiAnalyze5,\n\tCalcTileMultiAnalyze6,\n\tDrawTileResult,\n\tCalcTileDiff,\n} from '../types';\n\nimport * as util from '../util';\n\n\nexport function createCalcTileMultiAnalyze1Command(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n) {\n  return regl<\n    CalcTileMultiAnalyze1.Uniforms,\n    CalcTileMultiAnalyze1.Attributes,\n    CalcTileMultiAnalyze1.Props\n  >({\n    ...commonConfig,\n    vert: vertSingle,\n    frag: fragMulti1Calc,\n    depth: {\n      enable: false\n    },\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      filterLowA: (_, { filterLowA }) => filterLowA,\n      filterHighA: (_, { filterHighA }) => filterHighA,\n      multiplierA: (_, { multiplierA }) => multiplierA,\n      textureA: (_, { textureA }) => textureA,\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoord: (_, { textureBoundsA }) => util.getTexCoordVerticesTriangleStripQuad(textureBoundsA),\n    },\n    framebuffer: regl.prop<CalcTileMultiAnalyze1.Props, 'fbo'>(\"fbo\"),\n  });\n}\n\nexport function createCalcTileMultiAnalyze2Command(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n) {\n  return regl<\n    CalcTileMultiAnalyze2.Uniforms,\n    CalcTileMultiAnalyze2.Attributes,\n    CalcTileMultiAnalyze2.Props\n  >({\n    ...commonConfig,\n    vert: vertDouble,\n    frag: fragMulti2Calc,\n    depth:  {\n      enable: false\n    },\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      filterLowA: (_, { filterLowA }) => filterLowA,\n      filterHighA: (_, { filterHighA }) => filterHighA,\n      filterLowB: (_, { filterLowB }) => filterLowB,\n      filterHighB: (_, { filterHighB }) => filterHighB,\n      multiplierA: (_, { multiplierA }) => multiplierA,\n      multiplierB: (_, { multiplierB }) => multiplierB,\n      textureA: (_, { textureA }) => textureA,\n      textureB: (_, { textureB }) => textureB,\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoordA: (_, { textureBoundsA }) => util.getTexCoordVerticesTriangleStripQuad(textureBoundsA),\n      texCoordB: (_, { textureBoundsB }) => util.getTexCoordVerticesTriangleStripQuad(textureBoundsB),\n    },\n    framebuffer: regl.prop<CalcTileMultiAnalyze2.Props, 'fbo'>(\"fbo\"),\n  });\n}\n\nexport function createCalcTileMultiAnalyze3Command(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n) {\n  return regl<\n    CalcTileMultiAnalyze3.Uniforms,\n    CalcTileMultiAnalyze3.Attributes,\n    CalcTileMultiAnalyze3.Props\n  >({\n    ...commonConfig,\n    vert: vertMulti3,\n    frag: fragMulti3Calc,\n    depth:  {\n      enable: false\n    },\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      filterLowA: (_, { filterLowA }) => filterLowA,\n      filterHighA: (_, { filterHighA }) => filterHighA,\n      filterLowB: (_, { filterLowB }) => filterLowB,\n      filterHighB: (_, { filterHighB }) => filterHighB,\n      filterLowC: (_, { filterLowC }) => filterLowC,\n      filterHighC: (_, { filterHighC }) => filterHighC,\n      multiplierA: (_, { multiplierA }) => multiplierA,\n      multiplierB: (_, { multiplierB }) => multiplierB,\n      multiplierC: (_, { multiplierC }) => multiplierC,\n      textureA: (_, { textureA }) => textureA,\n      textureB: (_, { textureB }) => textureB,\n      textureC: (_, { textureC }) => textureC,\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoordA: (_, { textureBoundsA }) => util.getTexCoordVerticesTriangleStripQuad(textureBoundsA),\n      texCoordB: (_, { textureBoundsB }) => util.getTexCoordVerticesTriangleStripQuad(textureBoundsB),\n      texCoordC: (_, { textureBoundsC }) => util.getTexCoordVerticesTriangleStripQuad(textureBoundsC),\n    },\n    framebuffer: regl.prop<CalcTileMultiAnalyze3.Props, 'fbo'>(\"fbo\"),\n  });\n}\n\nexport function createCalcTileMultiAnalyze4Command(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n) {\n  return regl<\n    CalcTileMultiAnalyze4.Uniforms,\n    CalcTileMultiAnalyze4.Attributes,\n    CalcTileMultiAnalyze4.Props\n  >({\n    ...commonConfig,\n    vert: vertMulti4,\n    frag: fragMulti4Calc,\n    depth: {\n      enable: false\n    },\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      filterLowA: (_, { filterLowA }) => filterLowA,\n      filterHighA: (_, { filterHighA }) => filterHighA,\n      filterLowB: (_, { filterLowB }) => filterLowB,\n      filterHighB: (_, { filterHighB }) => filterHighB,\n      filterLowC: (_, { filterLowC }) => filterLowC,\n      filterHighC: (_, { filterHighC }) => filterHighC,\n      filterLowD: (_, { filterLowD }) => filterLowD,\n      filterHighD: (_, { filterHighD }) => filterHighD,\n      multiplierA: (_, { multiplierA }) => multiplierA,\n      multiplierB: (_, { multiplierB }) => multiplierB,\n      multiplierC: (_, { multiplierC }) => multiplierC,\n      multiplierD: (_, { multiplierD }) => multiplierD,\n      textureA: (_, { textureA }) => textureA,\n      textureB: (_, { textureB }) => textureB,\n      textureC: (_, { textureC }) => textureC,\n      textureD: (_, { textureD }) => textureD,\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoordA: (_, { textureBoundsA }) => util.getTexCoordVerticesTriangleStripQuad(textureBoundsA),\n      texCoordB: (_, { textureBoundsB }) => util.getTexCoordVerticesTriangleStripQuad(textureBoundsB),\n      texCoordC: (_, { textureBoundsC }) => util.getTexCoordVerticesTriangleStripQuad(textureBoundsC),\n      texCoordD: (_, { textureBoundsD }) => util.getTexCoordVerticesTriangleStripQuad(textureBoundsD),\n    },\n    framebuffer: regl.prop<CalcTileMultiAnalyze1.Props, 'fbo'>(\"fbo\"),\n  });\n}\n\nexport function createCalcTileMultiAnalyze5Command(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n) {\n  return regl<\n    CalcTileMultiAnalyze5.Uniforms,\n    CalcTileMultiAnalyze5.Attributes,\n    CalcTileMultiAnalyze5.Props\n  >({\n    ...commonConfig,\n    vert: vertMulti5,\n    frag: fragMulti5Calc,\n    depth: {\n      enable: false\n    },\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      filterLowA: (_, { filterLowA }) => filterLowA,\n      filterHighA: (_, { filterHighA }) => filterHighA,\n      filterLowB: (_, { filterLowB }) => filterLowB,\n      filterHighB: (_, { filterHighB }) => filterHighB,\n      filterLowC: (_, { filterLowC }) => filterLowC,\n      filterHighC: (_, { filterHighC }) => filterHighC,\n      filterLowD: (_, { filterLowD }) => filterLowD,\n      filterHighD: (_, { filterHighD }) => filterHighD,\n      filterLowE: (_, { filterLowE }) => filterLowE,\n      filterHighE: (_, { filterHighE }) => filterHighE,\n      multiplierA: (_, { multiplierA }) => multiplierA,\n      multiplierB: (_, { multiplierB }) => multiplierB,\n      multiplierC: (_, { multiplierC }) => multiplierC,\n      multiplierD: (_, { multiplierD }) => multiplierD,\n      multiplierE: (_, { multiplierE }) => multiplierE,\n      textureA: (_, { textureA }) => textureA,\n      textureB: (_, { textureB }) => textureB,\n      textureC: (_, { textureC }) => textureC,\n      textureD: (_, { textureD }) => textureD,\n      textureE: (_, { textureE }) => textureE,\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoordA: (_, { textureBoundsA }) => util.getTexCoordVerticesTriangleStripQuad(textureBoundsA),\n      texCoordB: (_, { textureBoundsB }) => util.getTexCoordVerticesTriangleStripQuad(textureBoundsB),\n      texCoordC: (_, { textureBoundsC }) => util.getTexCoordVerticesTriangleStripQuad(textureBoundsC),\n      texCoordD: (_, { textureBoundsD }) => util.getTexCoordVerticesTriangleStripQuad(textureBoundsD),\n      texCoordE: (_, { textureBoundsE }) => util.getTexCoordVerticesTriangleStripQuad(textureBoundsE),\n    },\n    framebuffer: regl.prop<CalcTileMultiAnalyze5.Props, 'fbo'>(\"fbo\"),\n  });\n}\n\nexport function createCalcTileMultiAnalyze6Command(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n) {\n  return regl<\n    CalcTileMultiAnalyze6.Uniforms,\n    CalcTileMultiAnalyze6.Attributes,\n    CalcTileMultiAnalyze6.Props\n  >({\n    ...commonConfig,\n    vert: vertMulti6,\n    frag: fragMulti6Calc,\n    depth:  {\n      enable: false\n    },\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      filterLowA: (_, { filterLowA }) => filterLowA,\n      filterHighA: (_, { filterHighA }) => filterHighA,\n      filterLowB: (_, { filterLowB }) => filterLowB,\n      filterHighB: (_, { filterHighB }) => filterHighB,\n      filterLowC: (_, { filterLowC }) => filterLowC,\n      filterHighC: (_, { filterHighC }) => filterHighC,\n      filterLowD: (_, { filterLowD }) => filterLowD,\n      filterHighD: (_, { filterHighD }) => filterHighD,\n      filterLowE: (_, { filterLowE }) => filterLowE,\n      filterHighE: (_, { filterHighE }) => filterHighE,\n      filterLowF: (_, { filterLowF }) => filterLowF,\n      filterHighF: (_, { filterHighF }) => filterHighF,\n      multiplierA: (_, { multiplierA }) => multiplierA,\n      multiplierB: (_, { multiplierB }) => multiplierB,\n      multiplierC: (_, { multiplierC }) => multiplierC,\n      multiplierD: (_, { multiplierD }) => multiplierD,\n      multiplierE: (_, { multiplierE }) => multiplierE,\n      multiplierF: (_, { multiplierF }) => multiplierF,\n      textureA: (_, { textureA }) => textureA,\n      textureB: (_, { textureB }) => textureB,\n      textureC: (_, { textureC }) => textureC,\n      textureD: (_, { textureD }) => textureD,\n      textureE: (_, { textureE }) => textureE,\n      textureF: (_, { textureF }) => textureF,\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoordA: (_, { textureBoundsA }) => util.getTexCoordVerticesTriangleStripQuad(textureBoundsA),\n      texCoordB: (_, { textureBoundsB }) => util.getTexCoordVerticesTriangleStripQuad(textureBoundsB),\n      texCoordC: (_, { textureBoundsC }) => util.getTexCoordVerticesTriangleStripQuad(textureBoundsC),\n      texCoordD: (_, { textureBoundsD }) => util.getTexCoordVerticesTriangleStripQuad(textureBoundsD),\n      texCoordE: (_, { textureBoundsE }) => util.getTexCoordVerticesTriangleStripQuad(textureBoundsE),\n      texCoordF: (_, { textureBoundsF }) => util.getTexCoordVerticesTriangleStripQuad(textureBoundsF)\n    },\n    framebuffer: regl.prop<CalcTileMultiAnalyze6.Props, 'fbo'>(\"fbo\"),\n  });\n}\n\nexport function createCalcTileDiffCommand(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n) {\n  return regl<\n    CalcTileDiff.Uniforms,\n    CalcTileDiff.Attributes,\n    CalcTileDiff.Props\n  >({\n    ...commonConfig,\n    vert: vertDouble,\n    frag: fragDiffCalc,\n    depth:  {\n      enable: false\n    },\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      textureA: (_, { textureA }) => textureA,\n      textureB: (_, { textureB }) => textureB,\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoordA: (_, { textureBoundsA }) => util.getTexCoordVerticesTriangleStripQuad(textureBoundsA),\n      texCoordB: (_, { textureBoundsB }) => util.getTexCoordVerticesTriangleStripQuad(textureBoundsB),\n    },\n    framebuffer: regl.prop<CalcTileDiff.Props, 'fbo'>(\"fbo\"),\n  });\n}\n\nexport function createDrawResultCommand(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n  fragMacros: Dictionary<any>,\n) {\n  return regl<\n    DrawTileResult.Uniforms,\n    DrawTileResult.Attributes,\n    DrawTileResult.Props\n  >({\n    ...commonConfig,\n    vert: vertSingle,\n    frag: util.defineMacros(fragDrawResult, fragMacros),\n    depth:  {\n      enable: false\n    },\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      scaleLength: regl.prop<DrawTileResult.Props, 'scaleLength'>('scaleLength'),\n      sentinelLength: regl.prop<DrawTileResult.Props, 'sentinelLength'>('sentinelLength'),\n      scaleColormap: regl.prop<DrawTileResult.Props, 'scaleColormap'>('scaleColormap'),\n      sentinelColormap: regl.prop<DrawTileResult.Props, 'sentinelColormap'>('sentinelColormap'),\n      texture: regl.prop<DrawTileResult.Props, 'texture'>(\"texture\"),\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoord: [[0, 1], [1, 1], [0, 0], [1, 0]],\n    },\n  });\n}\n","import REGL from 'regl';\n\nimport vertSingle from '../shaders/vertex/single.vs';\n\nimport fragConvertDem from '../shaders/fragment/convertDem.fs';\n\nimport {\n\tDrawCommon,\n\tConvertDem\n} from '../types';\n\nimport * as util from '../util';\n\nconst littleEndian = util.machineIsLittleEndian();\n\n/**\n * The object generated by this function should be merged into the DrawConfig for each Regl\n * command in the application.\n */\nexport function getCommonDrawConfiguration(\n\ttileSize: number,\n\tnodataValue: number,\n): REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props> {\n\treturn {\n\t  uniforms: {\n\t\tnodataValue,\n\t\tlittleEndian,\n\t\ttransformMatrix: ({ viewportWidth, viewportHeight }) => (\n\t\t  util.getTransformMatrix(viewportWidth, viewportHeight)\n\t\t),\n\t  },\n\t  attributes: {\n\t\tposition: (_, { canvasCoordinates }) => {\n\t\t  const [left, top] = canvasCoordinates;\n\t\t  const [right, bottom] = [left + tileSize, top + tileSize];\n\t\t  return [\n\t\t\t[left,  top   ],\n\t\t\t[right, top   ],\n\t\t\t[left,  bottom],\n\t\t\t[right, bottom],\n\t\t  ];\n\t\t},\n\t  },\n\t  // We don't need the depth buffer for 2D drawing. Leaving it enabled (and failing to clear it\n\t  // between draw calls) results in visual artifacts.\n\t  depth: { enable: false },\n\t  primitive: 'triangle strip',\n\t  count: 4,\n\t  viewport: (_, { canvasSize: [width, height] }) => ({ width, height }),\n\t};\n}\n\n/**\n * The command output by this function converts a tile in DEM format\n * to float32 packed as rgba.\n */\nexport function createConvertDemCommand(\n\tregl: REGL.Regl,\n\tcommonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n) {\n\treturn regl<\n\t  ConvertDem.Uniforms,\n\t  ConvertDem.Attributes,\n\t  ConvertDem.Props\n\t>({\n\t  ...commonConfig,\n\t  vert: vertSingle,\n\t  frag: fragConvertDem,\n\t  depth:  {\n\t\tenable: false\n\t  },\n\t  uniforms: {\n\t\t...commonConfig.uniforms as DrawCommon.Uniforms,\n\t\ttexture: (_, { texture }) => texture,\n\t  },\n\t  attributes: {\n\t\t...commonConfig.attributes as DrawCommon.Attributes,\n\t\ttexCoord: [[0, 1], [1, 1], [0, 0], [1, 0]],\n\t  },\n\t  framebuffer: regl.prop<ConvertDem.Props, 'fbo'>(\"fbo\"),\n\t});\n}\n","import {\n  flatMap,\n  isEmpty,\n} from 'lodash-es';\nimport REGL from 'regl';\n\nimport {\n  TextureCoordinates,\n  TileCoordinates,\n} from './types';\nimport * as util from './util';\n\nexport default class TextureManager {\n  // width/height of a tile in pixels\n  readonly tileSize: number;\n  // dimension of the texture in number of tiles\n  readonly tilesAcross: number;\n  // dimension of the texture in number of pixels\n  readonly pixelsAcross: number;\n  // number of tiles that will fit in the texture\n  readonly tileCapacity: number;\n  // the Regl Texture2D object\n  readonly texture: REGL.Texture2D;\n\n  // map of tile coordinates to texture coordinates\n  // (key is hash string of tile coordinates: 'x:y:z')\n  contents: Map<string, TextureCoordinates>;\n  // texture coordinates positions that are currently available\n  available: TextureCoordinates[];\n\n  constructor(\n    regl: REGL.Regl,\n    tileSize = 256,\n    maxTextureDimension: number,\n    flipY = false,\n    textureFormat: REGL.TextureFormatType = 'rgba',\n    textureType: REGL.TextureDataType = 'uint8',\n  ) {\n    const tilesAcross = Math.floor(maxTextureDimension / tileSize);\n    const pixelsAcross = tilesAcross * tileSize;\n    const tileCapacity = tilesAcross * tilesAcross;\n\n    const texture = regl.texture({\n      width: pixelsAcross,\n      height: pixelsAcross,\n      flipY: flipY,\n      format: textureFormat,\n      type: textureType,\n    });\n\n    const contents = new Map<string, TextureCoordinates>();\n    const available = this.allTextureCoordinates(tilesAcross, tileSize);\n\n    Object.assign(this, {\n      tileSize,\n      tilesAcross,\n      pixelsAcross,\n      tileCapacity,\n      texture,\n      contents,\n      available,\n    });\n  }\n\n  addTile(\n    tileCoordinates: TileCoordinates,\n    data: ArrayBufferView,\n  ): [TextureCoordinates, TextureCoordinates] {\n    const {\n      available,\n      contents,\n      texture,\n      tileSize,\n    } = this;\n\n    const hashKey = this.hashTileCoordinates(tileCoordinates);\n    if (contents.has(hashKey)) {\n      const textureCoordinates = contents.get(hashKey) as TextureCoordinates;\n      // We use a least-recently-used eviction policy for the tile cache. Map iterators are\n      // convenient for this, because they return entries in insertion order. But for this to work\n      // as expected, every time we access a tile, we need to reinsert it so that it moves to the\n      // end of that insertion-order list.\n      contents.delete(hashKey);\n      contents.set(hashKey, textureCoordinates);\n      return this.formatOutputTextureCoordinates(textureCoordinates);\n    }\n    if (isEmpty(available)) {\n      // Get the first key inserted. Map.prototype.keys() produces an iterable iterator over the keys\n      // in the order of insertion, so we can just use the iterator's first value.\n      const firstInsertedKey = contents.keys().next().value;\n      this.removeByHashKey(firstInsertedKey);\n    }\n    // remove from list of available positions\n    const textureCoordinates = available.pop() as TextureCoordinates;\n    // store mapping of tile to texture coordinates\n    contents.set(hashKey, textureCoordinates);\n\n    const { x: textureX, y: textureY } = textureCoordinates;\n    texture.subimage({\n      data,\n      width: tileSize,\n      height: tileSize,\n    }, textureX, textureY);\n\n    return this.formatOutputTextureCoordinates(textureCoordinates);\n  }\n\n  removeTile(tileCoordinates: TileCoordinates) {\n    this.removeByHashKey(this.hashTileCoordinates(tileCoordinates));\n  }\n\n  clearTiles() {\n    for (const hashKey of Array.from(this.contents.keys())) {\n      this.removeByHashKey(hashKey);\n    }\n  }\n\n  destroy() {\n    this.texture.destroy();\n  }\n\n  protected removeByHashKey(hashKey: string) {\n    // This method only removes the key. The pixel data remains in the texture.\n    if (this.contents.has(hashKey)) {\n      const textureCoordinates = this.contents.get(hashKey) as TextureCoordinates;\n      this.contents.delete(hashKey);\n      this.available.push(textureCoordinates);\n    }\n  }\n\n  protected formatOutputTextureCoordinates(\n    textureCoordinates: TextureCoordinates,\n  ): [TextureCoordinates, TextureCoordinates] {\n    const { x, y } = textureCoordinates;\n    const { pixelsAcross, tileSize } = this;\n    return [\n      {\n        x: x / pixelsAcross,\n        y: y / pixelsAcross,\n      },\n      {\n        x: (x + tileSize) / pixelsAcross,\n        y: (y + tileSize) / pixelsAcross,\n      },\n    ];\n  }\n\n  hashTileCoordinates({ x, y, z }: TileCoordinates): string {\n    return `${x}:${y}:${z}`;\n  }\n\n  getTextureCoordinates(\n    tileCoordinates: TileCoordinates,\n  ): [TextureCoordinates, TextureCoordinates] {\n    const hashKey = this.hashTileCoordinates(tileCoordinates);\n    const textureCoordinates = this.contents.get(hashKey) as TextureCoordinates;\n    return this.formatOutputTextureCoordinates(textureCoordinates);\n  }\n\n  protected allTextureCoordinates(tilesAcross: number, tileSize: number): TextureCoordinates[] {\n    return flatMap(util.range(tilesAcross), x =>\n      util.range(tilesAcross).map(y => ({\n        x: x * tileSize,\n        y: y * tileSize,\n      })),\n    );\n  }\n}\n","import * as L from 'leaflet';\nimport {\n  chunk,\n  flatMap,\n  zipWith,\n} from 'lodash-es';\nimport REGL, { Framebuffer2D } from 'regl';\n\nimport {\n  CLEAR_COLOR,\n  MAX_TEXTURE_DIMENSION,\n  EARTH_SUN_DISTANCE,\n  SUN_RADIUS,\n} from './constants';\n\nimport * as reglCommands from './reglCommands';\nimport TextureManager from './TextureManager';\nimport {\n  Color,\n  SentinelValue,\n  DrawTile,\n  DrawTileHsSimple,\n  DrawTileHsPregen,\n  DrawTileInterpolateColor,\n  DrawTileInterpolateColorOnly,\n  DrawTileInterpolateValue,\n  CalcTileMultiAnalyze1,\n  CalcTileMultiAnalyze2,\n  CalcTileMultiAnalyze3,\n  CalcTileMultiAnalyze4,\n  CalcTileMultiAnalyze5,\n  CalcTileMultiAnalyze6,\n  CalcTileDiff,\n  ConvertDem,\n  DrawTileResult,\n  ConvolutionSmooth,\n  Pair,\n  calcResult,\n  TileCoordinates,\n  TileDatum,\n  HillshadeOptions,\n  HsAdvMergeAndScaleTiles,\n  HsAdvCalcNormals,\n  HsAdvDirectLightning,\n  HsAdvSoftShadows,\n  HsAdvAmbientShadows,\n  HsAdvFinalColorscale,\n  HsAdvFinalBaselayer,\n  HsAdvSmooth,\n} from './types';\n\nimport * as util from './util';\n\nimport { vec3 } from \"gl-matrix\";\n\nexport default class Renderer {\n  gloperations: any;\n  canvas: HTMLCanvasElement;\n  regl: REGL.Regl;\n  nodataValue: number;\n  textureManager: TextureManager;\n  textureManagerA: TextureManager;\n  textureManagerB: TextureManager;\n  textureManagerC: TextureManager;\n  textureManagerD: TextureManager;\n  textureManagerE: TextureManager;\n  textureManagerF: TextureManager;\n  textureManagerHillshade: TextureManager;\n  tileSize: number;\n  scaleColormap: REGL.Texture2D;\n  scaleColormapPrevious: REGL.Texture2D;\n  sentinelColormap: REGL.Texture2D;\n  sentinelColormapPrevious: REGL.Texture2D;\n  scaleInput: Color[];\n  scaleInputPrevious: Color[];\n  sentinelInput: SentinelValue[];\n  sentinelInputPrevious: SentinelValue[];\n  normalTextureDimension: number;\n  maxTextureDimension: number;\n  sunDirections: vec3[];\n  ambientDirections: vec3[];\n\n  // Regl draw commands.\n  drawTile: REGL.DrawCommand<REGL.DefaultContext, DrawTile.Props>;\n  drawTileHsSimple: REGL.DrawCommand<REGL.DefaultContext, DrawTileHsSimple.Props>;\n  drawTileHsPregen: REGL.DrawCommand<REGL.DefaultContext, DrawTileHsPregen.Props>;\n  drawTileInterpolateColor: REGL.DrawCommand<REGL.DefaultContext, DrawTileInterpolateColor.Props>;\n  drawTileInterpolateColorOnly: REGL.DrawCommand<REGL.DefaultContext, DrawTileInterpolateColorOnly.Props>;\n  drawTileInterpolateValue: REGL.DrawCommand<REGL.DefaultContext, DrawTileInterpolateValue.Props>;\n  calcTileDiff: REGL.DrawCommand<REGL.DefaultContext, CalcTileDiff.Props>;\n  convertDem: REGL.DrawCommand<REGL.DefaultContext, ConvertDem.Props>;\n  drawTileResult: REGL.DrawCommand<REGL.DefaultContext, DrawTileResult.Props>;\n  calcTileMultiAnalyze1: REGL.DrawCommand<REGL.DefaultContext, CalcTileMultiAnalyze1.Props>;\n  calcTileMultiAnalyze2: REGL.DrawCommand<REGL.DefaultContext, CalcTileMultiAnalyze2.Props>;\n  calcTileMultiAnalyze3: REGL.DrawCommand<REGL.DefaultContext, CalcTileMultiAnalyze3.Props>;\n  calcTileMultiAnalyze4: REGL.DrawCommand<REGL.DefaultContext, CalcTileMultiAnalyze4.Props>;\n  calcTileMultiAnalyze5: REGL.DrawCommand<REGL.DefaultContext, CalcTileMultiAnalyze5.Props>;\n  calcTileMultiAnalyze6: REGL.DrawCommand<REGL.DefaultContext, CalcTileMultiAnalyze6.Props>;\n  convolutionSmooth: REGL.DrawCommand<REGL.DefaultContext, ConvolutionSmooth.Props>;\n  HsAdvMergeAndScaleTiles: REGL.DrawCommand<REGL.DefaultContext, HsAdvMergeAndScaleTiles.Props>;\n  HsAdvCalcNormals: REGL.DrawCommand<REGL.DefaultContext, HsAdvCalcNormals.Props>;\n  HsAdvDirectLightning: REGL.DrawCommand<REGL.DefaultContext, HsAdvDirectLightning.Props>;\n  HsAdvSoftShadows: REGL.DrawCommand<REGL.DefaultContext, HsAdvSoftShadows.Props>;\n  HsAdvAmbientShadows: REGL.DrawCommand<REGL.DefaultContext, HsAdvAmbientShadows.Props>;\n  HsAdvFinalColorscale: REGL.DrawCommand<REGL.DefaultContext, HsAdvFinalColorscale.Props>;\n  HsAdvFinalBaselayer: REGL.DrawCommand<REGL.DefaultContext, HsAdvFinalBaselayer.Props>;\n  HsAdvSmooth: REGL.DrawCommand<REGL.DefaultContext, HsAdvSmooth.Props>;\n\n  constructor(\n    gloperations: any,\n    tileSize: number,\n    nodataValue: number,\n    scaleInput: Color[],\n    sentinelInput: SentinelValue[],\n    colorscaleMaxLength: number,\n    sentinelMaxLength: number\n  ) {\n    const canvas = L.DomUtil.create(\"canvas\") as HTMLCanvasElement;\n    let maxTextureDimension = MAX_TEXTURE_DIMENSION;\n    let normalTextureDimension = 1024;\n\n    const regl = REGL({\n      canvas: canvas,\n      // profile: true,\n      // extension only used for advanced hillshading\n      // TODO: add fallback to rgba if writing to float fails\n      optionalExtensions: [\"OES_texture_float\", \"WEBGL_color_buffer_float\"],\n      onDone: function (err: Error, regl: REGL.Regl) {\n        if (err) {\n          console.log(err);\n          return;\n        } else {\n          // cannot use this directly as it seems to cause some issues\n          // maxTextureDimension = regl.limits.maxTextureSize;\n          if (regl.limits.maxTextureSize > 2048) {\n            maxTextureDimension = 2048;\n          }\n          if (regl.limits.maxTextureSize > 4096) {\n            maxTextureDimension = 4096;\n          }\n          if (regl.limits.maxTextureSize > 8192) {\n            maxTextureDimension = 8192;\n          }\n\n          // TODO: use lower normal dimension where relevant\n          // Currently set to same due to a bug\n          normalTextureDimension = maxTextureDimension;\n        }\n        // TODO: Improve software rendering detection\n        if (regl.limits.maxFragmentUniforms === 261) {\n          console.warn(\"Software rendering detected. Many features of this plugin will fail.\\\n          If you have a GPU, check if drivers are installed ok?\");\n        }\n      }\n    });\n\n    const commonDrawConfig = reglCommands.getCommonDrawConfiguration(tileSize, nodataValue);\n    const fragMacros = {\n      SCALE_MAX_LENGTH: colorscaleMaxLength,\n      SENTINEL_MAX_LENGTH: sentinelMaxLength,\n    };\n\n    // Assign object \"instance\" properties.\n    Object.assign(this, {\n      gloperations: gloperations,\n      canvas: canvas,\n      regl: regl,\n      tileSize: tileSize,\n      nodataValue: nodataValue,\n      maxTextureDimension: maxTextureDimension,\n      normalTextureDimension: normalTextureDimension,\n      scaleInput: scaleInput,\n      sentinelInput: sentinelInput,\n      scaleColormap: util.createColormapTexture(scaleInput, regl),\n      sentinelColormap: util.createColormapTexture(sentinelInput, regl),\n      textureManager: new TextureManager(regl, tileSize, normalTextureDimension, false),\n      textureManagerA: new TextureManager(regl, tileSize, normalTextureDimension, false),\n      textureManagerB: new TextureManager(regl, tileSize, normalTextureDimension, false),\n      textureManagerC: new TextureManager(regl, tileSize, normalTextureDimension, false),\n      textureManagerD: new TextureManager(regl, tileSize, normalTextureDimension, false),\n      textureManagerE: new TextureManager(regl, tileSize, normalTextureDimension, false),\n      textureManagerF: new TextureManager(regl, tileSize, normalTextureDimension, false),\n      textureManagerHillshade: new TextureManager(regl, tileSize, maxTextureDimension, false),\n      drawTile: reglCommands.createDrawTileCommand(regl, commonDrawConfig, fragMacros),\n      drawTileHsSimple: reglCommands.createDrawTileHsSimpleCommand(regl, commonDrawConfig, fragMacros),\n      drawTileHsPregen: reglCommands.createDrawTileHsPregenCommand(regl, commonDrawConfig, fragMacros),\n      drawTileInterpolateColor: reglCommands.createDrawTileInterpolateColorCommand(regl, commonDrawConfig, fragMacros),\n      drawTileInterpolateColorOnly: reglCommands.createDrawTileInterpolateColorOnlyCommand(regl, commonDrawConfig, fragMacros),\n      drawTileInterpolateValue: reglCommands.createDrawTileInterpolateValueCommand(regl, commonDrawConfig, fragMacros),\n      calcTileMultiAnalyze1: reglCommands.createCalcTileMultiAnalyze1Command(regl, commonDrawConfig),\n      calcTileMultiAnalyze2: reglCommands.createCalcTileMultiAnalyze2Command(regl, commonDrawConfig),\n      calcTileMultiAnalyze3: reglCommands.createCalcTileMultiAnalyze3Command(regl, commonDrawConfig),\n      calcTileMultiAnalyze4: reglCommands.createCalcTileMultiAnalyze4Command(regl, commonDrawConfig),\n      calcTileMultiAnalyze5: reglCommands.createCalcTileMultiAnalyze5Command(regl, commonDrawConfig),\n      calcTileMultiAnalyze6: reglCommands.createCalcTileMultiAnalyze6Command(regl, commonDrawConfig),\n      drawTileResult: reglCommands.createDrawResultCommand(regl, commonDrawConfig, fragMacros),\n      calcTileDiff: reglCommands.createCalcTileDiffCommand(regl, commonDrawConfig),\n      convertDem: reglCommands.createConvertDemCommand(regl, commonDrawConfig),\n      convolutionSmooth: reglCommands.createConvolutionSmoothCommand(regl, commonDrawConfig),\n      HsAdvMergeAndScaleTiles: reglCommands.createHsAdvMergeAndScaleTiles(regl),\n      HsAdvCalcNormals: reglCommands.createHsAdvCalcNormals(regl, commonDrawConfig),\n      HsAdvDirectLightning: reglCommands.createHsAdvDirectLightning(regl, commonDrawConfig),\n      HsAdvSoftShadows: reglCommands.createHsAdvSoftShadows(regl, commonDrawConfig),\n      HsAdvAmbientShadows: reglCommands.createHsAdvAmbientShadows(regl, commonDrawConfig),\n      HsAdvFinalColorscale: reglCommands.createHsAdvFinalColorscale(regl, commonDrawConfig),\n      HsAdvFinalBaselayer: reglCommands.createHsAdvFinalBaselayer(regl, commonDrawConfig),\n      HsAdvSmooth: reglCommands.createHsAdvSmoothCommand(regl, commonDrawConfig),\n    });\n  }\n\n  findMaxTextureDimension() {\n    // TODO: fix maxTextureSize logic\n    // cannot use this directly as it seems to cause some issues\n    // maxTextureDimension = regl.limits.maxTextureSize;\n    let maxTextureDimension = 1024;\n    if (this.regl.limits.maxTextureSize > 2048) {\n      maxTextureDimension = 2048;\n    }\n    if (this.regl.limits.maxTextureSize > 4096) {\n      maxTextureDimension = 4096;\n    }\n    if (this.regl.limits.maxTextureSize > 8192) {\n      maxTextureDimension = 8192;\n    }\n    return maxTextureDimension;\n  }\n\n  setMaxTextureDimension(newMaxTextureDimension: number) {\n    const {\n      textureManager,\n      tileSize,\n      regl,\n    } = this;\n\n    textureManager.destroy();\n\n    Object.assign(this, {\n      maxTextureDimension: newMaxTextureDimension,\n      textureManager: new TextureManager(regl, tileSize, newMaxTextureDimension, false),\n    });\n  }\n\n  updateColorscale(scaleInput: Color[]) {\n    this.scaleInputPrevious = this.scaleInput;\n    this.scaleInput = scaleInput;\n    this.scaleColormapPrevious = this.scaleColormap;\n    this.scaleColormap = util.createColormapTexture(scaleInput, this.regl);\n  }\n  updateSentinels(sentinelInput: SentinelValue[]) {\n    this.sentinelInputPrevious = this.sentinelInput;\n    this.sentinelInput = sentinelInput;\n    this.sentinelColormapPrevious = this.sentinelColormap;\n    this.sentinelColormap = util.createColormapTexture(sentinelInput, this.regl);\n  }\n\n  renderTile(\n    { coords, pixelData }: TileDatum,\n    _hillshadeOptions: HillshadeOptions,\n    zoom: number,\n  ): Pair<number> {\n    const {\n      regl,\n      textureManager,\n      tileSize,\n    } = this;\n    this.setCanvasSize(tileSize, tileSize);\n    // Add image to the texture and retrieve its texture coordinates.\n    const textureBounds = textureManager.addTile(coords, pixelData);\n\n    regl.clear({ color: CLEAR_COLOR });\n\n    const zoomdelta = _hillshadeOptions.hsSimpleZoomdelta || 0;\n\n    const offset_pixels = Math.max(0.5, 2 ** (zoom + zoomdelta) / 2048);\n    const offset_texcoords = offset_pixels / textureManager.texture.width;\n\n    if (_hillshadeOptions.hillshadeType === \"none\") {\n      this.drawTile({\n        canvasSize: [tileSize, tileSize],\n        canvasCoordinates: [0, 0],\n        textureBounds,\n        texture: textureManager.texture,\n        scaleLength: this.scaleInput.length,\n        sentinelLength: this.sentinelInput.length,\n        scaleColormap: this.scaleColormap,\n        sentinelColormap: this.sentinelColormap,\n        enableSimpleHillshade: false,\n      });\n    } else if (_hillshadeOptions.hillshadeType === \"simple\") {\n      this.drawTileHsSimple({\n        scaleLength: this.scaleInput.length,\n        sentinelLength: this.sentinelInput.length,\n        scaleColormap: this.scaleColormap,\n        sentinelColormap: this.sentinelColormap,\n        canvasSize: [tileSize, tileSize],\n        canvasCoordinates: [0, 0],\n        textureBounds: textureBounds,\n        texture: textureManager.texture,\n        textureSize: textureManager.texture.width,\n        tileSize: tileSize,\n        offset: offset_texcoords,\n        enableSimpleHillshade: true,\n        // elevationScale: _hillshadeOptions.hsElevationScale,\n        azimuth: _hillshadeOptions.hsSimpleAzimuth,\n        altitude: _hillshadeOptions.hsSimpleAltitude,\n        slopescale: _hillshadeOptions.hsSimpleSlopescale,\n      });\n    }\n\n    // Since the tile will fill the whole canvas, the offset is simply [0, 0].\n    return [0, 0];\n  }\n\n  renderTileHsPregen(\n    tileDatum: TileDatum,\n    tileDatumHs: TileDatum,\n  ): Pair<number> {\n    const {\n      regl,\n      textureManager,\n      textureManagerHillshade,\n      tileSize,\n    } = this;\n    this.setCanvasSize(tileSize, tileSize);\n    // Add image to the texture and retrieve its texture coordinates.\n    const textureBounds = textureManager.addTile(tileDatum.coords, tileDatum.pixelData);\n    const textureBoundsHs = textureManagerHillshade.addTile(tileDatumHs.coords, tileDatumHs.pixelData);\n\n    regl.clear({ color: CLEAR_COLOR });\n\n    this.drawTileHsPregen({\n      scaleLength: this.scaleInput.length,\n      sentinelLength: this.sentinelInput.length,\n      scaleColormap: this.scaleColormap,\n      sentinelColormap: this.sentinelColormap,\n      canvasSize: [tileSize, tileSize],\n      canvasCoordinates: [0, 0],\n      textureBounds: textureBounds,\n      textureBoundsHs: textureBoundsHs,\n      texture: textureManager.texture,\n      hillshadePregenTexture: textureManagerHillshade.texture,\n    });\n\n    // Since the tile will fill the whole canvas, the offset is simply [0, 0].\n    return [0, 0];\n  }\n\n  // TODO: Render to a fbo using a texture with flipY and this should not be necessary?\n  /**\n   * WebGL uses [0,0] coordinate at top, not bottom. Use this function to flip readPixel results.\n   */\n  flipReadPixelsUint(\n    width: number,\n    height: number,\n    pixels: Uint8Array,\n  ) {\n    const halfHeight = height / 2 | 0;  // the | 0 keeps the result an int\n    const bytesPerRow = width * 4;\n\n    // make a temp buffer to hold one row\n    const temp = new Uint8Array(width * 4);\n    for (let y = 0; y < halfHeight; ++y) {\n      const topOffset = y * bytesPerRow;\n      const bottomOffset = (height - y - 1) * bytesPerRow;\n      // make copy of a row on the top half\n      temp.set(pixels.subarray(topOffset, topOffset + bytesPerRow));\n      // copy a row from the bottom half to the top\n      pixels.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);\n      // copy the copy of the top half row to the bottom half\n      pixels.set(temp, bottomOffset);\n    }\n    return pixels;\n  }\n\n  renderTileDiff(\n    tileDatumA: TileDatum,\n    tileDatumB: TileDatum,\n  ): calcResult {\n    const {\n      regl,\n      textureManagerA,\n      textureManagerB,\n      tileSize,\n    } = this;\n    this.setCanvasSize(tileSize, tileSize);\n\n    // Add image to the texture and retrieve its texture coordinates.\n    const textureBoundsA = textureManagerA.addTile(tileDatumA.coords, tileDatumA.pixelData);\n    const textureBoundsB = textureManagerB.addTile(tileDatumB.coords, tileDatumB.pixelData);\n\n    const fboTile: Framebuffer2D = regl.framebuffer({\n      width: tileSize,\n      height: tileSize,\n      depth: false,\n      colorFormat: \"rgba\",\n      colorType: \"uint8\",\n    });\n\n    let resultEncodedPixels = new Uint8Array(tileSize * tileSize * 4);\n\n    this.calcTileDiff({\n      canvasSize: [tileSize, tileSize],\n      canvasCoordinates: [0, 0],\n      textureA: textureManagerA.texture,\n      textureB: textureManagerB.texture,\n      textureBoundsA: textureBoundsA,\n      textureBoundsB: textureBoundsB,\n      fbo:fboTile,\n    });\n\n    this.drawTileResult({\n      scaleLength: this.scaleInput.length,\n      sentinelLength: this.sentinelInput.length,\n      scaleColormap: this.scaleColormap,\n      sentinelColormap: this.sentinelColormap,\n      canvasSize: [tileSize, tileSize],\n      canvasCoordinates: [0, 0],\n      texture: fboTile,\n    });\n\n    fboTile.use(() => {\n      // Get encoded floatValues to use for mouseEvents\n      regl.read({data: resultEncodedPixels});\n    });\n    resultEncodedPixels = this.flipReadPixelsUint(tileSize, tileSize, resultEncodedPixels);\n    fboTile.destroy();\n\n    // Since the tile will fill the whole canvas, the offset is simply [0, 0].\n    return [0, 0, resultEncodedPixels];\n  }\n\n  renderConvertDem(\n    pixelData: Uint8Array\n  ): Uint8Array {\n    const {\n      regl,\n      tileSize,\n    } = this;\n\n    const tDem = regl.texture({\n      width: tileSize,\n      height: tileSize,\n      data: pixelData,\n      format: \"rgba\",\n      type: \"uint8\",\n      flipY: false,\n    });\n\n    const fboTile: Framebuffer2D = regl.framebuffer({\n      width: tileSize,\n      height: tileSize,\n      depth: false,\n      colorFormat: \"rgba\",\n      colorType: \"uint8\",\n    });\n\n    const resultEncodedPixels = new Uint8Array(tileSize * tileSize * 4);\n\n    this.convertDem({\n      canvasSize: [tileSize, tileSize],\n      canvasCoordinates: [0, 0],\n      texture: tDem,\n      fbo:fboTile,\n    });\n\n    fboTile.use(() => {\n      // Get encoded floats in rgba format\n      regl.read({data: resultEncodedPixels});\n    });\n    tDem.destroy();\n    fboTile.destroy();\n\n    return resultEncodedPixels;\n  }\n\n  renderConvolutionSmooth(\n    inputData: Uint8Array,\n    width: number,\n    height: number,\n    kernelSize: number,\n  ): Float32Array {\n    const { regl } = this;\n    this.setCanvasSize(width, height);\n\n    const texture = regl.texture({\n      data: inputData,\n      width: width,\n      height: height,\n      flipY: false,\n    });\n\n    const fboSmoothed = regl.framebuffer({\n      width: width,\n      height: height,\n      depth: false,\n      colorFormat: \"rgba\",\n      colorType: \"uint8\"\n    });\n\n    let resultEncodedPixels: Uint8Array | Float32Array = new Uint8Array(width * height * 4);\n\n    fboSmoothed.use(() => {\n      this.convolutionSmooth({\n        texture: texture,\n        // TODO: case with width != height?\n        textureSize: width,\n        kernelSize: kernelSize,\n      });\n      regl.read({data: resultEncodedPixels});\n    });\n\n    resultEncodedPixels = new Float32Array(resultEncodedPixels.buffer);\n\n    fboSmoothed.destroy();\n\n    return resultEncodedPixels;\n  }\n\n  renderTileHsAdvanced(\n    _hillshadeOptions: HillshadeOptions,\n    zoom: number,\n    textureCoords: number[][],\n    pixelScale: number,\n    baselayerTexCoords: number[][],\n  ): Pair<number> {\n    const {\n      regl,\n      textureManager,\n      tileSize,\n    } = this;\n    this.setCanvasSize(tileSize, tileSize);\n\n    const fboFloats = regl.framebuffer({\n      width: tileSize * 3,\n      height: tileSize * 3,\n      depth: false,\n      colorType: \"float\",\n    });\n\n    let fboSmoothed = regl.framebuffer({\n      width: tileSize * 3,\n      height: tileSize * 3,\n      depth: false,\n      colorType: \"float\",\n    });\n\n    const fboNormals = regl.framebuffer({\n      width: tileSize * 3,\n      height: tileSize * 3,\n      depth: false,\n      colorType: \"float\",\n    });\n\n    const fboSoftShadowPP = util.PingPong(regl, {\n      width: tileSize,\n      height: tileSize,\n      colorType: \"float\",\n    });\n\n    const fboAmbientShadowPP = util.PingPong(regl, {\n      width: tileSize,\n      height: tileSize,\n      colorType: \"float\",\n    });\n\n    let hsValueScale = 1.0;\n    if (typeof _hillshadeOptions.hsAdvValueScale === \"number\") {\n      hsValueScale = _hillshadeOptions.hsAdvValueScale;\n    } else if (_hillshadeOptions.hsAdvValueScale!.constructor === Object) {\n      hsValueScale = _hillshadeOptions.hsAdvValueScale![zoom];\n    }\n\n    this.HsAdvMergeAndScaleTiles({\n      canvasSize: [tileSize * 3, tileSize * 3],\n      texture: textureManager.texture,\n      fbo: fboFloats,\n      floatScale: hsValueScale,\n      texCoord: textureCoords,\n      nodataValue: this.nodataValue,\n    });\n\n    if (_hillshadeOptions.hsAdvSmoothInput && _hillshadeOptions.hsAdvSmoothInputKernel > 0) {\n      this.HsAdvSmooth({\n        canvasSize: [tileSize * 3, tileSize * 3],\n        canvasCoordinates: [0, 0],\n        tInput: fboFloats,\n        textureSize: tileSize * 3,\n        kernelSize: _hillshadeOptions.hsAdvSmoothInputKernel,\n        fbo: fboSmoothed,\n      });\n    } else {\n      fboSmoothed = fboFloats;\n    }\n\n    this.HsAdvCalcNormals({\n      canvasSize: [tileSize * 3, tileSize * 3],\n      canvasCoordinates: [0, 0],\n      tInput: fboSmoothed,\n      pixelScale: pixelScale,\n      onePixel: 1 / (tileSize * 3),\n      fbo: fboNormals,\n    });\n\n    // this.HsAdvDirectLightning({\n    //   scaleLength: this.scaleInput.length,\n    //   sentinelLength: this.sentinelInput.length,\n    //   scaleColormap: this.scaleColormap,\n    //   sentinelColormap: this.sentinelColormap,\n    //   canvasSize: [tileSize, tileSize],\n    //   canvasCoordinates: [0, 0],\n    //   tInput: fboFloats,\n    //   tNormal: fboNormals,\n    //   textureBounds: textureBounds,\n    //   floatScale: elevationScales[zoom],\n    //   sunDirection: vec3.normalize(vec3.create(), [1, 1, 1]),\n    // });\n\n    // Soft Shadows\n    for (let i = 0; i < _hillshadeOptions.hsAdvSoftIterations!; i++) {\n      this.HsAdvSoftShadows({\n        canvasSize: [tileSize, tileSize],\n        canvasCoordinates: [0, 0],\n        tInput: fboSmoothed,\n        tNormal: fboNormals,\n        tSrc: fboSoftShadowPP.ping(),\n        softIterations: _hillshadeOptions.hsAdvSoftIterations,\n        resolution: [tileSize, tileSize],\n        pixelScale: pixelScale,\n        sunDirection: this.sunDirections[i],\n        // fbo: i === _hillshadeOptions.hsAdvSoftIterations! - 1 ? undefined : fboSoftShadowPP.pong() // to show shadows\n        fbo: fboSoftShadowPP.pong(),\n      });\n      fboSoftShadowPP.swap();\n    }\n\n    for (let i = 0; i < _hillshadeOptions.hsAdvAmbientIterations!; i++) {\n      this.HsAdvAmbientShadows({\n        canvasSize: [tileSize, tileSize],\n        canvasCoordinates: [0, 0],\n        tInput: fboSmoothed,\n        tNormal: fboNormals,\n        tSrc: fboAmbientShadowPP.ping(),\n        ambientIterations: _hillshadeOptions.hsAdvAmbientIterations,\n        direction: this.ambientDirections[i],\n        resolution: [tileSize, tileSize],\n        pixelScale: pixelScale,\n        // fbo: i === _hillshadeOptions.hsAdvAmbientIterations! - 1 ? undefined : fboAmbientShadowPP.pong() // to show shadows\n        fbo: fboAmbientShadowPP.pong(),\n      });\n      fboAmbientShadowPP.swap();\n    }\n\n    if (_hillshadeOptions.hsAdvBaselayerUrl) {\n      // if url to baselayer is used, merge hs with this tile\n      this.HsAdvFinalBaselayer({\n        canvasSize: [tileSize, tileSize],\n        canvasCoordinates: [0, 0],\n        tBase: this.textureManagerHillshade.texture,\n        baseTexCoords: baselayerTexCoords,\n        tSoftShadow: fboSoftShadowPP.ping(),\n        tAmbient: fboAmbientShadowPP.ping(),\n        finalSoftMultiplier: _hillshadeOptions.hsAdvFinalSoftMultiplier,\n        finalAmbientMultiplier: _hillshadeOptions.hsAdvFinalAmbientMultiplier,\n      });\n    } else {\n      // if no url to baselayer, use colorscale to calculate colors to merge with hs.\n      this.HsAdvFinalColorscale({\n        scaleLength: this.scaleInput.length,\n        sentinelLength: this.sentinelInput.length,\n        scaleColormap: this.scaleColormap,\n        sentinelColormap: this.sentinelColormap,\n        canvasSize: [tileSize, tileSize],\n        canvasCoordinates: [0, 0],\n        tInput: fboFloats,\n        tSoftShadow: fboSoftShadowPP.ping(),\n        tAmbient: fboAmbientShadowPP.ping(),\n        floatScale: hsValueScale,\n        finalSoftMultiplier: _hillshadeOptions.hsAdvFinalSoftMultiplier,\n        finalAmbientMultiplier: _hillshadeOptions.hsAdvFinalAmbientMultiplier,\n      });\n    }\n\n    fboFloats.destroy();\n    fboNormals.destroy();\n    fboSoftShadowPP.destroy();\n    fboAmbientShadowPP.destroy();\n\n    // Since the tile will fill the whole canvas, the offset is simply [0, 0].\n    return [0, 0];\n  }\n\n  renderTileMulti1(\n    tileDatumA: TileDatum,\n    filterLowA: number,\n    filterHighA: number,\n    multiplierA: number,\n  ): calcResult {\n    const {\n      regl,\n      textureManagerA,\n      tileSize,\n    } = this;\n\n    this.setCanvasSize(tileSize, tileSize);\n\n    // Add image to the texture and retrieve its texture coordinates.\n    const textureBoundsA = textureManagerA.addTile(tileDatumA.coords, tileDatumA.pixelData);\n\n    const fboTile = regl.framebuffer({\n      width: tileSize,\n      height: tileSize,\n      depth: false,\n      colorFormat: \"rgba\",\n      colorType: \"uint8\",\n    });\n\n    let resultEncodedPixels = new Uint8Array(tileSize * tileSize * 4);\n\n    this.calcTileMultiAnalyze1({\n      canvasSize: [tileSize, tileSize],\n      canvasCoordinates: [0, 0],\n      textureA: textureManagerA.texture,\n      textureBoundsA: textureBoundsA,\n      filterLowA: filterLowA,\n      filterHighA: filterHighA,\n      multiplierA: multiplierA,\n      fbo:fboTile,\n    });\n\n    this.drawTileResult({\n      scaleLength: this.scaleInput.length,\n      sentinelLength: this.sentinelInput.length,\n      scaleColormap: this.scaleColormap,\n      sentinelColormap: this.sentinelColormap,\n      canvasSize: [tileSize, tileSize],\n      canvasCoordinates: [0, 0],\n      texture: fboTile,\n    });\n\n    fboTile.use(() => {\n      // Get encoded floatValues to use for mouseEvents\n      regl.read({data: resultEncodedPixels});\n    });\n    resultEncodedPixels = this.flipReadPixelsUint(tileSize, tileSize, resultEncodedPixels);\n    fboTile.destroy();\n\n    // Since the tile will fill the whole canvas, the offset is simply [0, 0].\n    return [0, 0, resultEncodedPixels];\n  }\n\n  renderTileMulti2(\n    tileDatumA: TileDatum,\n    tileDatumB: TileDatum,\n    filterLowA: number,\n    filterHighA: number,\n    filterLowB: number,\n    filterHighB: number,\n    multiplierA: number,\n    multiplierB: number,\n  ): calcResult {\n    const {\n      regl,\n      textureManagerA,\n      textureManagerB,\n      tileSize,\n    } = this;\n\n    this.setCanvasSize(tileSize, tileSize);\n\n    // Add image to the texture and retrieve its texture coordinates.\n    const textureBoundsA = textureManagerA.addTile(tileDatumA.coords, tileDatumA.pixelData);\n    const textureBoundsB = textureManagerB.addTile(tileDatumB.coords, tileDatumB.pixelData);\n\n    const fboTile = regl.framebuffer({\n      width: tileSize,\n      height: tileSize,\n      depth: false,\n      colorFormat: \"rgba\",\n      colorType: \"uint8\",\n    });\n\n    let resultEncodedPixels = new Uint8Array(tileSize * tileSize * 4);\n\n    this.calcTileMultiAnalyze2({\n      canvasSize: [tileSize, tileSize],\n      canvasCoordinates: [0, 0],\n      textureA: textureManagerA.texture,\n      textureB: textureManagerB.texture,\n      textureBoundsA: textureBoundsA,\n      textureBoundsB: textureBoundsB,\n      filterLowA: filterLowA,\n      filterHighA: filterHighA,\n      filterLowB: filterLowB,\n      filterHighB: filterHighB,\n      multiplierA: multiplierA,\n      multiplierB: multiplierB,\n      fbo:fboTile,\n    });\n\n    this.drawTileResult({\n      scaleLength: this.scaleInput.length,\n      sentinelLength: this.sentinelInput.length,\n      scaleColormap: this.scaleColormap,\n      sentinelColormap: this.sentinelColormap,\n      canvasSize: [tileSize, tileSize],\n      canvasCoordinates: [0, 0],\n      texture: fboTile,\n    });\n\n    fboTile.use(() => {\n      // Get encoded floatValues to use for mouseEvents\n      regl.read({data: resultEncodedPixels});\n    });\n    resultEncodedPixels = this.flipReadPixelsUint(tileSize, tileSize, resultEncodedPixels);\n    fboTile.destroy();\n\n    // Since the tile will fill the whole canvas, the offset is simply [0, 0].\n    return [0, 0, resultEncodedPixels];\n  }\n\n  renderTileMulti3(\n    tileDatumA: TileDatum,\n    tileDatumB: TileDatum,\n    tileDatumC: TileDatum,\n    filterLowA: number,\n    filterHighA: number,\n    filterLowB: number,\n    filterHighB: number,\n    filterLowC: number,\n    filterHighC: number,\n    multiplierA: number,\n    multiplierB: number,\n    multiplierC: number,\n  ): calcResult {\n    const {\n      regl,\n      textureManagerA,\n      textureManagerB,\n      textureManagerC,\n      tileSize,\n    } = this;\n\n    this.setCanvasSize(tileSize, tileSize);\n\n    // Add image to the texture and retrieve its texture coordinates.\n    const textureBoundsA = textureManagerA.addTile(tileDatumA.coords, tileDatumA.pixelData);\n    const textureBoundsB = textureManagerB.addTile(tileDatumB.coords, tileDatumB.pixelData);\n    const textureBoundsC = textureManagerC.addTile(tileDatumC.coords, tileDatumC.pixelData);\n\n    const fboTile = regl.framebuffer({\n      width: tileSize,\n      height: tileSize,\n      depth: false,\n      colorFormat: \"rgba\",\n      colorType: \"uint8\",\n    });\n\n    let resultEncodedPixels = new Uint8Array(tileSize * tileSize * 4);\n\n    this.calcTileMultiAnalyze3({\n      canvasSize: [tileSize, tileSize],\n      canvasCoordinates: [0, 0],\n      textureA: textureManagerA.texture,\n      textureB: textureManagerB.texture,\n      textureC: textureManagerC.texture,\n      textureBoundsA: textureBoundsA,\n      textureBoundsB: textureBoundsB,\n      textureBoundsC: textureBoundsC,\n      filterLowA: filterLowA,\n      filterHighA: filterHighA,\n      filterLowB: filterLowB,\n      filterHighB: filterHighB,\n      filterLowC: filterLowC,\n      filterHighC: filterHighC,\n      multiplierA: multiplierA,\n      multiplierB: multiplierB,\n      multiplierC: multiplierC,\n      fbo:fboTile,\n    });\n\n    this.drawTileResult({\n      scaleLength: this.scaleInput.length,\n      sentinelLength: this.sentinelInput.length,\n      scaleColormap: this.scaleColormap,\n      sentinelColormap: this.sentinelColormap,\n      canvasSize: [tileSize, tileSize],\n      canvasCoordinates: [0, 0],\n      texture: fboTile,\n    });\n\n    fboTile.use(() => {\n      // Get encoded floatValues to use for mouseEvents\n      regl.read({data: resultEncodedPixels});\n    });\n    resultEncodedPixels = this.flipReadPixelsUint(tileSize, tileSize, resultEncodedPixels);\n    fboTile.destroy();\n\n    // Since the tile will fill the whole canvas, the offset is simply [0, 0].\n    return [0, 0, resultEncodedPixels];\n  }\n\n  renderTileMulti4(\n    tileDatumA: TileDatum,\n    tileDatumB: TileDatum,\n    tileDatumC: TileDatum,\n    tileDatumD: TileDatum,\n    filterLowA: number,\n    filterHighA: number,\n    filterLowB: number,\n    filterHighB: number,\n    filterLowC: number,\n    filterHighC: number,\n    filterLowD: number,\n    filterHighD: number,\n    multiplierA: number,\n    multiplierB: number,\n    multiplierC: number,\n    multiplierD: number,\n  ): calcResult {\n    const {\n      regl,\n      textureManagerA,\n      textureManagerB,\n      textureManagerC,\n      textureManagerD,\n      tileSize,\n    } = this;\n    this.setCanvasSize(tileSize, tileSize);\n\n    // Add image to the texture and retrieve its texture coordinates.\n    const textureBoundsA = textureManagerA.addTile(tileDatumA.coords, tileDatumA.pixelData);\n    const textureBoundsB = textureManagerB.addTile(tileDatumB.coords, tileDatumB.pixelData);\n    const textureBoundsC = textureManagerC.addTile(tileDatumC.coords, tileDatumC.pixelData);\n    const textureBoundsD = textureManagerD.addTile(tileDatumD.coords, tileDatumD.pixelData);\n\n    const fboTile = regl.framebuffer({\n      width: tileSize,\n      height: tileSize,\n      depth: false,\n      colorFormat: \"rgba\",\n      colorType: \"uint8\",\n    });\n\n    let resultEncodedPixels = new Uint8Array(tileSize * tileSize * 4);\n\n    this.calcTileMultiAnalyze4({\n      canvasSize: [tileSize, tileSize],\n      canvasCoordinates: [0, 0],\n      textureA: textureManagerA.texture,\n      textureB: textureManagerB.texture,\n      textureC: textureManagerC.texture,\n      textureD: textureManagerD.texture,\n      textureBoundsA: textureBoundsA,\n      textureBoundsB: textureBoundsB,\n      textureBoundsC: textureBoundsC,\n      textureBoundsD: textureBoundsD,\n      filterLowA: filterLowA,\n      filterHighA: filterHighA,\n      filterLowB: filterLowB,\n      filterHighB: filterHighB,\n      filterLowC: filterLowC,\n      filterHighC: filterHighC,\n      filterLowD: filterLowD,\n      filterHighD: filterHighD,\n      multiplierA: multiplierA,\n      multiplierB: multiplierB,\n      multiplierC: multiplierC,\n      multiplierD: multiplierD,\n      fbo:fboTile,\n    });\n\n    this.drawTileResult({\n      scaleLength: this.scaleInput.length,\n      sentinelLength: this.sentinelInput.length,\n      scaleColormap: this.scaleColormap,\n      sentinelColormap: this.sentinelColormap,\n      canvasSize: [tileSize, tileSize],\n      canvasCoordinates: [0, 0],\n      texture: fboTile,\n    });\n\n    fboTile.use(() => {\n      // Get encoded floatValues to use for mouseEvents\n      regl.read({data: resultEncodedPixels});\n    });\n    resultEncodedPixels = this.flipReadPixelsUint(tileSize, tileSize, resultEncodedPixels);\n    fboTile.destroy();\n\n    // Since the tile will fill the whole canvas, the offset is simply [0, 0].\n    return [0, 0, resultEncodedPixels];\n  }\n\n  renderTileMulti5(\n    tileDatumA: TileDatum,\n    tileDatumB: TileDatum,\n    tileDatumC: TileDatum,\n    tileDatumD: TileDatum,\n    tileDatumE: TileDatum,\n    filterLowA: number,\n    filterHighA: number,\n    filterLowB: number,\n    filterHighB: number,\n    filterLowC: number,\n    filterHighC: number,\n    filterLowD: number,\n    filterHighD: number,\n    filterLowE: number,\n    filterHighE: number,\n    multiplierA: number,\n    multiplierB: number,\n    multiplierC: number,\n    multiplierD: number,\n    multiplierE: number,\n  ): calcResult {\n    const {\n      regl,\n      textureManagerA,\n      textureManagerB,\n      textureManagerC,\n      textureManagerD,\n      textureManagerE,\n      tileSize,\n    } = this;\n\n    this.setCanvasSize(tileSize, tileSize);\n\n    // Add image to the texture and retrieve its texture coordinates.\n    const textureBoundsA = textureManagerA.addTile(tileDatumA.coords, tileDatumA.pixelData);\n    const textureBoundsB = textureManagerB.addTile(tileDatumB.coords, tileDatumB.pixelData);\n    const textureBoundsC = textureManagerC.addTile(tileDatumC.coords, tileDatumC.pixelData);\n    const textureBoundsD = textureManagerD.addTile(tileDatumD.coords, tileDatumD.pixelData);\n    const textureBoundsE = textureManagerE.addTile(tileDatumE.coords, tileDatumE.pixelData);\n\n    const fboTile = regl.framebuffer({\n      width: tileSize,\n      height: tileSize,\n      depth: false,\n      colorFormat: \"rgba\",\n      colorType: \"uint8\",\n    });\n\n    let resultEncodedPixels = new Uint8Array(tileSize * tileSize * 4);\n\n    this.calcTileMultiAnalyze5({\n      canvasSize: [tileSize, tileSize],\n      canvasCoordinates: [0, 0],\n      textureA: textureManagerA.texture,\n      textureB: textureManagerB.texture,\n      textureC: textureManagerC.texture,\n      textureD: textureManagerD.texture,\n      textureE: textureManagerE.texture,\n      textureBoundsA: textureBoundsA,\n      textureBoundsB: textureBoundsB,\n      textureBoundsC: textureBoundsC,\n      textureBoundsD: textureBoundsD,\n      textureBoundsE: textureBoundsE,\n      filterLowA: filterLowA,\n      filterHighA: filterHighA,\n      filterLowB: filterLowB,\n      filterHighB: filterHighB,\n      filterLowC: filterLowC,\n      filterHighC: filterHighC,\n      filterLowD: filterLowD,\n      filterHighD: filterHighD,\n      filterLowE: filterLowE,\n      filterHighE: filterHighE,\n      multiplierA: multiplierA,\n      multiplierB: multiplierB,\n      multiplierC: multiplierC,\n      multiplierD: multiplierD,\n      multiplierE: multiplierE,\n      fbo:fboTile,\n    });\n\n    this.drawTileResult({\n      scaleLength: this.scaleInput.length,\n      sentinelLength: this.sentinelInput.length,\n      scaleColormap: this.scaleColormap,\n      sentinelColormap: this.sentinelColormap,\n      canvasSize: [tileSize, tileSize],\n      canvasCoordinates: [0, 0],\n      texture: fboTile,\n    });\n\n    fboTile.use(() => {\n      // Get encoded floatValues to use for mouseEvents\n      regl.read({data: resultEncodedPixels});\n    });\n    resultEncodedPixels = this.flipReadPixelsUint(tileSize, tileSize, resultEncodedPixels);\n    fboTile.destroy();\n\n    // Since the tile will fill the whole canvas, the offset is simply [0, 0].\n    return [0, 0, resultEncodedPixels];\n  }\n\n  renderTileMulti6(\n    tileDatumA: TileDatum,\n    tileDatumB: TileDatum,\n    tileDatumC: TileDatum,\n    tileDatumD: TileDatum,\n    tileDatumE: TileDatum,\n    tileDatumF: TileDatum,\n    filterLowA: number,\n    filterHighA: number,\n    filterLowB: number,\n    filterHighB: number,\n    filterLowC: number,\n    filterHighC: number,\n    filterLowD: number,\n    filterHighD: number,\n    filterLowE: number,\n    filterHighE: number,\n    filterLowF: number,\n    filterHighF: number,\n    multiplierA: number,\n    multiplierB: number,\n    multiplierC: number,\n    multiplierD: number,\n    multiplierE: number,\n    multiplierF: number,\n  ): calcResult {\n    const {\n      regl,\n      textureManagerA,\n      textureManagerB,\n      textureManagerC,\n      textureManagerD,\n      textureManagerE,\n      textureManagerF,\n      tileSize,\n    } = this;\n\n    this.setCanvasSize(tileSize, tileSize);\n\n    // Add image to the texture and retrieve its texture coordinates.\n    const textureBoundsA = textureManagerA.addTile(tileDatumA.coords, tileDatumA.pixelData);\n    const textureBoundsB = textureManagerB.addTile(tileDatumB.coords, tileDatumB.pixelData);\n    const textureBoundsC = textureManagerC.addTile(tileDatumC.coords, tileDatumC.pixelData);\n    const textureBoundsD = textureManagerD.addTile(tileDatumD.coords, tileDatumD.pixelData);\n    const textureBoundsE = textureManagerE.addTile(tileDatumE.coords, tileDatumE.pixelData);\n    const textureBoundsF = textureManagerE.addTile(tileDatumF.coords, tileDatumF.pixelData);\n\n    const fboTile = regl.framebuffer({\n      width: tileSize,\n      height: tileSize,\n      depth: false,\n      colorFormat: \"rgba\",\n      colorType: \"uint8\",\n    });\n\n    let resultEncodedPixels = new Uint8Array(tileSize * tileSize * 4);\n\n    this.calcTileMultiAnalyze6({\n      canvasSize: [tileSize, tileSize],\n      canvasCoordinates: [0, 0],\n      textureA: textureManagerA.texture,\n      textureB: textureManagerB.texture,\n      textureC: textureManagerC.texture,\n      textureD: textureManagerD.texture,\n      textureE: textureManagerE.texture,\n      textureF: textureManagerF.texture,\n      textureBoundsA: textureBoundsA,\n      textureBoundsB: textureBoundsB,\n      textureBoundsC: textureBoundsC,\n      textureBoundsD: textureBoundsD,\n      textureBoundsE: textureBoundsE,\n      textureBoundsF: textureBoundsF,\n      filterLowA: filterLowA,\n      filterHighA: filterHighA,\n      filterLowB: filterLowB,\n      filterHighB: filterHighB,\n      filterLowC: filterLowC,\n      filterHighC: filterHighC,\n      filterLowD: filterLowD,\n      filterHighD: filterHighD,\n      filterLowE: filterLowE,\n      filterHighE: filterHighE,\n      filterLowF: filterLowF,\n      filterHighF: filterHighF,\n      multiplierA: multiplierA,\n      multiplierB: multiplierB,\n      multiplierC: multiplierC,\n      multiplierD: multiplierD,\n      multiplierE: multiplierE,\n      multiplierF: multiplierF,\n      fbo:fboTile,\n    });\n\n    this.drawTileResult({\n      scaleLength: this.scaleInput.length,\n      sentinelLength: this.sentinelInput.length,\n      scaleColormap: this.scaleColormap,\n      sentinelColormap: this.sentinelColormap,\n      canvasSize: [tileSize, tileSize],\n      canvasCoordinates: [0, 0],\n      texture: fboTile,\n    });\n\n    fboTile.use(() => {\n      // Get encoded floatValues to use for mouseEvents\n      regl.read({data: resultEncodedPixels});\n    });\n    resultEncodedPixels = this.flipReadPixelsUint(tileSize, tileSize, resultEncodedPixels);\n    fboTile.destroy();\n\n    // Since the tile will fill the whole canvas, the offset is simply [0, 0].\n    return [0, 0, resultEncodedPixels];\n  }\n\n  renderTiles(\n    tiles: TileDatum[],\n    _hillshadeOptions: HillshadeOptions,\n    zoom: number,\n  ): Array<Pair<number>> {\n    const {\n      regl,\n      textureManager,\n      tileSize,\n    } = this;\n\n    // Compute required canvas dimensions, then resize the canvas.\n    const [canvasWidth, canvasHeight] = this.computeRequiredCanvasDimensions(tiles.length);\n    this.setCanvasSize(canvasWidth, canvasHeight);\n\n    // Compute the coordinates at which each tile will be rendered in the canvas.\n    const canvasCoordinates = this.getCanvasCoordinates(canvasWidth, canvasHeight, tiles.length);\n\n    type TileWithCanvasCoords = TileDatum & { canvasCoords: Pair<number> };\n\n    // Form an array combining each tile datum with the coordinates at which it will be rendered.\n    const tilesWithCanvasCoordinates = zipWith<TileDatum | Pair<number>, TileWithCanvasCoords>(\n      tiles,\n      canvasCoordinates,\n      (tile: TileDatum, canvasCoords: Pair<number>) => ({\n        ...tile,\n        canvasCoords,\n      })\n    );\n\n    const canvasSize = [canvasWidth, canvasHeight] as Pair<number>;\n\n    // Clear existing tiles from cache.\n    textureManager.clearTiles();\n    // Clear the canvas.\n    regl.clear({ color: CLEAR_COLOR });\n\n    // Split the tiles array into chunks the size of the texture capacity. If we need to render more\n    // tiles than will fit in the texture, we have to render in batches.\n    const chunks = chunk(tilesWithCanvasCoordinates, textureManager.tileCapacity);\n\n    const zoomdelta = _hillshadeOptions.hsSimpleZoomdelta || 0;\n\n    // Render chunk by chunk.\n    for (const chunk of chunks) {\n      // Add tiles.\n      const textureBounds = chunk.map(\n        ({ coords, pixelData }) => textureManager.addTile(coords, pixelData),\n      );\n\n      const offset_pixels = Math.max(0.5, 2 ** (zoom + zoomdelta) / 2048);\n      const offset_texcoords = offset_pixels / textureManager.texture.width;\n\n      if (_hillshadeOptions.hillshadeType === \"none\") {\n        this.drawTile(\n          chunk.map(({ canvasCoords }, index) => ({\n            canvasSize,\n            canvasCoordinates: canvasCoords,\n            textureBounds: textureBounds[index],\n            texture: textureManager.texture,\n            scaleLength: this.scaleInput.length,\n            sentinelLength: this.sentinelInput.length,\n            scaleColormap: this.scaleColormap,\n            sentinelColormap: this.sentinelColormap,\n            enableSimpleHillshade: false,\n          }))\n        );\n      } else if (_hillshadeOptions.hillshadeType === \"simple\") {\n        this.drawTileHsSimple(\n          chunk.map(({ canvasCoords }, index) => ({\n            scaleLength: this.scaleInput.length,\n            sentinelLength: this.sentinelInput.length,\n            scaleColormap: this.scaleColormap,\n            sentinelColormap: this.sentinelColormap,\n            canvasSize,\n            canvasCoordinates: canvasCoords,\n            textureBounds: textureBounds[index],\n            textureSize: textureManager.texture.width,\n            texture: textureManager.texture,\n            tileSize: tileSize,\n            offset: offset_texcoords,\n            enableSimpleHillshade: true,\n            azimuth: _hillshadeOptions.hsSimpleAzimuth,\n            altitude: _hillshadeOptions.hsSimpleAltitude,\n            slopescale: _hillshadeOptions.hsSimpleSlopescale,\n          }))\n        );\n      }\n    }\n\n    return canvasCoordinates;\n  }\n\n  renderTilesHsPregen(\n    tiles: TileDatum[],\n    tilesHs: TileDatum[],\n  ): Array<Pair<number>> {\n    const {\n      regl,\n      textureManager,\n      textureManagerHillshade,\n    } = this;\n\n    // Compute required canvas dimensions, then resize the canvas.\n    const [canvasWidth, canvasHeight] = this.computeRequiredCanvasDimensions(tiles.length);\n    this.setCanvasSize(canvasWidth, canvasHeight);\n\n    // Compute the coordinates at which each tile will be rendered in the canvas.\n    const canvasCoordinates = this.getCanvasCoordinates(canvasWidth, canvasHeight, tiles.length);\n\n    interface TilesWithCanvasCoords {\n      canvasCoords: Pair<number>;\n      coords: TileCoordinates;\n      tilesPixelData: Uint8Array;\n      tilesHsPixelData: Uint8Array;\n    }\n\n    // Form an array combining each tile datum with the coordinates at which it will be rendered.\n    const tilesWithCanvasCoordinates = zipWith<TileDatum | Pair<number>, TilesWithCanvasCoords>(\n      tiles,\n      tilesHs,\n      canvasCoordinates,\n      (tiles: TileDatum, tilesHs: TileDatum, canvasCoords: Pair<number>) => ({\n        coords: tiles.coords,\n        tilesPixelData: tiles.pixelData,\n        tilesHsPixelData: tilesHs.pixelData,\n        canvasCoords,\n      }),\n    );\n\n    const canvasSize = [canvasWidth, canvasHeight] as Pair<number>;\n\n    // Clear existing tiles from cache.\n    textureManager.clearTiles();\n    textureManagerHillshade.clearTiles();\n\n    // Clear the canvas.\n    regl.clear({ color: CLEAR_COLOR });\n\n    // Split the tiles array into chunks the size of the texture capacity. If we need to render more\n    // tiles than will fit in the texture, we have to render in batches.\n    const chunks = chunk(tilesWithCanvasCoordinates, textureManager.tileCapacity);\n\n    // Render chunk by chunk.\n    for (const chunk of chunks) {\n      // Add tiles.\n      const textureBounds = chunk.map(\n        ({ coords, tilesPixelData }) => textureManager.addTile(coords, tilesPixelData),\n      );\n      const textureBoundsHs = chunk.map(\n        ({ coords, tilesHsPixelData }) => textureManagerHillshade.addTile(coords, tilesHsPixelData),\n      );\n\n      this.drawTileHsPregen(\n        chunk.map(({ canvasCoords }, index) => ({\n          scaleLength: this.scaleInput.length,\n          sentinelLength: this.sentinelInput.length,\n          scaleColormap: this.scaleColormap,\n          sentinelColormap: this.sentinelColormap,\n          canvasSize,\n          canvasCoordinates: canvasCoords,\n          textureBounds: textureBounds[index],\n          textureBoundsHs: textureBoundsHs[index],\n          texture: textureManager.texture,\n          hillshadePregenTexture: textureManagerHillshade.texture,\n        }))\n      );\n    }\n\n    return canvasCoordinates;\n  }\n\n  async renderTilesHsAdvanced(\n    tiles: TileDatum[],\n    _hillshadeOptions: HillshadeOptions,\n    url: string,\n    zoom: number,\n    pixelScale: number,\n  ) {\n    const {\n      regl,\n      textureManager,\n      tileSize,\n      nodataValue\n    } = this;\n\n    // Compute required canvas dimensions, then resize the canvas.\n    const [canvasWidth, canvasHeight] = this.computeRequiredCanvasDimensions(tiles.length);\n    this.setCanvasSize(canvasWidth, canvasHeight);\n\n    // Compute the coordinates at which each tile will be rendered in the canvas.\n    const canvasCoordinates = this.getCanvasCoordinates(canvasWidth, canvasHeight, tiles.length);\n\n    type TileWithCanvasCoords = TileDatum & { canvasCoords: Pair<number> };\n\n    // Form an array combining each tile datum with the coordinates at which it will be rendered.\n    const tilesWithCanvasCoordinates = zipWith<TileDatum | Pair<number>, TileWithCanvasCoords>(\n      tiles,\n      canvasCoordinates,\n      (tile: TileDatum, canvasCoords: Pair<number>) => ({\n        ...tile,\n        canvasCoords,\n      })\n    );\n\n    const canvasSize = [canvasWidth, canvasHeight] as Pair<number>;\n\n    // Clear existing tiles from cache.\n    textureManager.clearTiles();\n\n    // Clear the canvas.\n    regl.clear({ color: CLEAR_COLOR });\n\n    // Split the tiles array into chunks the size of the texture capacity. If we need to render more\n    // tiles than will fit in the texture, we have to render in batches.\n    const chunks = chunk(tilesWithCanvasCoordinates, textureManager.tileCapacity);\n    const nodataTile = util.createNoDataTile(nodataValue, tileSize);\n\n    let hsValueScale = 1.0;\n    if (typeof _hillshadeOptions.hsAdvValueScale === \"number\") {\n      hsValueScale = _hillshadeOptions.hsAdvValueScale;\n    } else if (_hillshadeOptions.hsAdvValueScale!.constructor === Object) {\n      hsValueScale = _hillshadeOptions.hsAdvValueScale![zoom];\n    }\n\n    // Render chunk by chunk.\n    for (const chunk of chunks) {\n      for (const tile of chunk) {\n        const {\n          coords,\n          pixelData,\n          canvasCoords,\n        } = tile;\n\n        textureManager.addTile(coords, pixelData);\n        // if tile is just noData, don't do anything\n        if (util.typedArraysAreEqual(pixelData, nodataTile)) {\n          // console.log(\"nodata tile. exiting\");\n        } else {\n          let textureCoords: number[][] = [];\n          textureCoords = await util.getAdjacentTilesTexCoords(\n            this.gloperations,\n            this.textureManager,\n            coords,\n            url\n          );\n\n          let baselayerTexCoords: number[][] = [];\n          // download baselayer tile if url specified\n          if (_hillshadeOptions.hsAdvBaselayerUrl) {\n            // TODO: Cache tiles and check if url has changed before fetching\n            const basePixelData = await this.gloperations._fetchTileData(\n              coords,\n              _hillshadeOptions.hsAdvBaselayerUrl,\n              \"image\",\n            );\n            const textureBounds = this.textureManagerHillshade.addTile(coords, basePixelData);\n            baselayerTexCoords = util.getTexCoordVerticesTriangleStripQuad(textureBounds);\n          }\n\n          const fboFloats = regl.framebuffer({\n            width: tileSize * 3,\n            height: tileSize * 3,\n            depth: false,\n            colorType: \"float\",\n          });\n\n          let fboSmoothed = regl.framebuffer({\n            width: tileSize * 3,\n            height: tileSize * 3,\n            depth: false,\n            colorType: \"float\",\n          });\n\n          const fboNormals = regl.framebuffer({\n            width: tileSize * 3,\n            height: tileSize * 3,\n            depth: false,\n            colorType: \"float\",\n          });\n\n          const fboSoftShadowPP = util.PingPong(regl, {\n            width: tileSize,\n            height: tileSize,\n            colorType: \"float\",\n          });\n\n          const fboAmbientShadowPP = util.PingPong(regl, {\n            width: tileSize,\n            height: tileSize,\n            colorType: \"float\",\n          });\n\n          this.HsAdvMergeAndScaleTiles({\n            canvasSize: [tileSize * 3, tileSize * 3],\n            texture: textureManager.texture,\n            fbo: fboFloats,\n            floatScale: hsValueScale,\n            texCoord: textureCoords,\n            nodataValue: nodataValue,\n          });\n\n          if (_hillshadeOptions.hsAdvSmoothInput && _hillshadeOptions.hsAdvSmoothInputKernel > 0) {\n            this.HsAdvSmooth({\n              canvasSize: [tileSize * 3, tileSize * 3],\n              canvasCoordinates: [0, 0],\n              tInput: fboFloats,\n              textureSize: tileSize * 3,\n              kernelSize: _hillshadeOptions.hsAdvSmoothInputKernel,\n              fbo: fboSmoothed,\n            });\n          } else {\n            fboSmoothed = fboFloats;\n          }\n\n          this.HsAdvCalcNormals({\n            canvasSize: [tileSize * 3, tileSize * 3],\n            canvasCoordinates: [0, 0],\n            tInput: fboSmoothed,\n            pixelScale: pixelScale,\n            onePixel: 1 / (tileSize * 3),\n            fbo: fboNormals,\n          });\n\n          // Soft Shadows\n          for (let i = 0; i < _hillshadeOptions.hsAdvSoftIterations!; i++) {\n            this.HsAdvSoftShadows({\n              canvasSize: [tileSize, tileSize],\n              canvasCoordinates: [0, 0],\n              tInput: fboSmoothed,\n              tNormal: fboNormals,\n              tSrc: fboSoftShadowPP.ping(),\n              softIterations: _hillshadeOptions.hsAdvSoftIterations,\n              resolution: [tileSize, tileSize],\n              pixelScale: pixelScale,\n              sunDirection: this.sunDirections[i],\n              // fbo: i === _hillshadeOptions.hsAdvSoftIterations! - 1 ? undefined : fboSoftShadowPP.pong() // to show shadows\n              fbo: fboSoftShadowPP.pong(),\n            });\n            fboSoftShadowPP.swap();\n          }\n\n          for (let i = 0; i < _hillshadeOptions.hsAdvAmbientIterations!; i++) {\n            this.HsAdvAmbientShadows({\n              canvasSize: [tileSize, tileSize],\n              canvasCoordinates: [0, 0],\n              tInput: fboSmoothed,\n              tNormal: fboNormals,\n              tSrc: fboAmbientShadowPP.ping(),\n              ambientIterations: _hillshadeOptions.hsAdvAmbientIterations,\n              direction: this.ambientDirections[i],\n              resolution: [tileSize, tileSize],\n              pixelScale: pixelScale,\n              // fbo: i === _hillshadeOptions.hsAdvAmbientIterations! - 1 ? undefined : fboAmbientShadowPP.pong() // to show shadows\n              fbo: fboAmbientShadowPP.pong(),\n            });\n            fboAmbientShadowPP.swap();\n          }\n\n          if (_hillshadeOptions.hsAdvBaselayerUrl) {\n            // if url to baselayer is used, merge hs with this tile\n            this.HsAdvFinalBaselayer({\n              canvasSize: canvasSize,\n              canvasCoordinates: canvasCoords,\n              tBase: this.textureManagerHillshade.texture,\n              baseTexCoords: baselayerTexCoords,\n              tSoftShadow: fboSoftShadowPP.ping(),\n              tAmbient: fboAmbientShadowPP.ping(),\n              finalSoftMultiplier: _hillshadeOptions.hsAdvFinalSoftMultiplier,\n              finalAmbientMultiplier: _hillshadeOptions.hsAdvFinalAmbientMultiplier,\n            });\n          } else {\n            // if no url to baselayer, use colorscale to calculate colors to merge with hs.\n            this.HsAdvFinalColorscale({\n              scaleLength: this.scaleInput.length,\n              sentinelLength: this.sentinelInput.length,\n              scaleColormap: this.scaleColormap,\n              sentinelColormap: this.sentinelColormap,\n              canvasSize: canvasSize,\n              canvasCoordinates: canvasCoords,\n              tInput: fboFloats,\n              tSoftShadow: fboSoftShadowPP.ping(),\n              tAmbient: fboAmbientShadowPP.ping(),\n              floatScale: hsValueScale,\n              finalSoftMultiplier: _hillshadeOptions.hsAdvFinalSoftMultiplier,\n              finalAmbientMultiplier: _hillshadeOptions.hsAdvFinalAmbientMultiplier,\n            });\n          }\n\n          fboFloats.destroy();\n          fboNormals.destroy();\n          fboSoftShadowPP.destroy();\n          fboAmbientShadowPP.destroy();\n        }\n      }\n    }\n  return canvasCoordinates;\n  }\n\n  renderTilesWithDiff(\n    tilesA: TileDatum[],\n    tilesB: TileDatum[],\n    onFrameRendered: (canvasCoordinates: Array<Pair<number>>) => void,\n  ) {\n    const {\n      regl,\n      textureManagerA,\n      textureManagerB,\n      tileSize,\n    } = this;\n\n    // Compute required canvas dimensions, then resize the canvas.\n    const canvasSize = this.computeRequiredCanvasDimensions(tilesA.length);\n    const [canvasWidth, canvasHeight] = canvasSize;\n    this.setCanvasSize(canvasWidth, canvasHeight);\n\n    // Compute the coordinates at which each tile will be rendered in the canvas.\n    const canvasCoordinates = this.getCanvasCoordinates(canvasWidth, canvasHeight, tilesA.length);\n\n    interface TilesWithCanvasCoords {\n      canvasCoords: Pair<number>;\n      coords: TileCoordinates;\n      tilesAPixelData: Uint8Array;\n      tilesBPixelData: Uint8Array;\n    }\n\n    // Form an array combining each tile datum with the coordinates at which it will be rendered.\n    const tilesWithCanvasCoordinates = zipWith<TileDatum | Pair<number>, TilesWithCanvasCoords>(\n      tilesA,\n      tilesB,\n      canvasCoordinates,\n      (tilesA: TileDatum, tilesB: TileDatum, canvasCoords: Pair<number>) => ({\n        coords: tilesA.coords,\n        tilesAPixelData: tilesA.pixelData,\n        tilesBPixelData: tilesB.pixelData,\n        canvasCoords,\n      })\n    );\n\n    const resultEncodedPixels: Uint8Array[] = [];\n\n    const renderFrame = () => {\n      // Split the tiles array into chunks the size of the texture capacity. If we need to render more\n      // tiles than will fit in the texture, we have to render in batches.\n      const chunks = chunk(tilesWithCanvasCoordinates, textureManagerA.tileCapacity);\n\n      // Clear the canvas.\n      regl.clear({ color: CLEAR_COLOR });\n\n      let tileIndex = 0;\n\n      // Render chunk by chunk.\n      for (const chunk of chunks) {\n        // Add tiles.\n        const tilesABounds = chunk.map(\n          ({ coords, tilesAPixelData }) => textureManagerA.addTile(coords, tilesAPixelData),\n        );\n        const tilesBBounds = chunk.map(\n          ({ coords, tilesBPixelData }) => textureManagerB.addTile(coords, tilesBPixelData),\n        );\n\n        chunk.forEach(({ canvasCoords }, index) => {\n          const fboTile = regl.framebuffer({\n            width: tileSize,\n            height: tileSize,\n            depth: false,\n            colorFormat: \"rgba\",\n            colorType: \"uint8\",\n          });\n\n          let resultEncodedPixelsTile = new Uint8Array(tileSize * tileSize * 4);\n\n          this.calcTileDiff({\n            canvasSize: [tileSize, tileSize],\n            canvasCoordinates: [0, 0],\n            textureA: textureManagerA.texture,\n            textureB: textureManagerB.texture,\n            textureBoundsA: tilesABounds[index],\n            textureBoundsB: tilesBBounds[index],\n            fbo:fboTile,\n          });\n\n          this.drawTileResult({\n            scaleLength: this.scaleInput.length,\n            sentinelLength: this.sentinelInput.length,\n            scaleColormap: this.scaleColormap,\n            sentinelColormap: this.sentinelColormap,\n            canvasSize,\n            canvasCoordinates: canvasCoords,\n            texture: fboTile,\n          });\n\n          fboTile.use(() => {\n            // Get encoded floatValues to use for mouseEvents\n            regl.read({data: resultEncodedPixelsTile});\n          });\n          resultEncodedPixelsTile = this.flipReadPixelsUint(tileSize, tileSize, resultEncodedPixelsTile);\n          // Add tile result to array\n          resultEncodedPixels[tileIndex] = resultEncodedPixelsTile;\n          tileIndex += 1;\n\n          fboTile.destroy();\n        });\n      }\n\n      // Invoke the callback with the canvas coordinates of the rendered tiles.\n      onFrameRendered(canvasCoordinates);\n    };\n\n    renderFrame();\n\n    // clean up TextureManagers\n    this.textureManagerA.destroy();\n    this.textureManagerB.destroy();\n    this.textureManagerA = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerB = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n\n    return resultEncodedPixels;\n  }\n\n  renderTilesWithMultiAnalyze1(\n    tilesA: TileDatum[],\n    filterLowA : number,\n    filterHighA : number,\n    multiplierA: number,\n    onFrameRendered: (canvasCoordinates: Array<Pair<number>>) => void,\n  ) {\n    const {\n      regl,\n      textureManagerA,\n      tileSize,\n    } = this;\n\n    // Compute required canvas dimensions, then resize the canvas.\n    const canvasSize = this.computeRequiredCanvasDimensions(tilesA.length);\n    const [canvasWidth, canvasHeight] = canvasSize;\n    this.setCanvasSize(canvasWidth, canvasHeight);\n\n    // Compute the coordinates at which each tile will be rendered in the canvas.\n    const canvasCoordinates = this.getCanvasCoordinates(canvasWidth, canvasHeight, tilesA.length);\n\n    interface TilesWithCanvasCoords {\n      canvasCoords: Pair<number>;\n      coords: TileCoordinates;\n      tilesAPixelData: Uint8Array;\n    }\n\n    // Form an array combining each tile datum with the coordinates at which it will be rendered.\n    const tilesWithCanvasCoordinates = zipWith<TileDatum | Pair<number>, TilesWithCanvasCoords>(\n      tilesA,\n      canvasCoordinates,\n      (tilesA: TileDatum, canvasCoords: Pair<number>) => ({\n        coords: tilesA.coords,\n        tilesAPixelData: tilesA.pixelData,\n        canvasCoords,\n      })\n    );\n\n    const resultEncodedPixels: Uint8Array[] = [];\n\n    const renderFrame = () => {\n      // Split the tiles array into chunks the size of the texture capacity. If we need to render more\n      // tiles than will fit in the texture, we have to render in batches.\n      const chunks = chunk(tilesWithCanvasCoordinates, textureManagerA.tileCapacity);\n\n      // Clear the canvas.\n      regl.clear({ color: CLEAR_COLOR });\n\n      let tileIndex = 0;\n\n      // Render chunk by chunk.\n      for (const chunk of chunks) {\n        // Add tiles.\n        const tilesABounds = chunk.map(\n          ({ coords, tilesAPixelData }) => textureManagerA.addTile(coords, tilesAPixelData),\n        );\n\n        chunk.forEach(({ canvasCoords }, index) => {\n          const fboTile = regl.framebuffer({\n            width: tileSize,\n            height: tileSize,\n            depth: false,\n            colorFormat: \"rgba\",\n            colorType: \"uint8\",\n          });\n\n          let resultEncodedPixelsTile = new Uint8Array(tileSize * tileSize * 4);\n\n          this.calcTileMultiAnalyze1({\n            canvasSize: [tileSize, tileSize],\n            canvasCoordinates: [0, 0],\n            textureA: textureManagerA.texture,\n            textureBoundsA: tilesABounds[index],\n            filterLowA: filterLowA,\n            filterHighA: filterHighA,\n            multiplierA: multiplierA,\n            fbo:fboTile,\n          });\n\n          this.drawTileResult({\n            scaleLength: this.scaleInput.length,\n            sentinelLength: this.sentinelInput.length,\n            scaleColormap: this.scaleColormap,\n            sentinelColormap: this.sentinelColormap,\n            canvasSize,\n            canvasCoordinates: canvasCoords,\n            texture: fboTile,\n          });\n\n          fboTile.use(() => {\n            // Get encoded floatValues to use for mouseEvents\n            regl.read({data: resultEncodedPixelsTile});\n          });\n          resultEncodedPixelsTile = this.flipReadPixelsUint(tileSize, tileSize, resultEncodedPixelsTile);\n          // Add tile result to array\n          resultEncodedPixels[tileIndex] = resultEncodedPixelsTile;\n          tileIndex += 1;\n          fboTile.destroy();\n        });\n      }\n\n      // Invoke the callback with the canvas coordinates of the rendered tiles.\n      onFrameRendered(canvasCoordinates);\n    };\n\n    renderFrame();\n\n    // clean up TextureManagers\n    this.textureManagerA.destroy();\n    this.textureManagerA = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n\n    return resultEncodedPixels;\n  }\n\n  renderTilesWithMultiAnalyze2(\n    tilesA: TileDatum[],\n    tilesB: TileDatum[],\n    filterLowA: number,\n    filterHighA: number,\n    filterLowB: number,\n    filterHighB: number,\n    multiplierA: number,\n    multiplierB: number,\n    onFrameRendered: (canvasCoordinates: Array<Pair<number>>) => void,\n  ) {\n    const {\n      regl,\n      textureManagerA,\n      textureManagerB,\n      tileSize,\n    } = this;\n\n    // Compute required canvas dimensions, then resize the canvas.\n    const canvasSize = this.computeRequiredCanvasDimensions(tilesA.length);\n    const [canvasWidth, canvasHeight] = canvasSize;\n    this.setCanvasSize(canvasWidth, canvasHeight);\n\n    // Compute the coordinates at which each tile will be rendered in the canvas.\n    const canvasCoordinates = this.getCanvasCoordinates(canvasWidth, canvasHeight, tilesA.length);\n\n    interface TilesWithCanvasCoords {\n      canvasCoords: Pair<number>;\n      coords: TileCoordinates;\n      tilesAPixelData: Uint8Array;\n      tilesBPixelData: Uint8Array;\n    }\n\n    // Form an array combining each tile datum with the coordinates at which it will be rendered.\n    const tilesWithCanvasCoordinates = zipWith<TileDatum | Pair<number>, TilesWithCanvasCoords>(\n      tilesA,\n      tilesB,\n      canvasCoordinates,\n      (tilesA: TileDatum, tilesB: TileDatum, canvasCoords: Pair<number>) => ({\n        coords: tilesA.coords,\n        tilesAPixelData: tilesA.pixelData,\n        tilesBPixelData: tilesB.pixelData,\n        canvasCoords,\n      })\n    );\n\n    const resultEncodedPixels: Uint8Array[] = [];\n\n    const renderFrame = () => {\n      // Split the tiles array into chunks the size of the texture capacity. If we need to render more\n      // tiles than will fit in the texture, we have to render in batches.\n      const chunks = chunk(tilesWithCanvasCoordinates, textureManagerA.tileCapacity);\n\n      // Clear the canvas.\n      regl.clear({ color: CLEAR_COLOR });\n\n      let tileIndex = 0;\n\n      // Render chunk by chunk.\n      for (const chunk of chunks) {\n        // Add tiles.\n        const tilesABounds = chunk.map(\n          ({ coords, tilesAPixelData }) => textureManagerA.addTile(coords, tilesAPixelData),\n        );\n        const tilesBBounds = chunk.map(\n          ({ coords, tilesBPixelData }) => textureManagerB.addTile(coords, tilesBPixelData),\n        );\n\n        chunk.forEach(({ canvasCoords }, index) => {\n          const fboTile = regl.framebuffer({\n            width: tileSize,\n            height: tileSize,\n            depth: false,\n            colorFormat: \"rgba\",\n            colorType: \"uint8\",\n          });\n\n          let resultEncodedPixelsTile = new Uint8Array(tileSize * tileSize * 4);\n\n          this.calcTileMultiAnalyze2({\n            canvasSize: [tileSize, tileSize],\n            canvasCoordinates: [0, 0],\n            textureA: textureManagerA.texture,\n            textureB: textureManagerB.texture,\n            textureBoundsA: tilesABounds[index],\n            textureBoundsB: tilesBBounds[index],\n            filterLowA: filterLowA,\n            filterHighA: filterHighA,\n            filterLowB: filterLowB,\n            filterHighB: filterHighB,\n            multiplierA: multiplierA,\n            multiplierB: multiplierB,\n            fbo:fboTile,\n          });\n\n          this.drawTileResult({\n            scaleLength: this.scaleInput.length,\n            sentinelLength: this.sentinelInput.length,\n            scaleColormap: this.scaleColormap,\n            sentinelColormap: this.sentinelColormap,\n            canvasSize,\n            canvasCoordinates: canvasCoords,\n            texture: fboTile,\n          });\n\n          fboTile.use(() => {\n            // Get encoded floatValues to use for mouseEvents\n            regl.read({data: resultEncodedPixelsTile});\n          });\n          resultEncodedPixelsTile = this.flipReadPixelsUint(tileSize, tileSize, resultEncodedPixelsTile);\n          // Add tile result to array\n          resultEncodedPixels[tileIndex] = resultEncodedPixelsTile;\n          tileIndex += 1;\n          fboTile.destroy();\n        });\n      }\n\n      // Invoke the callback with the canvas coordinates of the rendered tiles.\n      onFrameRendered(canvasCoordinates);\n    };\n\n    renderFrame();\n\n    // clean up TextureManagers\n    this.textureManagerA.destroy();\n    this.textureManagerB.destroy();\n    this.textureManagerA = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerB = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n\n    return resultEncodedPixels;\n  }\n\n  renderTilesWithMultiAnalyze3(\n    tilesA: TileDatum[],\n    tilesB: TileDatum[],\n    tilesC: TileDatum[],\n    filterLowA: number,\n    filterHighA: number,\n    filterLowB: number,\n    filterHighB: number,\n    filterLowC: number,\n    filterHighC: number,\n    multiplierA: number,\n    multiplierB: number,\n    multiplierC: number,\n    onFrameRendered: (canvasCoordinates: Array<Pair<number>>) => void,\n  ) {\n    const {\n      regl,\n      textureManagerA,\n      textureManagerB,\n      textureManagerC,\n      tileSize,\n    } = this;\n\n    // Compute required canvas dimensions, then resize the canvas.\n    const canvasSize = this.computeRequiredCanvasDimensions(tilesA.length);\n    const [canvasWidth, canvasHeight] = canvasSize;\n    this.setCanvasSize(canvasWidth, canvasHeight);\n\n    // Compute the coordinates at which each tile will be rendered in the canvas.\n    const canvasCoordinates = this.getCanvasCoordinates(canvasWidth, canvasHeight, tilesA.length);\n\n    interface TilesWithCanvasCoords {\n      canvasCoords: Pair<number>;\n      coords: TileCoordinates;\n      tilesAPixelData: Uint8Array;\n      tilesBPixelData: Uint8Array;\n      tilesCPixelData: Uint8Array;\n    }\n\n    // Form an array combining each tile datum with the coordinates at which it will be rendered.\n    const tilesWithCanvasCoordinates = zipWith<TileDatum | Pair<number>, TilesWithCanvasCoords>(\n      tilesA,\n      tilesB,\n      tilesC,\n      canvasCoordinates,\n      (tilesA: TileDatum, tilesB: TileDatum, tilesC: TileDatum, canvasCoords: Pair<number>) => ({\n        coords: tilesA.coords,\n        tilesAPixelData: tilesA.pixelData,\n        tilesBPixelData: tilesB.pixelData,\n        tilesCPixelData: tilesC.pixelData,\n        canvasCoords,\n      })\n    );\n\n    const resultEncodedPixels: Uint8Array[] = [];\n\n    const renderFrame = () => {\n      // Split the tiles array into chunks the size of the texture capacity. If we need to render more\n      // tiles than will fit in the texture, we have to render in batches.\n      const chunks = chunk(tilesWithCanvasCoordinates, textureManagerA.tileCapacity);\n\n      // Clear the canvas.\n      regl.clear({ color: CLEAR_COLOR });\n\n      let tileIndex = 0;\n\n      // Render chunk by chunk.\n      for (const chunk of chunks) {\n        // Add tiles.\n        const tilesABounds = chunk.map(\n          ({ coords, tilesAPixelData }) => textureManagerA.addTile(coords, tilesAPixelData),\n        );\n        const tilesBBounds = chunk.map(\n          ({ coords, tilesBPixelData }) => textureManagerB.addTile(coords, tilesBPixelData),\n        );\n        const tilesCBounds = chunk.map(\n          ({ coords, tilesCPixelData }) => textureManagerC.addTile(coords, tilesCPixelData),\n        );\n\n        chunk.forEach(({ canvasCoords }, index) => {\n          const fboTile = regl.framebuffer({\n            width: tileSize,\n            height: tileSize,\n            depth: false,\n            colorFormat: \"rgba\",\n            colorType: \"uint8\",\n          });\n\n          let resultEncodedPixelsTile = new Uint8Array(tileSize * tileSize * 4);\n\n          this.calcTileMultiAnalyze3({\n            canvasSize: [tileSize, tileSize],\n            canvasCoordinates: [0, 0],\n            textureA: textureManagerA.texture,\n            textureB: textureManagerB.texture,\n            textureC: textureManagerC.texture,\n            textureBoundsA: tilesABounds[index],\n            textureBoundsB: tilesBBounds[index],\n            textureBoundsC: tilesCBounds[index],\n            filterLowA: filterLowA,\n            filterHighA: filterHighA,\n            filterLowB: filterLowB,\n            filterHighB: filterHighB,\n            filterLowC: filterLowC,\n            filterHighC: filterHighC,\n            multiplierA: multiplierA,\n            multiplierB: multiplierB,\n            multiplierC: multiplierC,\n            fbo:fboTile,\n          });\n\n          this.drawTileResult({\n            scaleLength: this.scaleInput.length,\n            sentinelLength: this.sentinelInput.length,\n            scaleColormap: this.scaleColormap,\n            sentinelColormap: this.sentinelColormap,\n            canvasSize,\n            canvasCoordinates: canvasCoords,\n            texture: fboTile,\n          });\n\n          fboTile.use(() => {\n            // Get encoded floatValues to use for mouseEvents\n            regl.read({data: resultEncodedPixelsTile});\n          });\n          resultEncodedPixelsTile = this.flipReadPixelsUint(tileSize, tileSize, resultEncodedPixelsTile);\n          // Add tile result to array\n          resultEncodedPixels[tileIndex] = resultEncodedPixelsTile;\n          tileIndex += 1;\n          fboTile.destroy();\n        });\n      }\n\n      // Invoke the callback with the canvas coordinates of the rendered tiles.\n      onFrameRendered(canvasCoordinates);\n    };\n\n    renderFrame();\n\n    // clean up TextureManagers\n    this.textureManagerA.destroy();\n    this.textureManagerB.destroy();\n    this.textureManagerC.destroy();\n    this.textureManagerA = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerB = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerC = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n\n    return resultEncodedPixels;\n  }\n\n  renderTilesWithMultiAnalyze4(\n    tilesA: TileDatum[],\n    tilesB: TileDatum[],\n    tilesC: TileDatum[],\n    tilesD: TileDatum[],\n    filterLowA: number,\n    filterHighA: number,\n    filterLowB: number,\n    filterHighB: number,\n    filterLowC: number,\n    filterHighC: number,\n    filterLowD: number,\n    filterHighD: number,\n    multiplierA: number,\n    multiplierB: number,\n    multiplierC: number,\n    multiplierD: number,\n    onFrameRendered: (canvasCoordinates: Array<Pair<number>>) => void,\n  ) {\n    const {\n      regl,\n      textureManagerA,\n      textureManagerB,\n      textureManagerC,\n      textureManagerD,\n      tileSize,\n    } = this;\n\n    // Compute required canvas dimensions, then resize the canvas.\n    const canvasSize = this.computeRequiredCanvasDimensions(tilesA.length);\n    const [canvasWidth, canvasHeight] = canvasSize;\n    this.setCanvasSize(canvasWidth, canvasHeight);\n\n    // Compute the coordinates at which each tile will be rendered in the canvas.\n    const canvasCoordinates = this.getCanvasCoordinates(canvasWidth, canvasHeight, tilesA.length);\n\n    interface TilesWithCanvasCoords {\n      canvasCoords: Pair<number>;\n      coords: TileCoordinates;\n      tilesAPixelData: Uint8Array;\n      tilesBPixelData: Uint8Array;\n      tilesCPixelData: Uint8Array;\n      tilesDPixelData: Uint8Array;\n    }\n\n    // Form an array combining each tile datum with the coordinates at which it will be rendered.\n    const tilesWithCanvasCoordinates = zipWith<TileDatum | Pair<number>, TilesWithCanvasCoords>(\n      tilesA,\n      tilesB,\n      tilesC,\n      tilesD,\n      canvasCoordinates,\n      (tilesA: TileDatum, tilesB: TileDatum, tilesC: TileDatum, tilesD: TileDatum, canvasCoords: Pair<number>) => ({\n        coords: tilesA.coords,\n        tilesAPixelData: tilesA.pixelData,\n        tilesBPixelData: tilesB.pixelData,\n        tilesCPixelData: tilesC.pixelData,\n        tilesDPixelData: tilesD.pixelData,\n        canvasCoords,\n      })\n    );\n\n    const resultEncodedPixels: Uint8Array[] = [];\n\n    const renderFrame = () => {\n      // Split the tiles array into chunks the size of the texture capacity. If we need to render more\n      // tiles than will fit in the texture, we have to render in batches.\n      const chunks = chunk(tilesWithCanvasCoordinates, textureManagerA.tileCapacity);\n\n      // Clear the canvas.\n      regl.clear({ color: CLEAR_COLOR });\n\n      let tileIndex = 0;\n\n      // Render chunk by chunk.\n      for (const chunk of chunks) {\n        // Add tiles.\n        const tilesABounds = chunk.map(\n          ({ coords, tilesAPixelData }) => textureManagerA.addTile(coords, tilesAPixelData),\n        );\n        const tilesBBounds = chunk.map(\n          ({ coords, tilesBPixelData }) => textureManagerB.addTile(coords, tilesBPixelData),\n        );\n        const tilesCBounds = chunk.map(\n          ({ coords, tilesCPixelData }) => textureManagerC.addTile(coords, tilesCPixelData),\n        );\n        const tilesDBounds = chunk.map(\n          ({ coords, tilesDPixelData }) => textureManagerD.addTile(coords, tilesDPixelData),\n        );\n\n        chunk.forEach(({ canvasCoords }, index) => {\n          const fboTile = regl.framebuffer({\n            width: tileSize,\n            height: tileSize,\n            depth: false,\n            colorFormat: \"rgba\",\n            colorType: \"uint8\",\n          });\n\n          let resultEncodedPixelsTile = new Uint8Array(tileSize * tileSize * 4);\n\n          this.calcTileMultiAnalyze4({\n            canvasSize: [tileSize, tileSize],\n            canvasCoordinates: [0, 0],\n            textureA: textureManagerA.texture,\n            textureB: textureManagerB.texture,\n            textureC: textureManagerC.texture,\n            textureD: textureManagerD.texture,\n            textureBoundsA: tilesABounds[index],\n            textureBoundsB: tilesBBounds[index],\n            textureBoundsC: tilesCBounds[index],\n            textureBoundsD: tilesDBounds[index],\n            filterLowA: filterLowA,\n            filterHighA: filterHighA,\n            filterLowB: filterLowB,\n            filterHighB: filterHighB,\n            filterLowC: filterLowC,\n            filterHighC: filterHighC,\n            filterLowD: filterLowD,\n            filterHighD: filterHighD,\n            multiplierA: multiplierA,\n            multiplierB: multiplierB,\n            multiplierC: multiplierC,\n            multiplierD: multiplierD,\n            fbo:fboTile,\n          });\n\n          this.drawTileResult({\n            scaleLength: this.scaleInput.length,\n            sentinelLength: this.sentinelInput.length,\n            scaleColormap: this.scaleColormap,\n            sentinelColormap: this.sentinelColormap,\n            canvasSize,\n            canvasCoordinates: canvasCoords,\n            texture: fboTile,\n          });\n\n          fboTile.use(() => {\n            // Get encoded floatValues to use for mouseEvents\n            regl.read({data: resultEncodedPixelsTile});\n          });\n          resultEncodedPixelsTile = this.flipReadPixelsUint(tileSize, tileSize, resultEncodedPixelsTile);\n          // Add tile result to array\n          resultEncodedPixels[tileIndex] = resultEncodedPixelsTile;\n          tileIndex += 1;\n          fboTile.destroy();\n        });\n      }\n\n      // Invoke the callback with the canvas coordinates of the rendered tiles.\n      onFrameRendered(canvasCoordinates);\n    };\n\n    renderFrame();\n\n    // clean up TextureManagers\n    this.textureManagerA.destroy();\n    this.textureManagerB.destroy();\n    this.textureManagerC.destroy();\n    this.textureManagerD.destroy();\n    this.textureManagerA = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerB = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerC = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerD = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n\n    return resultEncodedPixels;\n  }\n\n  renderTilesWithMultiAnalyze5(\n    tilesA: TileDatum[],\n    tilesB: TileDatum[],\n    tilesC: TileDatum[],\n    tilesD: TileDatum[],\n    tilesE: TileDatum[],\n    filterLowA: number,\n    filterHighA: number,\n    filterLowB: number,\n    filterHighB: number,\n    filterLowC: number,\n    filterHighC: number,\n    filterLowD: number,\n    filterHighD: number,\n    filterLowE: number,\n    filterHighE: number,\n    multiplierA: number,\n    multiplierB: number,\n    multiplierC: number,\n    multiplierD: number,\n    multiplierE: number,\n    onFrameRendered: (canvasCoordinates: Array<Pair<number>>) => void,\n  ) {\n    const {\n      regl,\n      textureManagerA,\n      textureManagerB,\n      textureManagerC,\n      textureManagerD,\n      textureManagerE,\n      tileSize,\n    } = this;\n\n    // Compute required canvas dimensions, then resize the canvas.\n    const canvasSize = this.computeRequiredCanvasDimensions(tilesA.length);\n    const [canvasWidth, canvasHeight] = canvasSize;\n    this.setCanvasSize(canvasWidth, canvasHeight);\n\n    // Compute the coordinates at which each tile will be rendered in the canvas.\n    const canvasCoordinates = this.getCanvasCoordinates(canvasWidth, canvasHeight, tilesA.length);\n\n    interface TilesWithCanvasCoords {\n      canvasCoords: Pair<number>;\n      coords: TileCoordinates;\n      tilesAPixelData: Uint8Array;\n      tilesBPixelData: Uint8Array;\n      tilesCPixelData: Uint8Array;\n      tilesDPixelData: Uint8Array;\n      tilesEPixelData: Uint8Array;\n    }\n\n    // Form an array combining each tile datum with the coordinates at which it will be rendered.\n    const tilesWithCanvasCoordinates = zipWith<TileDatum | Pair<number>, TilesWithCanvasCoords>(\n      tilesA,\n      tilesB,\n      tilesC,\n      tilesD,\n      tilesE,\n      canvasCoordinates,\n      (tilesA: TileDatum, tilesB: TileDatum, tilesC: TileDatum, tilesD: TileDatum, tilesE: TileDatum, canvasCoords: Pair<number>) => ({\n        coords: tilesA.coords,\n        tilesAPixelData: tilesA.pixelData,\n        tilesBPixelData: tilesB.pixelData,\n        tilesCPixelData: tilesC.pixelData,\n        tilesDPixelData: tilesD.pixelData,\n        tilesEPixelData: tilesE.pixelData,\n        canvasCoords,\n      })\n    );\n\n    const resultEncodedPixels: Uint8Array[] = [];\n\n    const renderFrame = () => {\n      // Split the tiles array into chunks the size of the texture capacity. If we need to render more\n      // tiles than will fit in the texture, we have to render in batches.\n      const chunks = chunk(tilesWithCanvasCoordinates, textureManagerA.tileCapacity);\n\n      // Clear the canvas.\n      regl.clear({ color: CLEAR_COLOR });\n\n      let tileIndex = 0;\n\n      // Render chunk by chunk.\n      for (const chunk of chunks) {\n        // Add tiles.\n        const tilesABounds = chunk.map(\n          ({ coords, tilesAPixelData }) => textureManagerA.addTile(coords, tilesAPixelData),\n        );\n        const tilesBBounds = chunk.map(\n          ({ coords, tilesBPixelData }) => textureManagerB.addTile(coords, tilesBPixelData),\n        );\n        const tilesCBounds = chunk.map(\n          ({ coords, tilesCPixelData }) => textureManagerC.addTile(coords, tilesCPixelData),\n        );\n        const tilesDBounds = chunk.map(\n          ({ coords, tilesDPixelData }) => textureManagerD.addTile(coords, tilesDPixelData),\n        );\n        const tilesEBounds = chunk.map(\n          ({ coords, tilesEPixelData }) => textureManagerE.addTile(coords, tilesEPixelData),\n        );\n\n        chunk.forEach(({ canvasCoords }, index) => {\n          const fboTile = regl.framebuffer({\n            width: tileSize,\n            height: tileSize,\n            depth: false,\n            colorFormat: \"rgba\",\n            colorType: \"uint8\",\n          });\n\n          let resultEncodedPixelsTile = new Uint8Array(tileSize * tileSize * 4);\n\n          this.calcTileMultiAnalyze5({\n            canvasSize: [tileSize, tileSize],\n            canvasCoordinates: [0, 0],\n            textureA: textureManagerA.texture,\n            textureB: textureManagerB.texture,\n            textureC: textureManagerC.texture,\n            textureD: textureManagerD.texture,\n            textureE: textureManagerE.texture,\n            textureBoundsA: tilesABounds[index],\n            textureBoundsB: tilesBBounds[index],\n            textureBoundsC: tilesCBounds[index],\n            textureBoundsD: tilesDBounds[index],\n            textureBoundsE: tilesEBounds[index],\n            filterLowA: filterLowA,\n            filterHighA: filterHighA,\n            filterLowB: filterLowB,\n            filterHighB: filterHighB,\n            filterLowC: filterLowC,\n            filterHighC: filterHighC,\n            filterLowD: filterLowD,\n            filterHighD: filterHighD,\n            filterLowE: filterLowE,\n            filterHighE: filterHighE,\n            multiplierA: multiplierA,\n            multiplierB: multiplierB,\n            multiplierC: multiplierC,\n            multiplierD: multiplierD,\n            multiplierE: multiplierE,\n            fbo:fboTile,\n          });\n\n          this.drawTileResult({\n            scaleLength: this.scaleInput.length,\n            sentinelLength: this.sentinelInput.length,\n            scaleColormap: this.scaleColormap,\n            sentinelColormap: this.sentinelColormap,\n            canvasSize,\n            canvasCoordinates: canvasCoords,\n            texture: fboTile,\n          });\n\n          fboTile.use(() => {\n            // Get encoded floatValues to use for mouseEvents\n            regl.read({data: resultEncodedPixelsTile});\n          });\n          resultEncodedPixelsTile = this.flipReadPixelsUint(tileSize, tileSize, resultEncodedPixelsTile);\n          // Add tile result to array\n          resultEncodedPixels[tileIndex] = resultEncodedPixelsTile;\n          tileIndex += 1;\n          fboTile.destroy();\n        });\n      }\n\n      // Invoke the callback with the canvas coordinates of the rendered tiles.\n      onFrameRendered(canvasCoordinates);\n    };\n\n    renderFrame();\n\n    // clean up TextureManagers\n    this.textureManagerA.destroy();\n    this.textureManagerB.destroy();\n    this.textureManagerC.destroy();\n    this.textureManagerD.destroy();\n    this.textureManagerE.destroy();\n    this.textureManagerA = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerB = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerC = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerD = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerE = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n\n    return resultEncodedPixels;\n  }\n\n  renderTilesWithMultiAnalyze6(\n    tilesA: TileDatum[],\n    tilesB: TileDatum[],\n    tilesC: TileDatum[],\n    tilesD: TileDatum[],\n    tilesE: TileDatum[],\n    tilesF: TileDatum[],\n    filterLowA: number,\n    filterHighA: number,\n    filterLowB: number,\n    filterHighB: number,\n    filterLowC: number,\n    filterHighC: number,\n    filterLowD: number,\n    filterHighD: number,\n    filterLowE: number,\n    filterHighE: number,\n    filterLowF: number,\n    filterHighF: number,\n    multiplierA: number,\n    multiplierB: number,\n    multiplierC: number,\n    multiplierD: number,\n    multiplierE: number,\n    multiplierF: number,\n    onFrameRendered: (canvasCoordinates: Array<Pair<number>>) => void,\n  ) {\n    const {\n      regl,\n      textureManagerA,\n      textureManagerB,\n      textureManagerC,\n      textureManagerD,\n      textureManagerE,\n      textureManagerF,\n      tileSize,\n    } = this;\n\n    // Compute required canvas dimensions, then resize the canvas.\n    const canvasSize = this.computeRequiredCanvasDimensions(tilesA.length);\n    const [canvasWidth, canvasHeight] = canvasSize;\n    this.setCanvasSize(canvasWidth, canvasHeight);\n\n    // Compute the coordinates at which each tile will be rendered in the canvas.\n    const canvasCoordinates = this.getCanvasCoordinates(canvasWidth, canvasHeight, tilesA.length);\n\n    interface TilesWithCanvasCoords {\n      canvasCoords: Pair<number>;\n      coords: TileCoordinates;\n      tilesAPixelData: Uint8Array;\n      tilesBPixelData: Uint8Array;\n      tilesCPixelData: Uint8Array;\n      tilesDPixelData: Uint8Array;\n      tilesEPixelData: Uint8Array;\n      tilesFPixelData: Uint8Array;\n    }\n\n    // Form an array combining each tile datum with the coordinates at which it will be rendered.\n    const tilesWithCanvasCoordinates = zipWith<TileDatum | Pair<number>, TilesWithCanvasCoords>(\n      tilesA,\n      tilesB,\n      tilesC,\n      tilesD,\n      tilesE,\n      tilesF,\n      canvasCoordinates,\n      (tilesA: TileDatum, tilesB: TileDatum, tilesC: TileDatum, tilesD: TileDatum, tilesE: TileDatum, tilesF: TileDatum, canvasCoords: Pair<number>) => ({\n        coords: tilesA.coords,\n        tilesAPixelData: tilesA.pixelData,\n        tilesBPixelData: tilesB.pixelData,\n        tilesCPixelData: tilesC.pixelData,\n        tilesDPixelData: tilesD.pixelData,\n        tilesEPixelData: tilesE.pixelData,\n        tilesFPixelData: tilesF.pixelData,\n        canvasCoords,\n      }),\n    );\n\n    const resultEncodedPixels: Uint8Array[] = [];\n\n    const renderFrame = () => {\n      // Split the tiles array into chunks the size of the texture capacity. If we need to render more\n      // tiles than will fit in the texture, we have to render in batches.\n      const chunks = chunk(tilesWithCanvasCoordinates, textureManagerA.tileCapacity);\n\n      // Clear the canvas.\n      regl.clear({ color: CLEAR_COLOR });\n\n      let tileIndex = 0;\n\n      // Render chunk by chunk.\n      for (const chunk of chunks) {\n        // Add tiles.\n        const tilesABounds = chunk.map(\n          ({ coords, tilesAPixelData }) => textureManagerA.addTile(coords, tilesAPixelData),\n        );\n        const tilesBBounds = chunk.map(\n          ({ coords, tilesBPixelData }) => textureManagerB.addTile(coords, tilesBPixelData),\n        );\n        const tilesCBounds = chunk.map(\n          ({ coords, tilesCPixelData }) => textureManagerC.addTile(coords, tilesCPixelData),\n        );\n        const tilesDBounds = chunk.map(\n          ({ coords, tilesDPixelData }) => textureManagerD.addTile(coords, tilesDPixelData),\n        );\n        const tilesEBounds = chunk.map(\n          ({ coords, tilesEPixelData }) => textureManagerE.addTile(coords, tilesEPixelData),\n        );\n        const tilesFBounds = chunk.map(\n          ({ coords, tilesFPixelData }) => textureManagerF.addTile(coords, tilesFPixelData),\n        );\n\n        chunk.forEach(({ canvasCoords }, index) => {\n          const fboTile = regl.framebuffer({\n            width: tileSize,\n            height: tileSize,\n            depth: false,\n            colorFormat: \"rgba\",\n            colorType: \"uint8\",\n          });\n\n          let resultEncodedPixelsTile = new Uint8Array(tileSize * tileSize * 4);\n\n          this.calcTileMultiAnalyze6({\n            canvasSize: [tileSize, tileSize],\n            canvasCoordinates: [0, 0],\n            textureA: textureManagerA.texture,\n            textureB: textureManagerB.texture,\n            textureC: textureManagerC.texture,\n            textureD: textureManagerD.texture,\n            textureE: textureManagerE.texture,\n            textureF: textureManagerF.texture,\n            textureBoundsA: tilesABounds[index],\n            textureBoundsB: tilesBBounds[index],\n            textureBoundsC: tilesCBounds[index],\n            textureBoundsD: tilesDBounds[index],\n            textureBoundsE: tilesEBounds[index],\n            textureBoundsF: tilesFBounds[index],\n            filterLowA: filterLowA,\n            filterHighA: filterHighA,\n            filterLowB: filterLowB,\n            filterHighB: filterHighB,\n            filterLowC: filterLowC,\n            filterHighC: filterHighC,\n            filterLowD: filterLowD,\n            filterHighD: filterHighD,\n            filterLowE: filterLowE,\n            filterHighE: filterHighE,\n            filterLowF: filterLowF,\n            filterHighF: filterHighF,\n            multiplierA: multiplierA,\n            multiplierB: multiplierB,\n            multiplierC: multiplierC,\n            multiplierD: multiplierD,\n            multiplierE: multiplierE,\n            multiplierF: multiplierF,\n            fbo:fboTile,\n          });\n\n          this.drawTileResult({\n            scaleLength: this.scaleInput.length,\n            sentinelLength: this.sentinelInput.length,\n            scaleColormap: this.scaleColormap,\n            sentinelColormap: this.sentinelColormap,\n            canvasSize,\n            canvasCoordinates: canvasCoords,\n            texture: fboTile,\n          });\n\n          fboTile.use(() => {\n            // Get encoded floatValues to use for mouseEvents\n            regl.read({data: resultEncodedPixelsTile});\n          });\n          resultEncodedPixelsTile = this.flipReadPixelsUint(tileSize, tileSize, resultEncodedPixelsTile);\n          // Add tile result to array\n          resultEncodedPixels[tileIndex] = resultEncodedPixelsTile;\n          tileIndex += 1;\n          fboTile.destroy();\n        });\n      }\n\n      // Invoke the callback with the canvas coordinates of the rendered tiles.\n      onFrameRendered(canvasCoordinates);\n    };\n\n    renderFrame();\n\n    // clean up TextureManagers\n    this.textureManagerA.destroy();\n    this.textureManagerB.destroy();\n    this.textureManagerC.destroy();\n    this.textureManagerD.destroy();\n    this.textureManagerE.destroy();\n    this.textureManagerF.destroy();\n    this.textureManagerA = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerB = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerC = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerD = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerE = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerF = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n\n    return resultEncodedPixels;\n  }\n\n  async renderTilesWithTransition(\n    oldTiles: TileDatum[],\n    newTiles: TileDatum[],\n    transitionDurationMs: number,\n    onFrameRendered: (canvasCoordinates: Array<Pair<number>>) => void,\n  ) {\n    const {\n      regl,\n      textureManager,\n      tileSize,\n      normalTextureDimension,\n    } = this;\n\n    // Compute required canvas dimensions, then resize the canvas.\n    const canvasSize = this.computeRequiredCanvasDimensions(oldTiles.length);\n    const [canvasWidth, canvasHeight] = canvasSize;\n    this.setCanvasSize(canvasWidth, canvasHeight);\n\n    // Compute the coordinates at which each tile will be rendered in the canvas.\n    const canvasCoordinates = this.getCanvasCoordinates(canvasWidth, canvasHeight, oldTiles.length);\n\n    interface TilesWithCanvasCoords {\n      canvasCoords: Pair<number>;\n      coords: TileCoordinates;\n      oldPixelData: Uint8Array;\n      newPixelData: Uint8Array;\n    }\n\n    // Form an array combining each tile datum with the coordinates at which it will be rendered.\n    const tilesWithCanvasCoordinates = zipWith<TileDatum | Pair<number>, TilesWithCanvasCoords>(\n      oldTiles,\n      newTiles,\n      canvasCoordinates,\n      (oldTile: TileDatum, newTile: TileDatum, canvasCoords: Pair<number>) => ({\n        coords: oldTile.coords,\n        oldPixelData: oldTile.pixelData,\n        newPixelData: newTile.pixelData,\n        canvasCoords,\n      })\n    );\n\n    // Create a new TextureManager to hold the new data. After the transition, this will replace the\n    // Renderer's stored TextureManager.\n    const newTextureManager = new TextureManager(regl, tileSize, normalTextureDimension, false);\n\n    // Record the starting time.\n    const transitionStart = regl.now();\n\n    const renderFrame = (interpolationFraction: number) => {\n      // Split the tiles array into chunks the size of the texture capacity. If we need to render more\n      // tiles than will fit in the texture, we have to render in batches.\n      const chunks = chunk(tilesWithCanvasCoordinates, textureManager.tileCapacity);\n\n      // Clear the canvas.\n      regl.clear({ color: CLEAR_COLOR });\n\n      // Render chunk by chunk.\n      for (const chunk of chunks) {\n        // Add tiles.\n        const oldTextureBounds = chunk.map(\n          ({ coords, oldPixelData }) => textureManager.addTile(coords, oldPixelData),\n        );\n        const newTextureBounds = chunk.map(\n          ({ coords, newPixelData }) => newTextureManager.addTile(coords, newPixelData),\n        );\n\n        // Render each tile.\n        this.drawTileInterpolateValue(chunk.map(({ canvasCoords }, index) => ({\n          scaleLength: this.scaleInput.length,\n          sentinelLength: this.sentinelInput.length,\n          scaleColormap: this.scaleColormap,\n          sentinelColormap: this.sentinelColormap,\n          canvasSize,\n          canvasCoordinates: canvasCoords,\n          textureA: textureManager.texture,\n          textureB: newTextureManager.texture,\n          textureBoundsA: oldTextureBounds[index],\n          textureBoundsB: newTextureBounds[index],\n          interpolationFraction,\n        })));\n      }\n\n      // Invoke the callback with the canvas coordinates of the rendered tiles.\n      onFrameRendered(canvasCoordinates);\n    };\n\n    const animationHandle = regl.frame(({ time }) => {\n      const elapsedTimeMs = (time - transitionStart) * 1000;\n      const interpolationFraction = elapsedTimeMs / transitionDurationMs;\n      renderFrame(interpolationFraction);\n    });\n\n    await util.Timer(transitionDurationMs);\n    animationHandle.cancel();\n\n    // Render again, in case previous frames didn't make it all the way to interpolationFraction 1.0.\n    renderFrame(1);\n\n    // Clean up the old TextureManager and replace it with the new one.\n    this.textureManager.destroy();\n    this.textureManager = newTextureManager;\n  }\n\n  async renderTilesWithTransitionAndNewColorScale(\n    oldTiles: TileDatum[],\n    newTiles: TileDatum[],\n    transitionDurationMs: number,\n    onFrameRendered: (canvasCoordinates: Array<Pair<number>>) => void,\n  ) {\n    const {\n      regl,\n      textureManager,\n      tileSize,\n      normalTextureDimension,\n    } = this;\n\n    // Compute required canvas dimensions, then resize the canvas.\n    const canvasSize = this.computeRequiredCanvasDimensions(oldTiles.length);\n    const [canvasWidth, canvasHeight] = canvasSize;\n    this.setCanvasSize(canvasWidth, canvasHeight);\n\n    // Compute the coordinates at which each tile will be rendered in the canvas.\n    const canvasCoordinates = this.getCanvasCoordinates(canvasWidth, canvasHeight, oldTiles.length);\n\n    interface TilesWithCanvasCoords {\n      canvasCoords: Pair<number>;\n      coords: TileCoordinates;\n      oldPixelData: Uint8Array;\n      newPixelData: Uint8Array;\n    }\n\n    // Form an array combining each tile datum with the coordinates at which it will be rendered.\n    const tilesWithCanvasCoordinates = zipWith<TileDatum | Pair<number>, TilesWithCanvasCoords>(\n      oldTiles,\n      newTiles,\n      canvasCoordinates,\n      (oldTile: TileDatum, newTile: TileDatum, canvasCoords: Pair<number>) => ({\n        coords: oldTile.coords,\n        oldPixelData: oldTile.pixelData,\n        newPixelData: newTile.pixelData,\n        canvasCoords,\n      }),\n    );\n\n    // Create a new TextureManager to hold the new data. After the transition, this will replace the\n    // Renderer's stored TextureManager.\n    const newTextureManager = new TextureManager(regl, tileSize, normalTextureDimension, false);\n\n    // Record the starting time.\n    const transitionStart = regl.now();\n\n    const renderFrame = (interpolationFraction: number) => {\n      // Split the tiles array into chunks the size of the texture capacity. If we need to render more\n      // tiles than will fit in the texture, we have to render in batches.\n      const chunks = chunk(tilesWithCanvasCoordinates, textureManager.tileCapacity);\n\n      // Clear the canvas.\n      regl.clear({ color: CLEAR_COLOR });\n\n      // Render chunk by chunk.\n      for (const chunk of chunks) {\n        // Add tiles.\n        const oldTextureBounds = chunk.map(\n          ({ coords, oldPixelData }) => textureManager.addTile(coords, oldPixelData),\n        );\n        const newTextureBounds = chunk.map(\n          ({ coords, newPixelData }) => newTextureManager.addTile(coords, newPixelData),\n        );\n\n        // Render each tile.\n        this.drawTileInterpolateColor(\n          chunk.map(({ canvasCoords }, index) => ({\n            scaleLengthA: this.scaleInputPrevious.length,\n            sentinelLengthA: this.sentinelInputPrevious.length,\n            scaleColormapA: this.scaleColormapPrevious,\n            sentinelColormapA: this.sentinelColormapPrevious,\n            scaleLengthB: this.scaleInput.length,\n            sentinelLengthB: this.sentinelInput.length,\n            scaleColormapB: this.scaleColormap,\n            sentinelColormapB: this.sentinelColormap,\n            canvasSize,\n            canvasCoordinates: canvasCoords,\n            textureA: textureManager.texture,\n            textureB: newTextureManager.texture,\n            textureBoundsA: oldTextureBounds[index],\n            textureBoundsB: newTextureBounds[index],\n            interpolationFraction,\n          }))\n        );\n      }\n\n      // Invoke the callback with the canvas coordinates of the rendered tiles.\n      onFrameRendered(canvasCoordinates);\n    };\n\n    const animationHandle = regl.frame(({ time }) => {\n      const elapsedTimeMs = (time - transitionStart) * 1000;\n      const interpolationFraction = elapsedTimeMs / transitionDurationMs;\n      renderFrame(interpolationFraction);\n    });\n\n    await util.Timer(transitionDurationMs);\n    animationHandle.cancel();\n\n    // Render again, in case previous frames didn't make it all the way to interpolationFraction 1.0.\n    renderFrame(1);\n\n    // Clean up the old TextureManager and replace it with the new one.\n    this.textureManager.destroy();\n    this.textureManager = newTextureManager;\n  }\n\n  async renderTilesWithTransitionAndNewColorScaleOnly(\n    tiles: TileDatum[],\n    transitionDurationMs: number,\n    onFrameRendered: (canvasCoordinates: Array<Pair<number>>) => void,\n  ) {\n    const {\n      regl,\n      textureManager,\n      tileSize,\n      normalTextureDimension,\n    } = this;\n\n    // Compute required canvas dimensions, then resize the canvas.\n    const canvasSize = this.computeRequiredCanvasDimensions(tiles.length);\n    const [canvasWidth, canvasHeight] = canvasSize;\n    this.setCanvasSize(canvasWidth, canvasHeight);\n\n    // Compute the coordinates at which each tile will be rendered in the canvas.\n    const canvasCoordinates = this.getCanvasCoordinates(canvasWidth, canvasHeight, tiles.length);\n\n    type TileWithCanvasCoords = TileDatum & { canvasCoords: Pair<number> };\n\n    // Form an array combining each tile datum with the coordinates at which it will be rendered.\n    const tilesWithCanvasCoordinates = zipWith<TileDatum | Pair<number>, TileWithCanvasCoords>(\n      tiles,\n      canvasCoordinates,\n      (tile: TileDatum, canvasCoords: Pair<number>) => ({\n        ...tile,\n        canvasCoords,\n      })\n    );\n\n    // Create a new TextureManager to hold the new data. After the transition, this will replace the\n    // Renderer's stored TextureManager.\n    const newTextureManager = new TextureManager(regl, tileSize, normalTextureDimension, false);\n\n    // Record the starting time.\n    const transitionStart = regl.now();\n\n    const renderFrame = (interpolationFraction: number) => {\n      // Split the tiles array into chunks the size of the texture capacity. If we need to render more\n      // tiles than will fit in the texture, we have to render in batches.\n      const chunks = chunk(tilesWithCanvasCoordinates, textureManager.tileCapacity);\n\n      // Clear the canvas.\n      regl.clear({ color: CLEAR_COLOR });\n\n      // Render chunk by chunk.\n      for (const chunk of chunks) {\n        // Add tiles.\n        const textureBounds = chunk.map(\n          ({ coords, pixelData }) => textureManager.addTile(coords, pixelData),\n        );\n\n        // Render each tile.\n        this.drawTileInterpolateColorOnly(\n          chunk.map(({ canvasCoords }, index) => ({\n            scaleLengthA: this.scaleInputPrevious.length,\n            sentinelLengthA: this.sentinelInputPrevious.length,\n            scaleColormapA: this.scaleColormapPrevious,\n            sentinelColormapA: this.sentinelColormapPrevious,\n            scaleLengthB: this.scaleInput.length,\n            sentinelLengthB: this.sentinelInput.length,\n            scaleColormapB: this.scaleColormap,\n            sentinelColormapB: this.sentinelColormap,\n            canvasSize,\n            canvasCoordinates: canvasCoords,\n            texture: textureManager.texture,\n            textureBounds: textureBounds[index],\n            interpolationFraction,\n          }))\n        );\n      }\n\n      // Invoke the callback with the canvas coordinates of the rendered tiles.\n      onFrameRendered(canvasCoordinates);\n    };\n\n    const animationHandle = regl.frame(({ time }) => {\n      const elapsedTimeMs = (time - transitionStart) * 1000;\n      const interpolationFraction = elapsedTimeMs / transitionDurationMs;\n      renderFrame(interpolationFraction);\n    });\n\n    await util.Timer(transitionDurationMs);\n    animationHandle.cancel();\n\n    // Render again, in case previous frames didn't make it all the way to interpolationFraction 1.0.\n    renderFrame(1);\n\n    // Clean up the old TextureManager and replace it with the new one.\n    this.textureManager.destroy();\n    this.textureManager = newTextureManager;\n  }\n\n  generateSunDirections(iterations: number, sunRadiusMultiplier: number): void {\n    const sunDirections = [];\n    for (let i = 0; i < iterations; i++) {\n      const direction = vec3.normalize(\n        vec3.create(),\n        vec3.add(\n          vec3.create(),\n          vec3.scale(\n            vec3.create(),\n            vec3.normalize(vec3.create(), [1, 1, 1]),\n            EARTH_SUN_DISTANCE\n          ),\n          vec3.random(vec3.create(), SUN_RADIUS * sunRadiusMultiplier)\n        )\n      );\n      sunDirections.push(direction);\n    }\n    this.sunDirections = sunDirections;\n  }\n\n  generateAmbientDirections(iterations: number): void {\n    const ambientDirections = [];\n    for (let i = 0; i < iterations; i++) {\n      const direction = vec3.random(vec3.create(), Math.random());\n      ambientDirections.push(direction);\n    }\n    this.ambientDirections = ambientDirections;\n  }\n\n  removeTile(tileCoordinates: TileCoordinates): void {\n    this.textureManager.removeTile(tileCoordinates);\n  }\n\n  protected setCanvasSize(width: number, height: number): void {\n    Object.assign(this.canvas, { width, height });\n  }\n\n  protected computeRequiredCanvasDimensions(numTiles: number): Pair<number> {\n    const { tileSize } = this;\n    const tilesAcross = Math.ceil(Math.sqrt(numTiles));\n    const tilesDown = Math.ceil(numTiles / tilesAcross);\n    return [tilesAcross * tileSize, tilesDown * tileSize];\n  }\n\n  protected getCanvasCoordinates(canvasWidth: number, canvasHeight: number, numTiles: number): Array<Pair<number>> {\n    const { tileSize } = this;\n    return flatMap(util.range(0, canvasHeight, tileSize), y =>\n      util.range(0, canvasWidth, tileSize).map(x => [x, y] as Pair<number>),\n    ).slice(0, numTiles);\n  }\n}\n","import * as L from 'leaflet';\nimport {\n  isUndefined,\n  mapValues,\n  noop,\n  pickBy,\n  values,\n  zipWith,\n} from 'lodash-es';\nimport { ContourMultiPolygon, contours } from 'd3-contour';\nimport * as util from './util';\nimport { select, selectAll } from \"d3-selection\";\nimport { scaleLinear } from \"d3-scale\";\nimport { geoPath } from \"d3-geo\";\nimport { json } from \"d3-request\";\nimport { min, max, scan, range } from \"d3-array\";\nimport { interpolateHcl } from \"d3-interpolate\";\nconst d3 = {\n  select,\n  selectAll,\n  scaleLinear,\n  geoPath,\n  contours,\n  interpolateHcl,\n  json,\n  min,\n  max,\n  scan,\n  range,\n};\n\nimport './index.css';\n\nimport Renderer from './Renderer';\nimport {\n  GridLayerTile,\n  Pair,\n  PreloadTileCache,\n  TileCache,\n  TileCoordinates,\n  TileDatum,\n  TileElement,\n  TileEvent,\n  PixelValues,\n  HillshadeOptions,\n  ActiveTilesBounds,\n  Color,\n  SentinelValue,\n  ContourLabel,\n  ContourData,\n  Dictionary,\n} from './types';\n\nimport { EARTH_CIRCUMFERENCE } from './constants';\n\n/**\n * Augment Leaflet GridLayer definition to include some helpful \"private\" properties.\n *\n * Unfortunately, using properties that aren't part of GridLayer's public API makes this component\n * brittle. If GridLayer's implementation changes significantly, it could break this component.\n * I don't see a way around this limitation, however, without reimplementing much of GridLayer.\n */\ndeclare module 'leaflet' {\n  interface GridLayer {\n    _globalTileRange: L.Bounds;\n    _getTilePos(coords: L.Point): L.Point;\n    _keyToTileCoords(key: string): L.Point;\n    _pruneTiles(): void;\n    _removeAllTiles(): void;\n    _update(): void;\n    _level: Dictionary<any>;\n  }\n}\n\nconst BYTES_PER_WORD = 4; // four bytes in a 32-bit float\nconst littleEndian = util.machineIsLittleEndian();\n\nexport interface MouseEvent extends L.LeafletMouseEvent {\n  pixelValues?: PixelValues;\n}\n\ninterface EventsObject {\n  [name: string]: (event: L.LeafletEvent) => void;\n}\n\nexport interface Options extends L.GridLayerOptions {\n  url: string;\n  tileFormat: string;\n  nodataValue: number;\n  colorScale?: Color[];\n  sentinelValues?: SentinelValue[];\n  extraPixelLayers?: number;\n  colorscaleMaxLength?: number,\n  sentinelMaxLength?: number,\n  preloadUrl?: string;\n  glOperation?: string;\n  multiLayers?: number;\n  operationUrlA?: string;\n  operationUrlB?: string;\n  operationUrlC?: string;\n  operationUrlD?: string;\n  operationUrlE?: string;\n  operationUrlF?: string;\n  filterLowA?: number;\n  filterHighA?: number;\n  filterLowB?: number;\n  filterHighB?: number;\n  filterLowC?: number;\n  filterHighC?: number;\n  filterLowD?: number;\n  filterHighD?: number;\n  filterLowE?: number;\n  filterHighE?: number;\n  filterLowF?: number;\n  filterHighF?: number;\n  multiplierA?: number;\n  multiplierB?: number;\n  multiplierC?: number;\n  multiplierD?: number;\n  multiplierE?: number;\n  multiplierF?: number;\n  transitions?: boolean;\n  transitionTimeMs?: number;\n  debug: boolean;\n\n  // Hillshading\n  hillshadeType: string;\n  hsAdvValueScale?: number | Dictionary<number>;\n  hsSimpleZoomdelta?: number;\n  hsSimpleSlopescale?: number;\n  hsSimpleAzimuth?: number;\n  hsSimpleAltitude?: number;\n  hsAdvPixelScale?: number | string;\n  hsAdvSoftIterations?: number;\n  hsAdvAmbientIterations?: number;\n  hsAdvSunRadiusMultiplier?: number;\n  hsAdvFinalSoftMultiplier?: number;\n  hsAdvFinalAmbientMultiplier?: number;\n  hsAdvBaselayerUrl?: string;\n  hsAdvSmoothInput: boolean;\n  hsAdvSmoothInputKernel: number;\n  hsPregenUrl?: string;\n  _hillshadeOptions?: HillshadeOptions;\n\n  // Contours\n  contourPane?: HTMLElement;\n  contourCanvas?: HTMLCanvasElement;\n  contourType?: string;\n  contourSmoothLines: boolean;\n  contourSmoothInput: boolean;\n  contourSmoothInputKernel: number;\n  contourScaleFactor: number;\n  contourInterval: number;\n  contourIndexInterval: number;\n  contourLineColor: string;\n  contourLineWeight: number; // px\n  contourLineIndexWeight: number; // px\n  contourIndexLabels: boolean;\n  contourLabelFont: string;\n  contourLabelDistance: number;\n  contourIlluminatedHighlightColor: string;\n  contourIlluminatedShadowColor: string;\n  contourIlluminatedShadowSize: number; // px\n  contourHypso: boolean;\n  contourHypsoDomain: number[];\n  contourHypsoColors: string[];\n  contourBathy: boolean;\n  contourBathyDomain: number[];\n  contourBathyColors: string[];\n  contourBathyShadowColor: string[];\n  contourBathyHighlightColor: string[];\n\n  // handler for the 'load' event, fired when all tiles loaded.\n  onload?: (event: { url: string }) => void;\n\n  // mouse event handlers\n  onclick?: (event: MouseEvent) => void;\n  ondblclick?: (event: MouseEvent) => void;\n  onmousedown?: (event: MouseEvent) => void;\n  onmouseup?: (event: MouseEvent) => void;\n  onmouseover?: (event: MouseEvent) => void;\n  onmouseout?: (event: MouseEvent) => void;\n  onmousemove?: (event: MouseEvent) => void;\n  oncontextmenu?: (event: MouseEvent) => void;\n\n  // from TileLayerOptions\n  minZoom?: number;\n  maxZoom?: number;\n  subdomains?: string | string[];\n  maxNativeZoom?: number;\n  minNativeZoom?: number;\n  errorTileUrl?: string;\n  zoomOffset?: number;\n  tms?: boolean;\n  zoomReverse?: boolean;\n  detectRetina?: boolean;\n  crossOrigin?: boolean;\n}\n\nconst defaultOptions = {\n  tileFormat: 'float32',\n  colorScale: [],\n  sentinelValues: [],\n  transitions: false,\n  transitionTimeMs: 800,\n  debug: false,\n  extraPixelLayers: 0,\n  colorscaleMaxLength: 16,\n  sentinelMaxLength: 16,\n\n  // default TileLayer options\n  minZoom: 0,\n  maxZoom: 18,\n  subdomains: 'abc',\n  errorTileUrl: '',\n  zoomOffset: 0,\n  tms: false,\n  zoomReverse: false,\n  detectRetina: false,\n  crossOrigin: false,\n\n  // multi-analyze default options\n  glOperation: 'none',\n  multiLayers: 0,\n  operationUrlA: '',\n  operationUrlB: '',\n  operationUrlC: '',\n  operationUrlD: '',\n  operationUrlE: '',\n  operationUrlF: '',\n  filterLowA: 0,\n  filterHighA: 100000,\n  filterLowB: 0,\n  filterHighB: 100000,\n  filterLowC: 0,\n  filterHighC: 100000,\n  filterLowD: 0,\n  filterHighD: 100000,\n  filterLowE: 0,\n  filterHighE: 100000,\n  filterLowF: 0,\n  filterHighF: 100000,\n  multiplierA: 1,\n  multiplierB: 1,\n  multiplierC: 1,\n  multiplierD: 1,\n  multiplierE: 1,\n  multiplierF: 1,\n\n  // Hillshading default options\n  hillshadeType: 'none', // none, simple or pregen\n  hsSimpleZoomdelta: 0,\n  hsSimpleSlopescale: 3.0,\n  hsSimpleAzimuth: 315,\n  hsSimpleAltitude: 70,\n  hsAdvValueScale: 1.0,\n  hsAdvPixelScale: 'auto',\n  hsAdvSoftIterations: 10,\n  hsAdvAmbientIterations: 10,\n  hsAdvSunRadiusMultiplier: 100,\n  hsAdvFinalSoftMultiplier: 1.0,\n  hsAdvFinalAmbientMultiplier: 0.25,\n  hsAdvBaselayerUrl: '',\n  hsAdvSmoothInput: false,\n  hsAdvSmoothInputKernel: 3,\n  hsPregenUrl: '',\n  _hillshadeOptions: { hillshadeType: 'none' },\n\n  // Contours default options\n  contourType: 'none', // none, lines or illuminated\n  contourSmoothLines: false,\n  contourSmoothInput: false,\n  contourSmoothInputKernel: 7,\n  contourScaleFactor: 1,\n  contourInterval: 25,\n  contourIndexInterval: 100,\n  contourLineColor: '#000000',\n  contourIlluminatedHighlightColor: 'rgba(177,174,164,.5)',\n  contourIlluminatedShadowColor: '#5b5143',\n  contourIlluminatedShadowSize: 2, // px\n  contourLineWeight: 0.5, // px\n  contourLineIndexWeight: 2.0, // px\n  contourIndexLabels: false,\n  contourLabelFont: '12px Arial',\n  contourLabelDistance: 250,\n  contourHypso: false,\n  contourHypsoDomain: [0, 1000, 2000],\n  contourHypsoColors: [\"#486341\", \"#e5d9c9\", \"#dddddd\"],\n  contourBathy: false,\n  contourBathyDomain: [-2000, 0],\n  contourBathyColors: [\"#315d9b\", \"#d5f2ff\"],\n  contourBathyShadowColor: '#4e5c66',\n  contourBathyHighlightColor: 'rgba(224, 242, 255, .5)',\n};\n\n/**\n * The options type used internally. Because submitted options are merged with defaults, fewer\n * properties have the potential to be `undefined` compared with `Options`.\n */\nexport type InternalOptions = Options & typeof defaultOptions;\n\nexport default class GLOperations extends L.GridLayer {\n  static readonly defaultOptions = defaultOptions;\n\n  options: InternalOptions;\n\n  protected _map: L.Map;\n  protected _renderer: Renderer;\n  protected _preloadTileCache?: PreloadTileCache;\n  // We need to define the `_tiles` cache with the same type as in the base class,\n  // though our `_tiles` property is actually of type `TileCache`\n  protected _tiles: L.InternalTiles;\n\n  protected _contourData: ContourData = {};\n  // protected _mergedTileArray: number[];\n\n  constructor(options: Options) {\n    // Merge options with defaults and invoke GridLayer's constructor,\n    // which sets the merged options as `this.options`.\n    super(Object.assign({}, defaultOptions, options));\n\n    this._checkColorScaleAndSentinels();\n    this.setHillshadeOptions();\n\n    const {\n      nodataValue,\n      preloadUrl,\n    } = this.options;\n\n    const tileSize: number = this._tileSizeAsNumber();\n    const renderer = new Renderer(\n      this,\n      tileSize,\n      nodataValue,\n      this.options.colorScale,\n      this.options.sentinelValues,\n      this.options.colorscaleMaxLength,\n      this.options.sentinelMaxLength\n    );\n\n    // Set instance properties.\n    Object.assign(this, {\n      _renderer: renderer,\n      _preloadTileCache: undefined,\n    });\n\n    this._maybePreload(preloadUrl);\n\n    // generate vec3 directions for advanced hillshading with default iterations\n    this._renderer.generateAmbientDirections(this.options.hsAdvAmbientIterations);\n    this._renderer.generateSunDirections(\n      this.options.hsAdvSoftIterations,\n      this.options.hsAdvSunRadiusMultiplier\n    );\n\n    // Listen for 'tileunload' event to remove the tile from the texture.\n    this.on(\"tileunload\", this._onTileRemove.bind(this));\n\n    // Listen for all visible tiles loaded. If using contours then run update\n    this.on(\"load\", (_) =>\n      setTimeout(() => {\n        this._maybeUpdateMergedArrayAndDrawContours();\n\n        // if hs==adv and more than 50% of textureManager capacity used, cleartiles.\n        // TODO: Find a better cache system for adv.hs.\n        if (\n          this.options.hillshadeType === 'advanced' &&\n          this._renderer.textureManager.available.length < this._renderer.textureManager.contents.size\n        ) {\n          this._renderer.textureManager.clearTiles();\n        }\n        // delay due to: https://github.com/Leaflet/Leaflet/blob/master/src/map/Map.js#L1696\n      }, 300)\n    );\n\n    // Listen for zoom changes. Necessary when using fractional zoom levels.\n    setTimeout(() => {\n      this._map.on(\"zoomend\", _ => {\n        const promise = util.delay(50);\n        promise.then(async () => {\n          if (this.options.contourType !== \"none\") {\n            if (this.options.debug) console.log(\"zoom changed. Moving contour canvas.\");\n            const activeTilesBounds: ActiveTilesBounds = await this._getActivetilesBounds();\n            this._moveContourCanvas(activeTilesBounds);\n          }\n        });\n      });\n    }, 300);\n  }\n\n  /**\n   * The component exposes a declarative interface. Changes should be triggered by\n   * calling this method to update the options. Figuring out how to reconcile the layer's current\n   * state with the updated options is the responsibility of the component. Unlike many other\n   * Leaflet components, no other public methods are provided for imperatively changing the\n   * component's state.\n   */\n  updateOptions(options: Partial<Options>) {\n    const {\n      url: prevUrl,\n      glOperation: prevGlOperation,\n      operationUrlA: prevUrlA,\n      operationUrlB: prevUrlB,\n      operationUrlC: prevUrlC,\n      operationUrlD: prevUrlD,\n      operationUrlE: prevUrlE,\n      operationUrlF: prevUrlF,\n      colorScale: prevColorScale,\n      sentinelValues: prevSentinelValues,\n      filterLowA: prevFilterLowA,\n      filterHighA: prevFilterHighA,\n      filterLowB: prevFilterLowB,\n      filterHighB: prevFilterHighB,\n      filterLowC: prevFilterLowC,\n      filterHighC: prevFilterHighC,\n      filterLowD: prevFilterLowD,\n      filterHighD: prevFilterHighD,\n      filterLowE: prevFilterLowE,\n      filterHighE: prevFilterHighE,\n      filterLowF: prevFilterLowF,\n      filterHighF: prevFilterHighF,\n      multiplierA: prevMultiplierA,\n      multiplierB: prevMultiplierB,\n      multiplierC: prevMultiplierC,\n      multiplierD: prevMultiplierD,\n      multiplierE: prevMultiplierE,\n      multiplierF: prevMultiplierF,\n      multiLayers: prevMultiLayers,\n      hsPregenUrl: prevHsPregenUrl,\n      hillshadeType: prevHillshadeType,\n      hsAdvValueScale: prevHsAdvValueScale,\n      hsAdvPixelScale: prevHsAdvPixelScale,\n      hsSimpleSlopescale: prevHsSimpleSlopescale,\n      hsSimpleAzimuth: prevHsSimpleAzimuth,\n      hsSimpleAltitude: prevHsSimpleAltitude,\n      hsAdvSoftIterations: prevHsAdvSoftIterations,\n      hsAdvAmbientIterations: prevHsAdvAmbientIterations,\n      hsAdvSunRadiusMultiplier: prevHsAdvSunRadiusMultiplier,\n      hsAdvFinalSoftMultiplier: prevHsAdvFinalSoftMultiplier,\n      hsAdvFinalAmbientMultiplier: prevHsAdvFinalAmbientMultiplier,\n      hsAdvBaselayerUrl: prevHsAdvBaselayerUrl,\n      hsAdvSmoothInput: prevHsAdvSmoothInput,\n      hsAdvSmoothInputKernel: prevHsAdvSmoothInputKernel,\n      contourInterval: prevContourInterval,\n      contourIndexInterval: prevContourIndexInterval,\n      contourLineColor: prevContourLineColor,\n      contourLineWeight: prevContourLineWeight,\n      contourLineIndexWeight: prevContourLineIndexWeight,\n      contourType: prevContourType,\n      contourSmoothLines: prevContourSmoothLines,\n      contourSmoothInput: prevContourSmoothInput,\n      contourSmoothInputKernel: prevContourSmoothInputKernel,\n      contourIlluminatedHighlightColor: prevContourIlluminatedHighlightColor,\n      contourIlluminatedShadowColor: prevContourIlluminatedShadowColor,\n      contourIlluminatedShadowSize: prevContourIlluminatedShadowSize,\n      contourHypso: prevContourHypso,\n      contourHypsoDomain: prevContourHypsoDomain,\n      contourHypsoColors: prevContourHypsoColors,\n      contourBathy: prevContourBathy,\n      contourBathyDomain: prevContourBathyDomain,\n      contourBathyColors: prevContourBathyColors,\n      contourBathyShadowColor: prevContourBathyShadowColor,\n      contourBathyHighlightColor: prevContourBathyHighlightColor,\n      contourIndexLabels: prevContourIndexLabels,\n      contourLabelFont: prevContourLabelFont,\n      contourLabelDistance: prevContourLabelDistance,\n      colorscaleMaxLength: prevScaleMaxLength,\n      sentinelMaxLength: prevSentinelMaxLength,\n    } = this.options;\n    L.Util.setOptions(this, options);\n    // create new renderer if max length of sentinels or colorscale changes\n    if (this.options.colorscaleMaxLength !== prevScaleMaxLength || this.options.sentinelMaxLength !== prevSentinelMaxLength) {\n      if (this.options.debug) console.log(\"Creating new renderer\");\n      const tileSize: number = this._tileSizeAsNumber();\n      const renderer = new Renderer(\n        this,\n        tileSize,\n        this.options.nodataValue,\n        this.options.colorScale,\n        this.options.sentinelValues,\n        this.options.colorscaleMaxLength,\n        this.options.sentinelMaxLength\n      );\n\n      this._renderer.regl.destroy();\n      // @ts-ignore\n      delete this._renderer;\n\n      Object.assign(this, {\n        _renderer: renderer\n      });\n    }\n    this._checkColorScaleAndSentinels();\n    if (this.options.colorScale !== prevColorScale) {\n      this._renderer.updateColorscale(this.options.colorScale);\n    }\n    if (this.options.sentinelValues !== prevSentinelValues) {\n      this._renderer.updateSentinels(this.options.sentinelValues);\n    }\n    if (this.options.hsAdvAmbientIterations !== prevHsAdvAmbientIterations) {\n      this._renderer.generateAmbientDirections(this.options.hsAdvAmbientIterations);\n    }\n    if (\n      this.options.hsAdvSoftIterations !== prevHsAdvSoftIterations ||\n      this.options.hsAdvSunRadiusMultiplier !== prevHsAdvSunRadiusMultiplier\n      ) {\n      this._renderer.generateSunDirections(this.options.hsAdvSoftIterations, this.options.hsAdvSunRadiusMultiplier);\n    }\n    this._maybePreload(this.options.preloadUrl);\n    this.setHillshadeOptions();\n\n    if (this.options.extraPixelLayers > 0 && this.options.glOperation === 'none') {\n      this._maybeLoadExtraLayers(prevUrlA, prevUrlB, prevUrlC, prevUrlD);\n    }\n    // TODO: Fix shader so simple hillshading works ok with larger texture than tileSize\n    if (this.options.hillshadeType !== prevHillshadeType) {\n      // reduce textureManager size as simple hillshading type currently gets \"edges\" around the tiles with larger texture.\n      if (this.options.hillshadeType === 'simple') {\n        this._renderer.setMaxTextureDimension(this._tileSizeAsNumber());\n      } else if (prevHillshadeType === 'simple') {\n        this._renderer.setMaxTextureDimension(this._renderer.findMaxTextureDimension());\n      }\n    }\n\n    if (this.options.url !== prevUrl) {\n      // need to clear tiles so they are not reused with adv.hs.\n      this._renderer.textureManager.clearTiles();\n    }\n\n    if (this.options.hsAdvBaselayerUrl !== prevHsAdvBaselayerUrl) {\n      // need to clear tiles so they are not reused\n      // TODO: Check why necessary\n      this._renderer.textureManagerHillshade.clearTiles();\n    }\n\n    if (this.options.glOperation === 'none') {\n      if (this.options.transitions) {\n        if (this.options.url !== prevUrl) {\n          this._updateTilesWithTransitions(prevColorScale, prevSentinelValues);\n          if (this.options.debug) console.log(\"Running GLOperations with transition on tiles\");\n        } else if (this.options.url === prevUrl) {\n          this._updateColorscaleWithTransitions(prevColorScale, prevSentinelValues);\n          if (this.options.debug) console.log(\"Running GLOperations with transition on colorscale only\");\n        }\n      } else {\n          if (\n            this.options.url !== prevUrl ||\n            this.options.hillshadeType !== prevHillshadeType ||\n            this.options.hsPregenUrl !== prevHsPregenUrl ||\n            this.options.hsSimpleSlopescale !== prevHsSimpleSlopescale ||\n            this.options.hsSimpleAzimuth !== prevHsSimpleAzimuth ||\n            this.options.hsSimpleAltitude !== prevHsSimpleAltitude ||\n            this.options.hsAdvSunRadiusMultiplier !== prevHsAdvSunRadiusMultiplier ||\n            this.options.hsAdvFinalSoftMultiplier !== prevHsAdvFinalSoftMultiplier ||\n            this.options.hsAdvFinalAmbientMultiplier !== prevHsAdvFinalAmbientMultiplier ||\n            this.options.hsAdvSoftIterations !== prevHsAdvSoftIterations ||\n            this.options.hsAdvAmbientIterations !== prevHsAdvAmbientIterations ||\n            this.options.hsAdvValueScale !== prevHsAdvValueScale ||\n            this.options.hsAdvPixelScale !== prevHsAdvPixelScale ||\n            this.options.hsAdvBaselayerUrl !== prevHsAdvBaselayerUrl ||\n            this.options.hsAdvSmoothInput !== prevHsAdvSmoothInput ||\n            this.options.hsAdvSmoothInputKernel !== prevHsAdvSmoothInputKernel\n          ) {\n            this._updateTiles();\n            if (this.options.debug) console.log(\"Running GLOperations with new url, no transition and no operation\");\n          } else {\n            if (JSON.stringify(this.options.colorScale) !== JSON.stringify(prevColorScale)) {\n              this._updateTilesColorscaleOnly();\n              if (this.options.debug) console.log(\"Running GLOperations with same url, no transition and no operation\");\n            }\n          }\n      }\n    } else if (this.options.glOperation === 'multi') {\n      if (this.options.multiLayers === 1) {\n        this._updateTilesWithMultiAnalyze1(prevGlOperation, prevMultiLayers, prevUrlA,\n          prevFilterLowA, prevFilterHighA, prevMultiplierA);\n      } else if (this.options.multiLayers === 2) {\n        this._updateTilesWithMultiAnalyze2(prevGlOperation, prevMultiLayers, prevUrlA, prevUrlB,\n          prevFilterLowA, prevFilterHighA, prevFilterLowB, prevFilterHighB,\n          prevMultiplierA, prevMultiplierB);\n      } else if (this.options.multiLayers === 3) {\n          this._updateTilesWithMultiAnalyze3(prevGlOperation, prevMultiLayers, prevUrlA, prevUrlB, prevUrlC,\n            prevFilterLowA, prevFilterHighA, prevFilterLowB, prevFilterHighB, prevFilterLowC, prevFilterHighC,\n            prevMultiplierA, prevMultiplierB, prevMultiplierC);\n      } else if (this.options.multiLayers === 4) {\n        this._updateTilesWithMultiAnalyze4(prevGlOperation, prevMultiLayers, prevUrlA, prevUrlB, prevUrlC, prevUrlD,\n          prevFilterLowA, prevFilterHighA, prevFilterLowB, prevFilterHighB, prevFilterLowC, prevFilterHighC,\n          prevFilterLowD, prevFilterHighD, prevMultiplierA, prevMultiplierB, prevMultiplierC, prevMultiplierD);\n      } else if (this.options.multiLayers === 5) {\n        this._updateTilesWithMultiAnalyze5(prevGlOperation, prevMultiLayers, prevUrlA, prevUrlB, prevUrlC, prevUrlD, prevUrlE,\n          prevFilterLowA, prevFilterHighA, prevFilterLowB, prevFilterHighB, prevFilterLowC, prevFilterHighC,\n          prevFilterLowD, prevFilterHighD, prevFilterLowE, prevFilterHighE, prevMultiplierA, prevMultiplierB,\n          prevMultiplierC, prevMultiplierD, prevMultiplierE);\n      } else if (this.options.multiLayers === 6) {\n        this._updateTilesWithMultiAnalyze6(prevGlOperation, prevMultiLayers, prevUrlA, prevUrlB, prevUrlC, prevUrlD, prevUrlE, prevUrlF,\n          prevFilterLowA, prevFilterHighA, prevFilterLowB, prevFilterHighB, prevFilterLowC, prevFilterHighC,\n          prevFilterLowD, prevFilterHighD, prevFilterLowE, prevFilterHighE, prevFilterLowF, prevFilterHighF,\n          prevMultiplierA, prevMultiplierB, prevMultiplierC, prevMultiplierD, prevMultiplierE, prevMultiplierF);\n      }\n      if (this.options.debug) console.log(\"Running GLOperations with multiAnalyze\");\n    } else if (this.options.glOperation === 'diff') {\n      this._updateTilesWithDiff(prevGlOperation, prevUrlA, prevUrlB);\n      if (this.options.debug) console.log(\"Running GLOperations with diff\");\n    }\n\n    // Contour handling\n    if (this.options.contourType !== 'none') {\n      if (this.options.contourType !== prevContourType && prevContourType === 'none') {\n        if(this._contourData.mergedTileArray) {\n          setTimeout(() => {\n            this._calculateAndDrawContours();\n          }, 50);\n        } else {\n          setTimeout(() => {\n            this._maybeUpdateMergedArrayAndDrawContours();\n          }, 50);\n        }\n      } else if (\n        this.options.contourSmoothInput && (\n          this.options.contourSmoothInput !== prevContourSmoothInput ||\n          this.options.contourSmoothInputKernel !== prevContourSmoothInputKernel\n        )\n      ) {\n        const promise = util.delay(50);\n        promise.then(async () => {\n          this._smoothContourInput();\n          this._calculateAndDrawContours();\n        });\n      } else if (\n        this.options.contourInterval !== prevContourInterval ||\n        this.options.contourIndexInterval !== prevContourIndexInterval ||\n        this.options.contourSmoothLines !== prevContourSmoothLines ||\n        this.options.contourSmoothInput !== prevContourSmoothInput\n      ) {\n        setTimeout(() => {\n          this._calculateAndDrawContours();\n        }, 50);\n      } else if (\n        this.options.contourType !== prevContourType ||\n        this.options.contourLineColor !== prevContourLineColor ||\n        this.options.contourLineWeight !== prevContourLineWeight ||\n        this.options.contourLineIndexWeight !== prevContourLineIndexWeight ||\n        this.options.contourIlluminatedHighlightColor !== prevContourIlluminatedHighlightColor ||\n        this.options.contourIlluminatedShadowColor !== prevContourIlluminatedShadowColor ||\n        this.options.contourIlluminatedShadowSize !== prevContourIlluminatedShadowSize ||\n        this.options.contourHypso !== prevContourHypso ||\n        this.options.contourHypsoDomain !== prevContourHypsoDomain ||\n        this.options.contourHypsoColors !== prevContourHypsoColors ||\n        this.options.contourBathy !== prevContourBathy ||\n        this.options.contourBathyDomain !== prevContourBathyDomain ||\n        this.options.contourBathyColors !== prevContourBathyColors ||\n        this.options.contourBathyShadowColor !== prevContourBathyShadowColor ||\n        this.options.contourBathyHighlightColor !== prevContourBathyHighlightColor ||\n        this.options.contourIndexLabels !== prevContourIndexLabels ||\n        this.options.contourLabelFont !== prevContourLabelFont ||\n        this.options.contourLabelDistance !== prevContourLabelDistance\n      ) {\n        this._drawContours();\n      }\n    } else if (this.options.contourType !== prevContourType && this.options.contourType === 'none') {\n      this._clearContours();\n      this._contourData.mergedTileArray = undefined;\n    }\n  }\n\n\n  /**\n   * We need to register all mouse event handlers on the Leaflet Map component. `Leaflet.Layer`\n   * does this automatically for any handlers returned from the optional method `getEvents`.\n   *\n   * We enhance the `MouseEvent` object Leaflet provides to these handlers with an additional\n   * property containing the value of the pixel(s) under the cursor.\n   */\n  getEvents() {\n    const {\n      onclick: click,\n      ondblclick: dblclick,\n      onmousedown: mousedown,\n      onmouseup: mouseup,\n      onmouseover: mouseover,\n      onmouseout: mouseout,\n      onmousemove: mousemove,\n      oncontextmenu: contextmenu,\n    } = this.options;\n    // Only include handlers that aren't undefined.\n    const definedHandlers = pickBy({\n      click,\n      dblclick,\n      mousedown,\n      mouseup,\n      mouseover,\n      mouseout,\n      mousemove,\n      contextmenu,\n    }, handler => !isUndefined(handler));\n    // Combine events defined on this class with events defined on the parent GridLayer.\n    return {\n      // Include events from GridLayer.\n      ...(L.GridLayer.prototype.getEvents as () => EventsObject).call(this),\n      // Wrap each handler to provide property `pixelValue` on the event object.\n      ...mapValues(definedHandlers, val => val && this._wrapMouseEventHandler(val)),\n    };\n  }\n\n  /**\n   * adapted from L.TileLayer (v1.2.0):\n   * modified to accept a `url` parameter to allow loading from a URL other than `this.options.url`\n   */\n  getTileUrl(coords: TileCoordinates, url: string) {\n    const data: any = {\n      r: L.Browser.retina ? '@2x' : '',\n      s: this._getSubdomain(coords),\n      x: coords.x,\n      y: coords.y,\n      z: this._getZoomForUrl(),\n    };\n    if (this._map && !((this._map.options as L.MapOptions).crs as L.CRS).infinite) {\n      const invertedY = (this._globalTileRange.max as L.Point).y - coords.y;\n      if (this.options.tms) {\n        data.y = invertedY;\n      }\n      data['-y'] = invertedY;\n    }\n\n    return L.Util.template(url, L.Util.extend(data, this.options));\n  }\n\n  /**\n   * Causes the layer to clear all the tiles and request them again\n   * Currently no changes from L.GridLayer implementation\n   */\n  redraw() {\n    if (this._map) {\n      this._removeAllTiles();\n      this._update();\n    }\n    return this;\n  }\n\n  /**\n   * This function is called by the underlying Leaflet.GridLayer when it creates a new tile. This\n   * occurs (a) when the layer first loads and (b) when panning or zooming the map.\n   */\n  createTile(coords: TileCoordinates, done: L.DoneCallback): TileElement {\n    const {\n      extraPixelLayers,\n      tileSize,\n      url,\n      hsPregenUrl,\n      operationUrlA,\n      operationUrlB,\n      operationUrlC,\n      operationUrlD,\n      operationUrlE,\n      operationUrlF,\n      filterLowA,\n      filterHighA,\n      filterLowB,\n      filterHighB,\n      filterLowC,\n      filterHighC,\n      filterLowD,\n      filterHighD,\n      filterLowE,\n      filterHighE,\n      filterLowF,\n      filterHighF,\n      multiplierA,\n      multiplierB,\n      multiplierC,\n      multiplierD,\n      multiplierE,\n      multiplierF,\n    } = this.options;\n\n    // Create a <canvas> element to contain the rendered image.\n    const tileCanvas = L.DomUtil.create('canvas') as TileElement;\n    // Configure the element.\n    Object.assign(tileCanvas, {\n      className: 'gl-tilelayer-tile',\n      width: tileSize,\n      height: tileSize,\n    });\n\n    if (this.options.glOperation === 'none') {\n      // Download an extra layer if required\n      if (extraPixelLayers === 1) {\n        this._fetchTileData(coords, operationUrlA).then((pixelDataA) => {\n          if (this.options.debug) console.log(\"createTile - extraPixelLayers === 1\");\n          tileCanvas.pixelDataA = pixelDataA;\n        });\n      }\n\n      if (this.options._hillshadeOptions.hillshadeType === 'pregen') {\n        Promise.all([\n          this._fetchTileData(coords, url),\n          this._fetchTileData(coords, hsPregenUrl),\n        ]).then((pixelDataArray) => {\n          // Render in `renderer`'s WebGL context.\n          if (this.options.debug) console.log(\"_fetchTileData with pregen hs\");\n          const pixelData: Uint8Array = pixelDataArray[0];\n          const pixelDataHs: Uint8Array = pixelDataArray[1];\n\n          const [sourceX, sourceY] = this._renderer.renderTileHsPregen(\n            { coords: coords, pixelData: pixelData },\n            { coords: coords, pixelData: pixelDataHs },\n          );\n\n          // Copy pixel data to a property on tile canvas element (for later retrieval).\n          tileCanvas.pixelData = pixelData;\n          tileCanvas.pixelDataHsPregen = pixelDataHs;\n\n          // Copy contents to tileCanvas.\n          this._copyToTileCanvas(tileCanvas, sourceX, sourceY);\n          done(undefined, tileCanvas);\n        });\n      } else if (this.options._hillshadeOptions.hillshadeType === 'advanced') {\n        (async () => {\n          try {\n            // Retrieve and decode Float-32 PNG.\n            let pixelData: Uint8Array;\n            const hashKey = this._renderer.textureManager.hashTileCoordinates(coords);\n            if (this._renderer.textureManager.contents.has(hashKey)) {\n              // TODO: Not working properly. Seems to\n              try {\n                // @ts-ignore\n                pixelData = this._tiles[hashKey].el.pixelData;\n              } catch(err){\n                pixelData = await this._fetchTileData(coords, url);\n                this._renderer.textureManager.addTile(coords, pixelData);\n              }\n            } else {\n              pixelData = await this._fetchTileData(coords, url);\n              this._renderer.textureManager.addTile(coords, pixelData);\n            }\n\n            // if tile is just nodataValue, do not do anything\n            const nodataTile = util.createNoDataTile(this.options.nodataValue, this._tileSizeAsNumber());\n            if (!util.typedArraysAreEqual(pixelData, nodataTile)) {\n              const textureCoords = await util.getAdjacentTilesTexCoords(\n                this,\n                this._renderer.textureManager,\n                coords,\n                url\n              );\n\n              let baselayerTexCoords: number[][] = [];\n              // download baselayer tile if url specified\n              if (this.options.hsAdvBaselayerUrl) {\n                // TODO: Cache tiles and check if url has changed before fetching\n                const basePixelData = await this._fetchTileData(\n                  coords,\n                  this.options.hsAdvBaselayerUrl,\n                  \"image\",\n                );\n                const textureBounds = this._renderer.textureManagerHillshade.addTile(coords, basePixelData);\n                baselayerTexCoords = util.getTexCoordVerticesTriangleStripQuad(textureBounds);\n              }\n\n              // Adjacent tiles as now available in TextureManager. Start rendering\n              const [sourceX, sourceY] = this._renderer.renderTileHsAdvanced(\n                this.options._hillshadeOptions,\n                this._getZoomForUrl(),\n                textureCoords,\n                this._getPixelScale(),\n                baselayerTexCoords,\n              );\n\n              // Copy pixel data to a property on tile canvas element (for later retrieval).\n              tileCanvas.pixelData = pixelData;\n\n              // Copy contents to tileCanvas.\n              this._copyToTileCanvas(tileCanvas, sourceX, sourceY);\n            }\n            done(undefined, tileCanvas);\n          } catch(err){\n            console.log(err);\n          }\n        })();\n      } else {\n        // Retrieve and decode Float-32 PNG.\n        this._fetchTileData(coords, url).then((pixelData) => {\n          // Render in `renderer`'s WebGL context.\n          if (this.options.debug) console.log(\"_fetchTileData with no operation\");\n          const [sourceX, sourceY] = this._renderer.renderTile(\n            { coords, pixelData },\n            this.options._hillshadeOptions,\n            this._getZoomForUrl(),\n          );\n\n          // Copy pixel data to a property on tile canvas element (for later retrieval).\n          tileCanvas.pixelData = pixelData;\n\n          // Copy contents to tileCanvas.\n          this._copyToTileCanvas(tileCanvas, sourceX, sourceY);\n          done(undefined, tileCanvas);\n        });\n      }\n    } else if (this.options.glOperation === 'diff') {\n      Promise.all([\n        this._fetchTileData(coords, operationUrlA),\n        this._fetchTileData(coords, operationUrlB),\n      ]).then((pixelDataArray) => {\n        // Render in `renderer`'s WebGL context.\n        if (this.options.debug) console.log(\"_fetchTileData with diff\");\n        const pixelDataA: Uint8Array = pixelDataArray[0];\n        const pixelDataB: Uint8Array = pixelDataArray[1];\n        const [sourceX, sourceY, resultEncodedPixels] = this._renderer.renderTileDiff(\n          { coords: coords, pixelData: pixelDataA },\n          { coords: coords, pixelData: pixelDataB },\n        );\n\n        tileCanvas.pixelData = resultEncodedPixels as Uint8Array;\n        tileCanvas.pixelDataA = pixelDataA;\n        tileCanvas.pixelDataB = pixelDataB;\n\n        // Copy contents to tileCanvas.\n        this._copyToTileCanvas(tileCanvas, sourceX, sourceY);\n        done(undefined, tileCanvas);\n      });\n    } else if (this.options.glOperation === 'multi' && this.options.multiLayers === 1) {\n      Promise.all([\n        this._fetchTileData(coords, operationUrlA)\n      ]).then((pixelDataArray) => {\n        // Render in `renderer`'s WebGL context.\n        if (this.options.debug) console.log(\"_fetchTileData with multi\");\n        const pixelDataA: Uint8Array = pixelDataArray[0];\n        const [sourceX, sourceY, resultEncodedPixels] = this._renderer.renderTileMulti1(\n          { coords: coords, pixelData: pixelDataA },\n          filterLowA,\n          filterHighA,\n          multiplierA,\n        );\n\n        // Copy pixel data to a property on tile canvas element (for later retrieval).\n        tileCanvas.pixelData = <Uint8Array>resultEncodedPixels;\n        tileCanvas.pixelDataA = pixelDataA;\n\n        // Copy contents to tileCanvas.\n        this._copyToTileCanvas(tileCanvas, sourceX, sourceY);\n        done(undefined, tileCanvas);\n      });\n    } else if (this.options.glOperation === 'multi' && this.options.multiLayers === 2) {\n      Promise.all([\n        this._fetchTileData(coords, operationUrlA),\n        this._fetchTileData(coords, operationUrlB),\n      ]).then((pixelDataArray) => {\n        // Render in `renderer`'s WebGL context.\n        if (this.options.debug) console.log(\"_fetchTileData with multi\");\n        const pixelDataA: Uint8Array = pixelDataArray[0];\n        const pixelDataB: Uint8Array = pixelDataArray[1];\n        const [sourceX, sourceY, resultEncodedPixels] = this._renderer.renderTileMulti2(\n          { coords: coords, pixelData: pixelDataA },\n          { coords: coords, pixelData: pixelDataB },\n          filterLowA,\n          filterHighA,\n          filterLowB,\n          filterHighB,\n          multiplierA,\n          multiplierB,\n        );\n\n        // Copy pixel data to a property on tile canvas element (for later retrieval).\n        tileCanvas.pixelData = <Uint8Array>resultEncodedPixels;\n        tileCanvas.pixelDataA = pixelDataA;\n        tileCanvas.pixelDataB = pixelDataB;\n\n        // Copy contents to tileCanvas.\n        this._copyToTileCanvas(tileCanvas, sourceX, sourceY);\n        done(undefined, tileCanvas);\n      });\n    } else if (this.options.glOperation === 'multi' && this.options.multiLayers === 3) {\n      Promise.all([\n        this._fetchTileData(coords, operationUrlA),\n        this._fetchTileData(coords, operationUrlB),\n        this._fetchTileData(coords, operationUrlC),\n      ]).then((pixelDataArray) => {\n        // Render in `renderer`'s WebGL context.\n        if (this.options.debug) console.log(\"_fetchTileData with multi\");\n        const pixelDataA: Uint8Array = pixelDataArray[0];\n        const pixelDataB: Uint8Array = pixelDataArray[1];\n        const pixelDataC: Uint8Array = pixelDataArray[2];\n        const [sourceX, sourceY, resultEncodedPixels] = this._renderer.renderTileMulti3(\n          { coords: coords, pixelData: pixelDataA },\n          { coords: coords, pixelData: pixelDataB },\n          { coords: coords, pixelData: pixelDataC },\n          filterLowA,\n          filterHighA,\n          filterLowB,\n          filterHighB,\n          filterLowC,\n          filterHighC,\n          multiplierA,\n          multiplierB,\n          multiplierC,\n        );\n\n        // Copy pixel data to a property on tile canvas element (for later retrieval).\n        tileCanvas.pixelData = resultEncodedPixels as Uint8Array;\n        tileCanvas.pixelDataA = pixelDataA;\n        tileCanvas.pixelDataB = pixelDataB;\n        tileCanvas.pixelDataC = pixelDataC;\n\n        // Copy contents to tileCanvas.\n        this._copyToTileCanvas(tileCanvas, sourceX, sourceY);\n        done(undefined, tileCanvas);\n      });\n    } else if (this.options.glOperation === 'multi' && this.options.multiLayers === 4) {\n      Promise.all([\n        this._fetchTileData(coords, operationUrlA),\n        this._fetchTileData(coords, operationUrlB),\n        this._fetchTileData(coords, operationUrlC),\n        this._fetchTileData(coords, operationUrlD),\n      ]).then((pixelDataArray) => {\n        // Render in `renderer`'s WebGL context.\n        if (this.options.debug) console.log(\"_fetchTileData with multi\");\n        const pixelDataA: Uint8Array = pixelDataArray[0];\n        const pixelDataB: Uint8Array = pixelDataArray[1];\n        const pixelDataC: Uint8Array = pixelDataArray[2];\n        const pixelDataD: Uint8Array = pixelDataArray[3];\n        const [sourceX, sourceY, resultEncodedPixels] = this._renderer.renderTileMulti4(\n          { coords: coords, pixelData: pixelDataA },\n          { coords: coords, pixelData: pixelDataB },\n          { coords: coords, pixelData: pixelDataC },\n          { coords: coords, pixelData: pixelDataD },\n          filterLowA,\n          filterHighA,\n          filterLowB,\n          filterHighB,\n          filterLowC,\n          filterHighC,\n          filterLowD,\n          filterHighD,\n          multiplierA,\n          multiplierB,\n          multiplierC,\n          multiplierD,\n        );\n\n        // Copy pixel data to a property on tile canvas element (for later retrieval).\n        tileCanvas.pixelData = <Uint8Array>resultEncodedPixels;\n        tileCanvas.pixelDataA = pixelDataA;\n        tileCanvas.pixelDataB = pixelDataB;\n        tileCanvas.pixelDataC = pixelDataC;\n        tileCanvas.pixelDataD = pixelDataD;\n\n        // Copy contents to tileCanvas.\n        this._copyToTileCanvas(tileCanvas, sourceX, sourceY);\n        done(undefined, tileCanvas);\n      });\n    } else if (this.options.glOperation === 'multi' && this.options.multiLayers === 5) {\n      Promise.all([\n        this._fetchTileData(coords, operationUrlA),\n        this._fetchTileData(coords, operationUrlB),\n        this._fetchTileData(coords, operationUrlC),\n        this._fetchTileData(coords, operationUrlD),\n        this._fetchTileData(coords, operationUrlE),\n      ]).then((pixelDataArray) => {\n        // Render in `renderer`'s WebGL context.\n        if (this.options.debug) console.log(\"_fetchTileData with multi\");\n        const pixelDataA: Uint8Array = pixelDataArray[0];\n        const pixelDataB: Uint8Array = pixelDataArray[1];\n        const pixelDataC: Uint8Array = pixelDataArray[2];\n        const pixelDataD: Uint8Array = pixelDataArray[3];\n        const pixelDataE: Uint8Array = pixelDataArray[4];\n        const [sourceX, sourceY, resultEncodedPixels] = this._renderer.renderTileMulti5(\n          { coords: coords, pixelData: pixelDataA },\n          { coords: coords, pixelData: pixelDataB },\n          { coords: coords, pixelData: pixelDataC },\n          { coords: coords, pixelData: pixelDataD },\n          { coords: coords, pixelData: pixelDataE },\n          filterLowA,\n          filterHighA,\n          filterLowB,\n          filterHighB,\n          filterLowC,\n          filterHighC,\n          filterLowD,\n          filterHighD,\n          filterLowE,\n          filterHighE,\n          multiplierA,\n          multiplierB,\n          multiplierC,\n          multiplierD,\n          multiplierE,\n        );\n\n        // Copy pixel data to a property on tile canvas element (for later retrieval).\n        tileCanvas.pixelData = <Uint8Array>resultEncodedPixels;\n        tileCanvas.pixelDataA = pixelDataA;\n        tileCanvas.pixelDataB = pixelDataB;\n        tileCanvas.pixelDataC = pixelDataC;\n        tileCanvas.pixelDataD = pixelDataD;\n        tileCanvas.pixelDataE = pixelDataE;\n\n        // Copy contents to tileCanvas.\n        this._copyToTileCanvas(tileCanvas, sourceX, sourceY);\n        done(undefined, tileCanvas);\n      });\n    } else if (this.options.glOperation === 'multi' && this.options.multiLayers === 6) {\n      Promise.all([\n        this._fetchTileData(coords, operationUrlA),\n        this._fetchTileData(coords, operationUrlB),\n        this._fetchTileData(coords, operationUrlC),\n        this._fetchTileData(coords, operationUrlD),\n        this._fetchTileData(coords, operationUrlE),\n        this._fetchTileData(coords, operationUrlF),\n      ]).then((pixelDataArray) => {\n        // Render in `renderer`'s WebGL context.\n        if (this.options.debug) console.log(\"_fetchTileData with multi\");\n        const pixelDataA: Uint8Array = pixelDataArray[0];\n        const pixelDataB: Uint8Array = pixelDataArray[1];\n        const pixelDataC: Uint8Array = pixelDataArray[2];\n        const pixelDataD: Uint8Array = pixelDataArray[3];\n        const pixelDataE: Uint8Array = pixelDataArray[4];\n        const pixelDataF: Uint8Array = pixelDataArray[5];\n        const [sourceX, sourceY, resultEncodedPixels] = this._renderer.renderTileMulti6(\n          { coords: coords, pixelData: pixelDataA },\n          { coords: coords, pixelData: pixelDataB },\n          { coords: coords, pixelData: pixelDataC },\n          { coords: coords, pixelData: pixelDataD },\n          { coords: coords, pixelData: pixelDataE },\n          { coords: coords, pixelData: pixelDataF },\n          filterLowA,\n          filterHighA,\n          filterLowB,\n          filterHighB,\n          filterLowC,\n          filterHighC,\n          filterLowD,\n          filterHighD,\n          filterLowE,\n          filterHighE,\n          filterLowF,\n          filterHighF,\n          multiplierA,\n          multiplierB,\n          multiplierC,\n          multiplierD,\n          multiplierE,\n          multiplierF,\n        );\n\n        // Copy pixel data to a property on tile canvas element (for later retrieval).\n        tileCanvas.pixelData = <Uint8Array>resultEncodedPixels;\n        tileCanvas.pixelDataA = pixelDataA;\n        tileCanvas.pixelDataB = pixelDataB;\n        tileCanvas.pixelDataC = pixelDataC;\n        tileCanvas.pixelDataD = pixelDataD;\n        tileCanvas.pixelDataE = pixelDataE;\n        tileCanvas.pixelDataF = pixelDataF;\n\n        // Copy contents to tileCanvas.\n        this._copyToTileCanvas(tileCanvas, sourceX, sourceY);\n        done(undefined, tileCanvas);\n      });\n    }\n\n    return tileCanvas;\n  }\n\n  /**\n   * Check invariant: Either `colorScale` or `sentinelValues` must be of non-zero length.\n   */\n  protected _checkColorScaleAndSentinels() {\n    const {\n      colorScale,\n      sentinelValues,\n      colorscaleMaxLength,\n      sentinelMaxLength,\n    } = this.options;\n    if (colorScale.length === 0 && sentinelValues.length === 0) {\n      throw new Error('Either `colorScale` or `sentinelValues` must be of non-zero length.');\n    }\n    if (colorScale.length > colorscaleMaxLength) {\n      throw new Error(\n        `Color scale length ${colorScale.length} exceeds the maximum, ${colorscaleMaxLength}.`,\n      );\n    }\n    if (sentinelValues.length > sentinelMaxLength) {\n      throw new Error(\n        `Sentinel values length ${sentinelValues.length} exceeds the maximum, ${sentinelMaxLength}.`,\n      );\n    }\n  }\n\n  /**\n   * adapted from eponymous private method in L.TileLayer (v1.2.0)\n   */\n  protected _getSubdomain(tilePoint: TileCoordinates): string {\n    const index = Math.abs(tilePoint.x + tilePoint.y) % this.options.subdomains.length;\n    return this.options.subdomains[index];\n  }\n\n  /**\n   * adapted from eponymous private method in L.TileLayer (v1.2.0)\n   */\n  protected _getZoomForUrl(): number {\n    const {\n      maxZoom,\n      zoomReverse,\n      zoomOffset,\n    } = this.options;\n    const tileZoom = this._tileZoom as number;\n    const zoom = zoomReverse ? maxZoom - tileZoom : tileZoom;\n    return zoom + zoomOffset;\n  }\n\n  /**\n   * Handler function for Leaflet.GridLayer's 'tileunload' event.\n   */\n  protected _onTileRemove({ coords, tile }: TileEvent) {\n    if (this.options.debug) console.log(\"_onTileRemove()\");\n    // for https://github.com/Leaflet/Leaflet/issues/137\n    if (!L.Browser.android) {\n      tile.onload = noop;\n    }\n    this._renderer.removeTile(coords);\n  }\n\n  /**\n   * Redraw all active tiles with new url.\n   */\n  protected async _updateTiles() {\n    const activeTiles: GridLayerTile[] = this._getActiveTiles();\n\n    // Fetch data from the new URL.\n    const tilesData: TileDatum[] = await this._getTilesData(activeTiles);\n    if (this.options.debug) console.log(\"_updateTiles() with url \"+this.options.url);\n\n    // Render using the new data.\n    let canvasCoordinates: Array<Pair<number>>;\n    let tilesDataHs: TileDatum[];\n    if (this.options._hillshadeOptions.hillshadeType === 'pregen') {\n      tilesDataHs = await this._getTilesData(activeTiles, this.options.hsPregenUrl);\n      canvasCoordinates = this._renderer.renderTilesHsPregen(\n        tilesData,\n        tilesDataHs,\n      );\n    } else if (this.options._hillshadeOptions.hillshadeType === 'advanced') {\n      this._map.fire('calcHsAdvanced', {status: true});\n      canvasCoordinates = await this._renderer.renderTilesHsAdvanced(\n        tilesData,\n        this.options._hillshadeOptions,\n        this.options.url,\n        this._getZoomForUrl(),\n        this._getPixelScale(),\n      );\n      this._map.fire('calcHsAdvanced', {status: false});\n    } else {\n      canvasCoordinates = this._renderer.renderTiles(\n        tilesData,\n        this.options._hillshadeOptions,\n        this._getZoomForUrl(),\n      );\n    }\n\n    // Update tiles.\n    canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n      // Copy rendered pixels to the tile canvas.\n      const tile = activeTiles[index];\n      this._copyToTileCanvas(tile.el, sourceX, sourceY);\n\n      // Copy new pixel data.\n      tile.el.pixelData = tilesData[index].pixelData;\n      if (this.options._hillshadeOptions.hillshadeType === 'pregen') {\n        tile.el.pixelDataHsPregen = tilesDataHs[index].pixelData;\n      }\n    });\n  }\n\n  /**\n   * Redraw all active tiles. Only colorscale changed.\n   */\n  protected async _updateTilesColorscaleOnly() {\n    if (this.options.debug) console.log(\"_updateTilesColorscaleOnly()\");\n    const activeTiles: GridLayerTile[] = this._getActiveTiles();\n\n    // Render using the new data.\n    if (this.options._hillshadeOptions.hillshadeType === 'pregen') {\n      // Fetch data from the existing tiles.\n      const tilesData: TileDatum[] = activeTiles.map(({ coords, el }) => ({\n        coords: coords,\n        pixelData: el.pixelData as Uint8Array,\n      }));\n      const tilesDataHs: TileDatum[] = activeTiles.map(({ coords, el }) => ({\n        coords: coords,\n        pixelData: el.pixelDataHsPregen as Uint8Array,\n      }));\n\n      const canvasCoordinates = this._renderer.renderTilesHsPregen(\n        tilesData,\n        tilesDataHs,\n      );\n\n      canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n        // Copy rendered pixels to the tile canvas.\n        const tile = activeTiles[index];\n        this._copyToTileCanvas(tile.el, sourceX, sourceY);\n      });\n    } else if (this.options._hillshadeOptions.hillshadeType === 'advanced') {\n      if (this.options.debug) console.log(\"_updateTilesColorscaleOnly() with advanced hs\");\n      this.redraw();\n      return;\n    } else {\n      // Fetch data from the existing tiles.\n      const tilesData: TileDatum[] = activeTiles.map(({ coords, el }) => ({\n        coords: coords,\n        pixelData: el.pixelData as Uint8Array,\n      }));\n\n      const canvasCoordinates = this._renderer.renderTiles(\n        tilesData,\n        this.options._hillshadeOptions,\n        this._getZoomForUrl(),\n      );\n\n      canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n        // Copy rendered pixels to the tile canvas.\n        const tile = activeTiles[index];\n        this._copyToTileCanvas(tile.el, sourceX, sourceY);\n      });\n    }\n  }\n\n  /**\n   * Redraw all active tiles with updated tilesUrl, animating the transition over a time interval specified in\n   * `options.transitionTimeMs`.\n   */\n  protected async _updateTilesWithTransitions(\n    prevColorScale: Color[],\n    prevSentinelValues: SentinelValue[],\n  ) {\n    if (this.options.debug) console.log(\"_updateTilesWithTransitions()\");\n    const activeTiles: GridLayerTile[] = this._getActiveTiles();\n\n    const prevTilesData: TileDatum[] = activeTiles.map(({ coords, el }) => ({\n      coords,\n      pixelData: el.pixelData as Uint8Array,\n    }));\n\n    // Fetch data from the new URL.\n    const newTilesData: TileDatum[] = await this._getTilesData(activeTiles);\n\n    // Copy new pixel data to tiles.\n    activeTiles.forEach((tile, index) => {\n      tile.el.pixelData = newTilesData[index].pixelData;\n    });\n\n    const {\n      colorScale: newColorScale,\n      sentinelValues: newSentinelValues = [],\n      transitionTimeMs,\n    } = this.options;\n\n    // This function will be passed to the Renderer, which will call it after rendering a frame\n    // in its offscreen <canvas>.\n    const onFrameRendered = (canvasCoordinates: Array<Pair<number>>) => {\n      canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n        // Copy rendered pixels to the tile <canvas>.\n        const tile = activeTiles[index];\n        this._copyToTileCanvas(tile.el, sourceX, sourceY);\n      });\n    };\n\n    // Renderer hooks the render calls to requestAnimationFrame, calling `onFrameRendered` after each is drawn.\n    if (JSON.stringify(newColorScale) === JSON.stringify(prevColorScale) && JSON.stringify(newSentinelValues) === JSON.stringify(prevSentinelValues)) {\n      this._renderer.renderTilesWithTransition(\n        prevTilesData,\n        newTilesData,\n        transitionTimeMs,\n        onFrameRendered,\n      );\n    } else {\n      this._renderer.renderTilesWithTransitionAndNewColorScale(\n        prevTilesData,\n        newTilesData,\n        transitionTimeMs,\n        onFrameRendered,\n      );\n    }\n  }\n\n  /**\n   * Redraw tiles with updated colorscale, animating the transition over a time interval specified in\n   * `options.transitionTimeMs`.\n   */\n  protected async _updateColorscaleWithTransitions(\n    prevColorScale: Color[],\n    prevSentinelValues: SentinelValue[],\n  ) {\n    if (this.options.debug) console.log(\"_updateColorscaleWithTransitions()\");\n    const activeTiles: GridLayerTile[] = this._getActiveTiles();\n\n    const tilesData: TileDatum[] = activeTiles.map(({ coords, el }) => ({\n      coords,\n      pixelData: el.pixelData as Uint8Array,\n    }));\n\n    const {\n      colorScale: newColorScale,\n      sentinelValues: newSentinelValues = [],\n      transitionTimeMs,\n    } = this.options;\n\n    // This function will be passed to the Renderer, which will call it after rendering a frame\n    // in its offscreen <canvas>.\n    const onFrameRendered = (canvasCoordinates: Array<Pair<number>>) => {\n      canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n        // Copy rendered pixels to the tile <canvas>.\n        const tile = activeTiles[index];\n        this._copyToTileCanvas(tile.el, sourceX, sourceY);\n      });\n    };\n\n    // Renderer hooks the render calls to requestAnimationFrame, calling `onFrameRendered` after each is drawn.\n    if (JSON.stringify(newColorScale) !== JSON.stringify(prevColorScale) || JSON.stringify(newSentinelValues) !== JSON.stringify(prevSentinelValues)) {\n      this._renderer.renderTilesWithTransitionAndNewColorScaleOnly(\n        tilesData,\n        transitionTimeMs,\n        onFrameRendered,\n      );\n    }\n  }\n\n  /**\n   * Redraw with diff between two tileLayers\n   */\n  protected async _updateTilesWithDiff(\n    prevGlOperation: string,\n    prevUrlA: string,\n    prevUrlB: string\n  ) {\n    if (this.options.debug) console.log(\"_updateTilesWithDiff()\");\n    const activeTiles: GridLayerTile[] = this._getActiveTiles();\n\n    let tilesA: TileDatum[] = [];\n    let tilesB: TileDatum[] = [];\n    if (\n      this.options.glOperation === prevGlOperation &&\n      this.options.operationUrlA === prevUrlA &&\n      this.options.operationUrlB === prevUrlB\n    ) {\n      if (this.options.debug) console.log(\"_updateTilesWithDiff: both same url. Getting data from existing result\");\n        // Fetch data from the existing tiles.\n        tilesA = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelData as Uint8Array,\n        }));\n    } else {\n      // Fetch tilesA data\n      if (this.options.operationUrlA !== prevUrlA) {\n        if (this.options.debug) console.log(\"_updateTilesWithDiff: new A url. Downloading new tiles\");\n        tilesA = await this._getTilesData(activeTiles, this.options.operationUrlA);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataA = tilesA[index].pixelData;\n        });\n      } else {\n        if (this.options.debug) console.log(\"_updateTilesWithDiff: same A url. Getting data from existing tiles\");\n        // Fetch data from the existing tiles.\n        tilesA = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataA as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesB data\n      if (this.options.operationUrlB !== prevUrlB) {\n        if (this.options.debug) console.log(\"_updateTilesWithDiff: new B url. Downloading new tiles\");\n        tilesB = await this._getTilesData(activeTiles, this.options.operationUrlB);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataB = tilesB[index].pixelData;\n        });\n      } else {\n        if (this.options.debug) console.log(\"_updateTilesWithDiff: same B url. Getting data from existing tiles\");\n        // Fetch data from the existing tiles.\n        tilesB = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataB as Uint8Array,\n        }));\n      }\n    }\n\n    if (\n      this.options.glOperation === prevGlOperation &&\n      this.options.operationUrlA === prevUrlA &&\n      this.options.operationUrlB === prevUrlB\n    ) {\n      if (this.options.debug) console.log(\"_updateTilesWithDiff: both same urls. Running renderTiles()\");\n      const canvasCoordinates = this._renderer.renderTiles(\n        tilesA,\n        this.options._hillshadeOptions,\n        this._getZoomForUrl()\n      );\n\n      canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n        // Copy rendered pixels to the tile canvas.\n        const tile = activeTiles[index];\n        this._copyToTileCanvas(tile.el, sourceX, sourceY);\n\n      });\n    } else {\n      if (this.options.debug) console.log(\"_updateTilesWithDiff: not same urls. Running renderTilesWithDiff()\");\n\n      // This function will be passed to the Renderer, which will call it after rendering a frame\n      // in its offscreen <canvas>.\n      const onFrameRendered = (canvasCoordinates: Array<Pair<number>>) => {\n        canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n          // Copy rendered pixels to the tile <canvas>.\n          const tile = activeTiles[index];\n          this._copyToTileCanvas(tile.el, sourceX, sourceY);\n        });\n      };\n\n      const resultEncodedPixels: Uint8Array[] = this._renderer.renderTilesWithDiff(\n        tilesA,\n        tilesB,\n        onFrameRendered,\n      );\n\n      // Copy result pixel data to tiles to use for mouseEvents.\n      activeTiles.forEach((tile, index) => {\n        tile.el.pixelData = resultEncodedPixels[index];\n      });\n    }\n  }\n\n\n  /**\n   * Redraw tiles with operations on 1 tileLayer\n   */\n  protected async _updateTilesWithMultiAnalyze1(\n    prevGlOperation: string,\n    prevMultiLayers: number,\n    prevUrlA: string,\n    prevFilterLowA: number,\n    prevFilterHighA: number,\n    prevMultiplierA: number,\n  ) {\n    if (this.options.debug) console.log(\"_updateTilesWithMultiAnalyze1()\");\n    const activeTiles: GridLayerTile[] = this._getActiveTiles();\n\n    if (\n      this.options.glOperation === prevGlOperation &&\n      this.options.operationUrlA === prevUrlA &&\n      this.options.filterLowA === prevFilterLowA &&\n      this.options.filterHighA === prevFilterHighA &&\n      this.options.multiplierA === prevMultiplierA &&\n      this.options.multiLayers === prevMultiLayers\n    ) {\n      if (this.options.debug) console.log(\"_updateTilesWithMultiAnalyze1: all same urls. Fetching from existing tiles. Running renderTiles()\");\n      // Fetch data from the existing tiles.\n      const tilesA: TileDatum[] = activeTiles.map(({ coords, el }) => ({\n        coords,\n        pixelData: el.pixelData as Uint8Array,\n      }));\n\n      const canvasCoordinates = this._renderer.renderTiles(\n        tilesA,\n        this.options._hillshadeOptions,\n        this._getZoomForUrl()\n      );\n\n      canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n        // Copy rendered pixels to the tile canvas.\n        const tile = activeTiles[index];\n        this._copyToTileCanvas(tile.el, sourceX, sourceY);\n      });\n    } else {\n      let tilesA: TileDatum[] = [];\n      // Fetch tilesA data\n      if (this.options.operationUrlA !== prevUrlA) {\n        tilesA = await this._getTilesData(activeTiles, this.options.operationUrlA);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataA = tilesA[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesA = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataA as Uint8Array,\n        }));\n      }\n\n      // This function will be passed to the Renderer, which will call it after rendering a frame\n      // in its offscreen <canvas>.\n      const onFrameRendered = (canvasCoordinates: Array<Pair<number>>) => {\n        canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n          // Copy rendered pixels to the tile <canvas>.\n          const tile = activeTiles[index];\n          this._copyToTileCanvas(tile.el, sourceX, sourceY);\n        });\n      };\n\n      // Renderer hooks the render calls to requestAnimationFrame, calling `onFrameRendered` after each is drawn.\n      const resultEncodedPixels: Uint8Array[] = this._renderer.renderTilesWithMultiAnalyze1(\n        tilesA,\n        this.options.filterLowA,\n        this.options.filterHighA,\n        this.options.multiplierA,\n        onFrameRendered,\n      );\n\n      // Copy result pixel data to tiles to use for mouseEvents.\n      activeTiles.forEach((tile, index) => {\n        tile.el.pixelData = resultEncodedPixels[index];\n      });\n    }\n  }\n\n\n  /**\n   * Redraw tiles with operations on 2 tileLayers\n   */\n  protected async _updateTilesWithMultiAnalyze2(\n    prevGlOperation: string,\n    prevMultiLayers: number,\n    prevUrlA: string,\n    prevUrlB: string,\n    prevFilterLowA: number,\n    prevFilterHighA: number,\n    prevFilterLowB: number,\n    prevFilterHighB: number,\n    prevMultiplierA: number,\n    prevMultiplierB: number\n  ) {\n    if (this.options.debug) console.log(\"_updateTilesWithMultiAnalyze2()\");\n    const activeTiles: GridLayerTile[] = this._getActiveTiles();\n\n    if (\n      this.options.glOperation === prevGlOperation &&\n      this.options.operationUrlA === prevUrlA &&\n      this.options.operationUrlB === prevUrlB &&\n      this.options.filterLowA === prevFilterLowA &&\n      this.options.filterHighA === prevFilterHighA &&\n      this.options.filterLowB === prevFilterLowB &&\n      this.options.filterHighB === prevFilterHighB &&\n      this.options.multiplierA === prevMultiplierA &&\n      this.options.multiplierB === prevMultiplierB &&\n      this.options.multiLayers === prevMultiLayers\n    ) {\n      if (this.options.debug) console.log(\"_updateTilesWithMultiAnalyze2: all same urls. Fetching from existing tiles. Running renderTiles()\");\n      // Fetch data from the existing tiles.\n      const tilesA: TileDatum[] = activeTiles.map(({ coords, el }) => ({\n        coords,\n        pixelData: el.pixelData as Uint8Array,\n      }));\n\n      const canvasCoordinates = this._renderer.renderTiles(\n        tilesA,\n        this.options._hillshadeOptions,\n        this._getZoomForUrl()\n      );\n\n      canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n        // Copy rendered pixels to the tile canvas.\n        const tile = activeTiles[index];\n        this._copyToTileCanvas(tile.el, sourceX, sourceY);\n      });\n    } else {\n      let tilesA: TileDatum[] = [];\n      let tilesB: TileDatum[] = [];\n      // Fetch tilesA data\n      if (this.options.operationUrlA !== prevUrlA) {\n        tilesA = await this._getTilesData(activeTiles, this.options.operationUrlA);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataA = tilesA[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesA = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataA as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesB data\n      if (this.options.operationUrlB !== prevUrlB) {\n        tilesB = await this._getTilesData(activeTiles, this.options.operationUrlB);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataB = tilesB[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesB = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataB as Uint8Array,\n        }));\n      }\n\n      // This function will be passed to the Renderer, which will call it after rendering a frame\n      // in its offscreen <canvas>.\n      const onFrameRendered = (canvasCoordinates: Array<Pair<number>>) => {\n        canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n          // Copy rendered pixels to the tile <canvas>.\n          const tile = activeTiles[index];\n          this._copyToTileCanvas(tile.el, sourceX, sourceY);\n        });\n      };\n\n      // Renderer hooks the render calls to requestAnimationFrame, calling `onFrameRendered` after each is drawn.\n      const resultEncodedPixels: Uint8Array[] = this._renderer.renderTilesWithMultiAnalyze2(\n        tilesA,\n        tilesB,\n        this.options.filterLowA,\n        this.options.filterHighA,\n        this.options.filterLowB,\n        this.options.filterHighB,\n        this.options.multiplierA,\n        this.options.multiplierB,\n        onFrameRendered,\n      );\n\n      // Copy result pixel data to tiles to use for mouseEvents.\n      activeTiles.forEach((tile, index) => {\n        tile.el.pixelData = resultEncodedPixels[index];\n      });\n    }\n  }\n\n\n  /**\n   * Redraw tiles with operations on 3 tileLayers\n   */\n  protected async _updateTilesWithMultiAnalyze3(\n    prevGlOperation: string,\n    prevMultiLayers: number,\n    prevUrlA: string,\n    prevUrlB: string,\n    prevUrlC: string,\n    prevFilterLowA: number,\n    prevFilterHighA: number,\n    prevFilterLowB: number,\n    prevFilterHighB: number,\n    prevFilterLowC: number,\n    prevFilterHighC: number,\n    prevMultiplierA: number,\n    prevMultiplierB: number,\n    prevMultiplierC: number\n  ) {\n    if (this.options.debug) console.log(\"_updateTilesWithMultiAnalyze3()\");\n    const activeTiles: GridLayerTile[] = this._getActiveTiles();\n\n    if (\n      this.options.glOperation === prevGlOperation &&\n      this.options.operationUrlA === prevUrlA &&\n      this.options.operationUrlB === prevUrlB &&\n      this.options.operationUrlC === prevUrlC &&\n      this.options.filterLowA === prevFilterLowA &&\n      this.options.filterHighA === prevFilterHighA &&\n      this.options.filterLowB === prevFilterLowB &&\n      this.options.filterHighB === prevFilterHighB &&\n      this.options.filterLowC === prevFilterLowC &&\n      this.options.filterHighC === prevFilterHighC &&\n      this.options.multiplierA === prevMultiplierA &&\n      this.options.multiplierB === prevMultiplierB &&\n      this.options.multiplierC === prevMultiplierC &&\n      this.options.multiLayers === prevMultiLayers\n    ) {\n      if (this.options.debug) console.log(\"_updateTilesWithMultiAnalyze3: all same urls. Fetching from existing tiles. Running renderTiles()\");\n      // Fetch data from the existing tiles.\n      const tilesA: TileDatum[] = activeTiles.map(({ coords, el }) => ({\n        coords,\n        pixelData: el.pixelData as Uint8Array,\n      }));\n\n      const canvasCoordinates = this._renderer.renderTiles(\n        tilesA,\n        this.options._hillshadeOptions,\n        this._getZoomForUrl()\n      );\n\n      canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n        // Copy rendered pixels to the tile canvas.\n        const tile = activeTiles[index];\n        this._copyToTileCanvas(tile.el, sourceX, sourceY);\n      });\n    } else {\n      let tilesA: TileDatum[] = [];\n      let tilesB: TileDatum[] = [];\n      let tilesC: TileDatum[] = [];\n      // Fetch tilesA data\n      if (this.options.operationUrlA !== prevUrlA) {\n        tilesA = await this._getTilesData(activeTiles, this.options.operationUrlA);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataA = tilesA[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesA = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataA as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesB data\n      if (this.options.operationUrlB !== prevUrlB) {\n        tilesB = await this._getTilesData(activeTiles, this.options.operationUrlB);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataB = tilesB[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesB = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataB as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesC data\n      if (this.options.operationUrlC !== prevUrlC) {\n        tilesC = await this._getTilesData(activeTiles, this.options.operationUrlC);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataC = tilesC[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesC = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataC as Uint8Array,\n        }));\n      }\n\n      // This function will be passed to the Renderer, which will call it after rendering a frame\n      // in its offscreen <canvas>.\n      const onFrameRendered = (canvasCoordinates: Array<Pair<number>>) => {\n        canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n          // Copy rendered pixels to the tile <canvas>.\n          const tile = activeTiles[index];\n          this._copyToTileCanvas(tile.el, sourceX, sourceY);\n        });\n      };\n\n      // Renderer hooks the render calls to requestAnimationFrame, calling `onFrameRendered` after each is drawn.\n      const resultEncodedPixels: Uint8Array[] = this._renderer.renderTilesWithMultiAnalyze3(\n        tilesA,\n        tilesB,\n        tilesC,\n        this.options.filterLowA,\n        this.options.filterHighA,\n        this.options.filterLowB,\n        this.options.filterHighB,\n        this.options.filterLowC,\n        this.options.filterHighC,\n        this.options.multiplierA,\n        this.options.multiplierB,\n        this.options.multiplierC,\n        onFrameRendered,\n      );\n\n      // Copy result pixel data to tiles to use for mouseEvents.\n      activeTiles.forEach((tile, index) => {\n        tile.el.pixelData = resultEncodedPixels[index];\n      });\n    }\n  }\n\n\n  /**\n   * Redraw tiles with operations on 4 tileLayers\n   */\n  protected async _updateTilesWithMultiAnalyze4(\n    prevGlOperation: string,\n    prevMultiLayers: number,\n    prevUrlA: string,\n    prevUrlB: string,\n    prevUrlC: string,\n    prevUrlD: string,\n    prevFilterLowA: number,\n    prevFilterHighA: number,\n    prevFilterLowB: number,\n    prevFilterHighB: number,\n    prevFilterLowC: number,\n    prevFilterHighC: number,\n    prevFilterLowD: number,\n    prevFilterHighD: number,\n    prevMultiplierA: number,\n    prevMultiplierB: number,\n    prevMultiplierC: number,\n    prevMultiplierD: number\n  ) {\n    if (this.options.debug) console.log(\"_updateTilesWithMultiAnalyze4()\");\n    const activeTiles: GridLayerTile[] = this._getActiveTiles();\n\n    if (\n      this.options.glOperation === prevGlOperation &&\n      this.options.operationUrlA === prevUrlA &&\n      this.options.operationUrlB === prevUrlB &&\n      this.options.operationUrlC === prevUrlC &&\n      this.options.operationUrlD === prevUrlD &&\n      this.options.filterLowA === prevFilterLowA &&\n      this.options.filterHighA === prevFilterHighA &&\n      this.options.filterLowB === prevFilterLowB &&\n      this.options.filterHighB === prevFilterHighB &&\n      this.options.filterLowC === prevFilterLowC &&\n      this.options.filterHighC === prevFilterHighC &&\n      this.options.filterLowD === prevFilterLowD &&\n      this.options.filterHighD === prevFilterHighD &&\n      this.options.multiplierA === prevMultiplierA &&\n      this.options.multiplierB === prevMultiplierB &&\n      this.options.multiplierC === prevMultiplierC &&\n      this.options.multiplierD === prevMultiplierD &&\n      this.options.multiLayers === prevMultiLayers\n    ) {\n      if (this.options.debug) console.log(\"_updateTilesWithMultiAnalyze4: all same urls. Fetching from existing tiles. Running renderTiles()\");\n      // Fetch data from the existing tiles.\n      const tilesA: TileDatum[] = activeTiles.map(({ coords, el }) => ({\n        coords,\n        pixelData: el.pixelData as Uint8Array,\n      }));\n\n      const canvasCoordinates = this._renderer.renderTiles(\n        tilesA,\n        this.options._hillshadeOptions,\n        this._getZoomForUrl()\n      );\n\n      canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n        // Copy rendered pixels to the tile canvas.\n        const tile = activeTiles[index];\n        this._copyToTileCanvas(tile.el, sourceX, sourceY);\n      });\n    } else {\n      let tilesA: TileDatum[] = [];\n      let tilesB: TileDatum[] = [];\n      let tilesC: TileDatum[] = [];\n      let tilesD: TileDatum[] = [];\n      // Fetch tilesA data\n      if (this.options.operationUrlA !== prevUrlA) {\n        tilesA = await this._getTilesData(activeTiles, this.options.operationUrlA);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataA = tilesA[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesA = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataA as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesB data\n      if (this.options.operationUrlB !== prevUrlB) {\n        tilesB = await this._getTilesData(activeTiles, this.options.operationUrlB);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataB = tilesB[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesB = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataB as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesC data\n      if (this.options.operationUrlC !== prevUrlC) {\n        tilesC = await this._getTilesData(activeTiles, this.options.operationUrlC);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataC = tilesC[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesC = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataC as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesD data\n      if (this.options.operationUrlD !== prevUrlD) {\n        tilesD = await this._getTilesData(activeTiles, this.options.operationUrlD);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataD = tilesD[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesD = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataD as Uint8Array,\n        }));\n      }\n      // This function will be passed to the Renderer, which will call it after rendering a frame\n      // in its offscreen <canvas>.\n      const onFrameRendered = (canvasCoordinates: Array<Pair<number>>) => {\n        canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n          // Copy rendered pixels to the tile <canvas>.\n          const tile = activeTiles[index];\n          this._copyToTileCanvas(tile.el, sourceX, sourceY);\n        });\n      };\n\n      // Renderer hooks the render calls to requestAnimationFrame, calling `onFrameRendered` after each is drawn.\n      // let resultEncodedPixels: Float32Array[] = this._renderer.renderTilesWithMultiAnalyze4(\n      const resultEncodedPixels: Uint8Array[] = this._renderer.renderTilesWithMultiAnalyze4(\n        tilesA,\n        tilesB,\n        tilesC,\n        tilesD,\n        this.options.filterLowA,\n        this.options.filterHighA,\n        this.options.filterLowB,\n        this.options.filterHighB,\n        this.options.filterLowC,\n        this.options.filterHighC,\n        this.options.filterLowD,\n        this.options.filterHighD,\n        this.options.multiplierA,\n        this.options.multiplierB,\n        this.options.multiplierC,\n        this.options.multiplierD,\n        onFrameRendered,\n      );\n\n      // Copy result pixel data to tiles to use for mouseEvents.\n      activeTiles.forEach((tile, index) => {\n        tile.el.pixelData = resultEncodedPixels[index];\n      });\n    }\n  }\n\n  /**\n   * Redraw tiles with operations on 5 tileLayers\n   */\n  protected async _updateTilesWithMultiAnalyze5(\n    prevGlOperation: string,\n    prevMultiLayers: number,\n    prevUrlA: string,\n    prevUrlB: string,\n    prevUrlC: string,\n    prevUrlD: string,\n    prevUrlE: string,\n    prevFilterLowA: number,\n    prevFilterHighA: number,\n    prevFilterLowB: number,\n    prevFilterHighB: number,\n    prevFilterLowC: number,\n    prevFilterHighC: number,\n    prevFilterLowD: number,\n    prevFilterHighD: number,\n    prevFilterLowE: number,\n    prevFilterHighE: number,\n    prevMultiplierA: number,\n    prevMultiplierB: number,\n    prevMultiplierC: number,\n    prevMultiplierD: number,\n    prevMultiplierE: number,\n  ) {\n    if (this.options.debug) console.log(\"_updateTilesWithMultiAnalyze5()\");\n    const activeTiles: GridLayerTile[] = this._getActiveTiles();\n\n    if (\n      this.options.glOperation === prevGlOperation &&\n      this.options.operationUrlA === prevUrlA &&\n      this.options.operationUrlB === prevUrlB &&\n      this.options.operationUrlC === prevUrlC &&\n      this.options.operationUrlD === prevUrlD &&\n      this.options.operationUrlE === prevUrlE &&\n      this.options.filterLowA === prevFilterLowA &&\n      this.options.filterHighA === prevFilterHighA &&\n      this.options.filterLowB === prevFilterLowB &&\n      this.options.filterHighB === prevFilterHighB &&\n      this.options.filterLowC === prevFilterLowC &&\n      this.options.filterHighC === prevFilterHighC &&\n      this.options.filterLowD === prevFilterLowD &&\n      this.options.filterHighD === prevFilterHighD &&\n      this.options.filterLowE === prevFilterLowE &&\n      this.options.filterHighE === prevFilterHighE &&\n      this.options.multiplierA === prevMultiplierA &&\n      this.options.multiplierB === prevMultiplierB &&\n      this.options.multiplierC === prevMultiplierC &&\n      this.options.multiplierD === prevMultiplierD &&\n      this.options.multiplierE === prevMultiplierE &&\n      this.options.multiLayers === prevMultiLayers\n    ) {\n      if (this.options.debug) console.log(\"_updateTilesWithMultiAnalyze5: all same urls. Fetching from existing tiles. Running renderTiles()\");\n      // Fetch data from the existing tiles.\n      const tilesA: TileDatum[] = activeTiles.map(({ coords, el }) => ({\n        coords,\n        pixelData: el.pixelData as Uint8Array,\n      }));\n\n      const canvasCoordinates = this._renderer.renderTiles(\n        tilesA,\n        this.options._hillshadeOptions,\n        this._getZoomForUrl()\n      );\n\n      canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n        // Copy rendered pixels to the tile canvas.\n        const tile = activeTiles[index];\n        this._copyToTileCanvas(tile.el, sourceX, sourceY);\n      });\n    } else {\n      let tilesA: TileDatum[] = [];\n      let tilesB: TileDatum[] = [];\n      let tilesC: TileDatum[] = [];\n      let tilesD: TileDatum[] = [];\n      let tilesE: TileDatum[] = [];\n      // Fetch tilesA data\n      if (this.options.operationUrlA !== prevUrlA) {\n        tilesA = await this._getTilesData(activeTiles, this.options.operationUrlA);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataA = tilesA[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesA = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataA as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesB data\n      if (this.options.operationUrlB !== prevUrlB) {\n        tilesB = await this._getTilesData(activeTiles, this.options.operationUrlB);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataB = tilesB[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesB = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataB as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesC data\n      if (this.options.operationUrlC !== prevUrlC) {\n        tilesC = await this._getTilesData(activeTiles, this.options.operationUrlC);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataC = tilesC[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesC = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataC as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesD data\n      if (this.options.operationUrlD !== prevUrlD) {\n        tilesD = await this._getTilesData(activeTiles, this.options.operationUrlD);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataD = tilesD[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesD = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataD as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesE data\n      if (this.options.operationUrlE !== prevUrlE) {\n        tilesE = await this._getTilesData(activeTiles, this.options.operationUrlE);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataE = tilesE[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesE = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataE as Uint8Array,\n        }));\n      }\n\n      // This function will be passed to the Renderer, which will call it after rendering a frame\n      // in its offscreen <canvas>.\n      const onFrameRendered = (canvasCoordinates: Array<Pair<number>>) => {\n        canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n          // Copy rendered pixels to the tile <canvas>.\n          const tile = activeTiles[index];\n          this._copyToTileCanvas(tile.el, sourceX, sourceY);\n        });\n      };\n\n      // Renderer hooks the render calls to requestAnimationFrame, calling `onFrameRendered` after each is drawn.\n      const resultEncodedPixels: Uint8Array[] = this._renderer.renderTilesWithMultiAnalyze5(\n        tilesA,\n        tilesB,\n        tilesC,\n        tilesD,\n        tilesE,\n        this.options.filterLowA,\n        this.options.filterHighA,\n        this.options.filterLowB,\n        this.options.filterHighB,\n        this.options.filterLowC,\n        this.options.filterHighC,\n        this.options.filterLowD,\n        this.options.filterHighD,\n        this.options.filterLowE,\n        this.options.filterHighE,\n        this.options.multiplierA,\n        this.options.multiplierB,\n        this.options.multiplierC,\n        this.options.multiplierD,\n        this.options.multiplierE,\n        onFrameRendered,\n      );\n\n      // Copy result pixel data to tiles to use for mouseEvents.\n      activeTiles.forEach((tile, index) => {\n        tile.el.pixelData = resultEncodedPixels[index];\n      });\n    }\n  }\n\n\n  /**\n   * Redraw tiles with operations on 6 tileLayers\n   */\n  protected async _updateTilesWithMultiAnalyze6(\n    prevGlOperation: string,\n    prevMultiLayers: number,\n    prevUrlA: string,\n    prevUrlB: string,\n    prevUrlC: string,\n    prevUrlD: string,\n    prevUrlE: string,\n    prevUrlF: string,\n    prevFilterLowA: number,\n    prevFilterHighA: number,\n    prevFilterLowB: number,\n    prevFilterHighB: number,\n    prevFilterLowC: number,\n    prevFilterHighC: number,\n    prevFilterLowD: number,\n    prevFilterHighD: number,\n    prevFilterLowE: number,\n    prevFilterHighE: number,\n    prevFilterLowF: number,\n    prevFilterHighF: number,\n    prevMultiplierA: number,\n    prevMultiplierB: number,\n    prevMultiplierC: number,\n    prevMultiplierD: number,\n    prevMultiplierE: number,\n    prevMultiplierF: number,\n  ) {\n    if (this.options.debug) console.log(\"_updateTilesWithMultiAnalyze6()\");\n    const activeTiles: GridLayerTile[] = this._getActiveTiles();\n\n    if (\n      this.options.glOperation === prevGlOperation &&\n      this.options.operationUrlA === prevUrlA &&\n      this.options.operationUrlB === prevUrlB &&\n      this.options.operationUrlC === prevUrlC &&\n      this.options.operationUrlD === prevUrlD &&\n      this.options.operationUrlE === prevUrlE &&\n      this.options.operationUrlF === prevUrlF &&\n      this.options.filterLowA === prevFilterLowA &&\n      this.options.filterHighA === prevFilterHighA &&\n      this.options.filterLowB === prevFilterLowB &&\n      this.options.filterHighB === prevFilterHighB &&\n      this.options.filterLowC === prevFilterLowC &&\n      this.options.filterHighC === prevFilterHighC &&\n      this.options.filterLowD === prevFilterLowD &&\n      this.options.filterHighD === prevFilterHighD &&\n      this.options.filterLowE === prevFilterLowE &&\n      this.options.filterHighE === prevFilterHighE &&\n      this.options.filterLowF === prevFilterLowF &&\n      this.options.filterHighF === prevFilterHighF &&\n      this.options.multiplierA === prevMultiplierA &&\n      this.options.multiplierB === prevMultiplierB &&\n      this.options.multiplierC === prevMultiplierC &&\n      this.options.multiplierD === prevMultiplierD &&\n      this.options.multiplierE === prevMultiplierE &&\n      this.options.multiplierF === prevMultiplierF &&\n      this.options.multiLayers === prevMultiLayers\n    ) {\n      if (this.options.debug) console.log(\"_updateTilesWithMultiAnalyze6: all same urls. Fetching from existing tiles. Running renderTiles()\");\n      // Fetch data from the existing tiles.\n      const tilesA: TileDatum[] = activeTiles.map(({ coords, el }) => ({\n        coords,\n        pixelData: el.pixelData as Uint8Array,\n      }));\n\n      const canvasCoordinates = this._renderer.renderTiles(\n        tilesA,\n        this.options._hillshadeOptions,\n        this._getZoomForUrl()\n      );\n\n      canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n        // Copy rendered pixels to the tile canvas.\n        const tile = activeTiles[index];\n        this._copyToTileCanvas(tile.el, sourceX, sourceY);\n      });\n    } else {\n      let tilesA: TileDatum[] = [];\n      let tilesB: TileDatum[] = [];\n      let tilesC: TileDatum[] = [];\n      let tilesD: TileDatum[] = [];\n      let tilesE: TileDatum[] = [];\n      let tilesF: TileDatum[] = [];\n\n      // Fetch tilesA data\n      if (this.options.operationUrlA !== prevUrlA) {\n        tilesA = await this._getTilesData(activeTiles, this.options.operationUrlA);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataA = tilesA[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesA = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataA as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesB data\n      if (this.options.operationUrlB !== prevUrlB) {\n        tilesB = await this._getTilesData(activeTiles, this.options.operationUrlB);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataB = tilesB[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesB = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataB as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesC data\n      if (this.options.operationUrlC !== prevUrlC) {\n        tilesC = await this._getTilesData(activeTiles, this.options.operationUrlC);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataC = tilesC[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesC = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataC as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesD data\n      if (this.options.operationUrlD !== prevUrlD) {\n        tilesD = await this._getTilesData(activeTiles, this.options.operationUrlD);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataD = tilesD[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesD = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataD as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesE data\n      if (this.options.operationUrlE !== prevUrlE) {\n        tilesE = await this._getTilesData(activeTiles, this.options.operationUrlE);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataE = tilesE[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesE = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataE as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesF data\n      if (this.options.operationUrlF !== prevUrlF) {\n        tilesF = await this._getTilesData(activeTiles, this.options.operationUrlF);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataF = tilesF[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesF = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataF as Uint8Array,\n        }));\n      }\n\n      // This function will be passed to the Renderer, which will call it after rendering a frame\n      // in its offscreen <canvas>.\n      const onFrameRendered = (canvasCoordinates: Array<Pair<number>>) => {\n        canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n          // Copy rendered pixels to the tile <canvas>.\n          const tile = activeTiles[index];\n          this._copyToTileCanvas(tile.el, sourceX, sourceY);\n        });\n      };\n\n      // Renderer hooks the render calls to requestAnimationFrame, calling `onFrameRendered` after each is drawn.\n      const resultEncodedPixels: Uint8Array[] = this._renderer.renderTilesWithMultiAnalyze6(\n        tilesA,\n        tilesB,\n        tilesC,\n        tilesD,\n        tilesE,\n        tilesF,\n        this.options.filterLowA,\n        this.options.filterHighA,\n        this.options.filterLowB,\n        this.options.filterHighB,\n        this.options.filterLowC,\n        this.options.filterHighC,\n        this.options.filterLowD,\n        this.options.filterHighD,\n        this.options.filterLowE,\n        this.options.filterHighE,\n        this.options.filterLowF,\n        this.options.filterHighF,\n        this.options.multiplierA,\n        this.options.multiplierB,\n        this.options.multiplierC,\n        this.options.multiplierD,\n        this.options.multiplierE,\n        this.options.multiplierF,\n        onFrameRendered,\n      );\n\n      // Copy result pixel data to tiles to use for mouseEvents.\n      activeTiles.forEach((tile, index) => {\n        tile.el.pixelData = resultEncodedPixels[index];\n      });\n    }\n  }\n\n\n  /**\n   * Preload tiles if it makes sense to do so.\n   */\n  protected _maybePreload(preloadUrl?: string) {\n    if (\n      // Preload tiles if a preloadUrl is given and...\n      preloadUrl && (\n        // either the preload cache is empty\n        !this._preloadTileCache\n        // or its url is out of date.\n        || this._preloadTileCache.url !== preloadUrl\n      )\n    ) {\n      this._preloadTiles(preloadUrl);\n    }\n  }\n\n  /**\n   * Load extra layers if required\n   */\n  protected async _maybeLoadExtraLayers(prevUrlA: string, prevUrlB: string, prevUrlC: string, prevUrlD: string) {\n    let activeTiles: GridLayerTile[] = [];\n    if ( this.options.extraPixelLayers >= 1) {\n      activeTiles = this._getActiveTiles();\n\n      if (prevUrlA !== this.options.operationUrlA) {\n        const tilesA = await this._getTilesData(activeTiles, this.options.operationUrlA);\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataA = tilesA[index].pixelData;\n        });\n      }\n    }\n\n    if ( this.options.extraPixelLayers >= 2) {\n      if (prevUrlB !== this.options.operationUrlB) {\n        const tilesB = await this._getTilesData(activeTiles, this.options.operationUrlB);\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataB = tilesB[index].pixelData;\n        });\n      }\n    }\n\n    if ( this.options.extraPixelLayers >= 3) {\n      if (prevUrlC !== this.options.operationUrlC) {\n        const tilesC = await this._getTilesData(activeTiles, this.options.operationUrlC);\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataC = tilesC[index].pixelData;\n        });\n      }\n    }\n\n    if ( this.options.extraPixelLayers >= 4) {\n      if (prevUrlD !== this.options.operationUrlD) {\n        const tilesD = await this._getTilesData(activeTiles, this.options.operationUrlD);\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataD = tilesD[index].pixelData;\n        });\n      }\n    }\n  }\n\n  /**\n   * Load tiles from the given URL and store them in the preload cache.\n   */\n  protected async _preloadTiles(url: string) {\n    const activeTiles: GridLayerTile[] = this._getActiveTiles();\n    const tilesData: TileDatum[] = await this._fetchTilesData(activeTiles, url);\n    this._preloadTileCache = {\n      url,\n      tiles: tilesData,\n    };\n  }\n\n  /**\n   * Use Leaflet.GridLayer's _pruneTiles method to clear out any stale tiles, then return the\n   * remaining (active) tiles, sorted by z, x, y.\n   */\n  protected _getActiveTiles(): GridLayerTile[] {\n    if (this.options.debug) console.log(\"_getActiveTiles()\");\n    // Remove inactive tiles from the cache.\n    this._pruneTiles();\n    // Any tiles remaining are active tiles.\n    // We sort them by their tile coordinates (by z, then x, then y) to ensure consistent ordering.\n    const tiles = util.staticCast<TileCache>(this._tiles);\n    return values(tiles).sort((a, b) => util.compareTileCoordinates(a.coords, b.coords));\n  }\n\n  /**\n   * Retrieve pixel data for the given tiles, either from the preload cache or from the server.\n   */\n  protected async _getTilesData(tiles: GridLayerTile[], url: string = this.options.url): Promise<TileDatum[]> {\n    if (this.options.debug) console.log(\"_getTilesData() with url: \" + url);\n    const preloadTileCache: PreloadTileCache | undefined = this._preloadTileCache;\n    if (\n      preloadTileCache\n      && url === preloadTileCache.url\n      && util.sameTiles(\n        preloadTileCache.tiles.map(({ coords }) => coords),\n        tiles.map(({ coords }) => coords),\n      )\n    ) {\n      // Clear the preload cache and return its contents.\n      this._preloadTileCache = undefined;\n      return Promise.resolve(preloadTileCache.tiles);\n    } else {\n      return this._fetchTilesData(tiles, url);\n    }\n  }\n\n  /**\n   * Fetch pixel data for the supplied tiles from the supplied URL.\n   */\n  protected async _fetchTilesData(tiles: GridLayerTile[], url: string): Promise<TileDatum[]> {\n    const pixelData = await Promise.all(tiles.map(({ coords }) => this._fetchTileData(coords, url)));\n\n    if (this.options.debug) console.log(\"_fetchTilesData() with url:\" + url);\n\n    // Fire the 'load' event to notify any listeners that the tiles have finished loading.\n    this.fire('load', { url });\n\n    return zipWith<GridLayerTile | Uint8Array, TileDatum>(\n      tiles,\n      pixelData,\n      ({ coords }: GridLayerTile, data: Uint8Array) => ({\n        coords,\n        pixelData: data,\n      }),\n    );\n  }\n\n  /**\n   * Fetch pixel data for an individual tile from the given URL.\n   */\n  protected async _fetchTileData(\n    coords: TileCoordinates,\n    url: string,\n    tileFormat: string = this.options.tileFormat,\n  ): Promise<Uint8Array> {\n    if (tileFormat === 'float32' || tileFormat === 'image') {\n      return util.fetchPNGData(this.getTileUrl(coords, url), this.options.nodataValue, this._tileSizeAsNumber());\n    } else if (tileFormat === 'dem') {\n      const nodataTile = util.createNoDataTile(this.options.nodataValue, this._tileSizeAsNumber());\n      const imageData = await util.fetchPNGData(this.getTileUrl(coords, url), this.options.nodataValue, this._tileSizeAsNumber());\n      if (util.typedArraysAreEqual(imageData, nodataTile)) {\n        return imageData;\n      } else {\n        const rgbaData = this._renderer.renderConvertDem(imageData);\n        return rgbaData;\n      }\n    }\n    return util.createNoDataTile(this.options.nodataValue, this._tileSizeAsNumber());\n  }\n\n  /**\n   * L.GridLayer's `tileSize` option can be either a number or a Point object.\n   * For this tile layer, we assume tiles will have equal width and height, so to simplify things\n   * we normalize `tileSize` as a number.\n   */\n  protected _tileSizeAsNumber(): number {\n    const { tileSize } = this.options;\n    return (\n      typeof tileSize === 'number'\n      ? tileSize\n      : (tileSize as L.Point).x\n    );\n  }\n\n  /**\n   * Copy pixels from the Renderer's (offscreen) <canvas> to a tile's (onscreen) canvas.\n   */\n  protected _copyToTileCanvas(tile: TileElement, sourceX: number, sourceY: number) {\n    const tileSize = this._tileSizeAsNumber();\n    const tileCanvas2DContext = tile.getContext('2d');\n    if (tileCanvas2DContext === null) {\n      throw new Error('Tile canvas 2D context is null.');\n    }\n    // Clear the current contents of the canvas. Otherwise, the new image will be composited with\n    // the existing image.\n    tileCanvas2DContext.clearRect(0, 0, tileSize, tileSize);\n    // Copy the image data from the Renderer's canvas to the tile's canvas.\n    tileCanvas2DContext.drawImage(\n      this._renderer.canvas,\n      sourceX, sourceY, tileSize, tileSize, // source canvas offset (x, y) and size (x, y)\n      0, 0, tileSize, tileSize,             // destination canvas offset (x, y) and size (x, y)\n    );\n  }\n\n  /**\n   * Get active tiles boundary information\n   */\n  protected async _getActivetilesBounds() {\n    const activeTiles: GridLayerTile[] = this._getActiveTiles();\n\n    let xMin = activeTiles[0].coords.x;\n    let xMax = activeTiles[0].coords.x;\n    let yMin = activeTiles[0].coords.y;\n    let yMax = activeTiles[0].coords.y;\n\n    activeTiles.forEach((tile) => {\n      if (tile.coords.x > xMax) {\n        xMax = tile.coords.x;\n      }\n      if (tile.coords.x < xMin) {\n        xMin = tile.coords.x;\n      }\n      if (tile.coords.y > yMax) {\n        yMax = tile.coords.y;\n      }\n      if (tile.coords.y < yMin) {\n        yMin = tile.coords.y;\n      }\n    });\n\n    const xTiles = xMax - xMin + 1;\n    const yTiles = yMax - yMin + 1;\n\n    const activeTilesBounds: ActiveTilesBounds = {\n      xMin: xMin,\n      xMax: xMax,\n      yMin: yMin,\n      yMax: yMax,\n      xTiles: xTiles,\n      yTiles: yTiles\n    };\n\n    return activeTilesBounds;\n  }\n\n  protected setHillshadeOptions() {\n    this.options._hillshadeOptions = {\n      hillshadeType: this.options.hillshadeType,\n      hsAdvValueScale: this.options.hsAdvValueScale,\n      hsAdvPixelScale: this.options.hsAdvPixelScale,\n      hsSimpleSlopescale: this.options.hsSimpleSlopescale,\n      hsSimpleAzimuth: this.options.hsSimpleAzimuth,\n      hsSimpleAltitude: this.options.hsSimpleAltitude,\n      hsSimpleZoomdelta: this.options.hsSimpleZoomdelta,\n      hsAdvSoftIterations: this.options.hsAdvSoftIterations,\n      hsAdvAmbientIterations: this.options.hsAdvAmbientIterations,\n      hsAdvSunRadiusMultiplier: this.options.hsAdvSunRadiusMultiplier,\n      hsAdvFinalSoftMultiplier: this.options.hsAdvFinalSoftMultiplier,\n      hsAdvFinalAmbientMultiplier: this.options.hsAdvFinalAmbientMultiplier,\n      hsAdvBaselayerUrl: this.options.hsAdvBaselayerUrl,\n      hsAdvSmoothInput: this.options.hsAdvSmoothInput,\n      hsAdvSmoothInputKernel: this.options.hsAdvSmoothInputKernel,\n      hsPregenUrl: this.options.hsPregenUrl,\n    };\n  }\n\n  /**\n   * Get pixelData from each tile and merge to a single array\n   */\n  protected async _mergePixelData(activeTilesBounds: ActiveTilesBounds, tileSize: number) {\n    if (this.options.debug) console.log(\"_mergePixelData()\");\n    const z = this._tileZoom;\n    const canvasMerged = document.createElement(\"canvas\");\n    this._contourData.width = activeTilesBounds.xTiles * tileSize;\n    this._contourData.height = activeTilesBounds.yTiles * tileSize;\n    canvasMerged.width = this._contourData.width;\n    canvasMerged.height = this._contourData.height;\n    const ctx = canvasMerged.getContext(\"2d\");\n\n    const nodataTile: Uint8Array = util.createNoDataTile(\n      this.options.nodataValue,\n      tileSize\n    );\n\n    // draw pixelData for all active tiles to a single canvas\n    for (let i = 0; i <= activeTilesBounds.xTiles; i++) {\n      const x = activeTilesBounds.xMin + i;\n      for (let j = 0; j <= activeTilesBounds.yTiles; j++) {\n        const y = activeTilesBounds.yMin + j;\n\n        let uint8: Uint8Array;\n        try {\n          const element: TileElement = <TileElement>this._tiles[`${x}:${y}:${z}`].el;\n          uint8 = <Uint8Array>element.pixelData;\n        } catch(err) {\n          uint8 = nodataTile;\n        }\n        const uac = new Uint8ClampedArray(uint8);\n        // TODO: uint8 length = 262400. 4 * tileSize * tileSize = 262144. Why different?\n        const uac2 = new Uint8ClampedArray(uac.buffer, 0, 4 * tileSize * tileSize);\n        const idata = new ImageData(uac2, tileSize, tileSize);\n\n        ctx!.putImageData(idata, i * tileSize, j * tileSize);\n      }\n    }\n\n    // extract float values from canvas\n    const imageData = ctx!.getImageData(0, 0, activeTilesBounds.xTiles * tileSize, activeTilesBounds.yTiles * tileSize);\n    let mergedPixelData = new Float32Array(imageData.data.buffer);\n\n    // replace noDataValues with NaN\n    mergedPixelData = mergedPixelData.map(function(item) {\n      // TODO: Assuming noDataValue is set to default (-999999). Need to fix.\n      if(item < -900000) {\n      // if(item === this.options.nodataValue) {\n        item = NaN;\n      }\n      return item;\n    }, this);\n\n    const mergedPixelArray: number[] = Array.from(mergedPixelData);\n\n    const arrSum = function(arr: number[]){\n      return arr.reduce(function(a,b){\n        return (isNaN(a) ? 0 : a) + (isNaN(b) ? 0 : b);\n      }, 0);\n    };\n    if (this.options.debug) {console.log(\"sum mergedPixelArray\"); console.log(arrSum(mergedPixelArray));}\n\n    let contourCanvas: HTMLCanvasElement;\n    if (this.options.contourCanvas) {\n      contourCanvas = this.options.contourCanvas;\n      contourCanvas.width = this._contourData.width;\n      contourCanvas.height = this._contourData.height;\n    } else {\n      console.log(\"Error: contourCanvas not specified.\");\n      return;\n    }\n\n    this._contourData.mergedTileArray = mergedPixelArray;\n    this._contourData.smoothedTileArray = undefined;\n\n    return;\n  }\n\n  /**\n   * Merge tiles, calculate new contours and draw on seperate canvas\n   */\n  protected async _maybeUpdateMergedArrayAndDrawContours(): Promise<void> {\n    if (this.options.contourType === 'none') return;\n\n    this._map.fire('contourDrawing', {status: true});\n    if (this.options.debug) console.log(\"_maybeUpdateMergedArrayAndDrawContours()\");\n\n    await this._clearContours();\n\n    const promise = util.delay(50);\n    promise.then(async () => {\n      const activeTilesBounds: ActiveTilesBounds = await this._getActivetilesBounds();\n      const tileSize = this._tileSizeAsNumber();\n\n      await this._mergePixelData(activeTilesBounds, tileSize);\n      if (this.options.contourSmoothInput) {\n        this._smoothContourInput();\n      }\n      await this._calculateAndDrawContours();\n      await this._moveContourCanvas(activeTilesBounds);\n    });\n  }\n\n  /**\n   * Calculate new contours and draw on seperate canvas\n   */\n  protected _smoothContourInput(): void {\n    if (this.options.debug) console.log(\"_smoothContourInput()\");\n    const valuesNan = <number[]>this._contourData.mergedTileArray;\n    const valuesNoNan = valuesNan.map(function(item) {\n      // TODO: fix for other noDataValues\n      if(isNaN(item)) {\n        item = this.options.nodataValue;\n      }\n      return item;\n    }, this);\n    const valuesNoNanUint = new Uint8Array(Float32Array.from(valuesNoNan).buffer);\n\n    const resultEncodedPixels = this._renderer.renderConvolutionSmooth(\n      valuesNoNanUint,\n      <number>this._contourData.width,\n      <number>this._contourData.height,\n      this.options.contourSmoothInputKernel\n    );\n\n    // TODO fix for nodataValue other than default\n    // Replace nodata with NaN\n    const newArr = [];\n    for(let x = 0; x < resultEncodedPixels.length; x += 1) {\n      let value = resultEncodedPixels[x];\n      if(value === this.options.nodataValue) {\n        value = NaN;\n      }\n      newArr.push(value);\n    }\n    this._contourData.smoothedTileArray = newArr;\n  }\n\n  /**\n   * Calculate new contours and draw on seperate canvas\n   */\n  protected async _calculateAndDrawContours(): Promise<void> {\n    if (this.options.contourType === 'none') return;\n\n    this._map.fire('contourDrawing', {status: true});\n    if (this.options.debug) console.log(\"_calculateAndDrawContours()\");\n    await this._clearContours();\n    this._calculateContours();\n    setTimeout(() => {\n      this._drawContours();\n    }, 50);\n  }\n\n  /**\n   * Add a label to a contour\n   */\n  protected _addlabel(\n      context: CanvasRenderingContext2D,\n      label: ContourLabel,\n      labelColor: string,\n      labelFont: string\n    ): void {\n    context.save();\n    context.translate(label.xy[0], label.xy[1]);\n    context.rotate(label.angle + (Math.cos(label.angle) < 0 ? Math.PI : 0));\n    context.textAlign = \"center\";\n    context.fillStyle = labelColor;\n    context.font = labelFont;\n    context.fillText(label.text, -1, 4);\n    context.restore();\n  }\n\n  /**\n   * Calculate contours\n   */\n  protected _calculateContours(): void {\n    if (this.options.debug) console.log(\"_calculateContours()\");\n\n    let values;\n    if (this.options.contourSmoothInput) {\n      values = <number[]>this._contourData.smoothedTileArray;\n    } else {\n      values = <number[]>this._contourData.mergedTileArray;\n    }\n\n    if (this.options.contourScaleFactor !== 1) {\n      values = values.map(x => x * this.options.contourScaleFactor);\n    }\n\n    if (this.options.debug) {console.log(\"valuesArray\"); console.log(values);}\n\n    let max = <number>d3.max(values, d => d !== this.options.nodataValue ? d : NaN);\n    let min = <number>d3.min(values, d => d !== this.options.nodataValue ? d : NaN);\n    max = Math.ceil(max/this.options.contourInterval) * this.options.contourInterval;\n    min = Math.floor(min/this.options.contourInterval) * this.options.contourInterval;\n    if (this.options.debug) {console.log(\"Contours: max\"); console.log(max);}\n    if (this.options.debug) {console.log(\"Contours: min\"); console.log(min);}\n\n    // countour line values\n    const thresholds = [];\n    for (let i = min; i <= max; i += this.options.contourInterval) {\n      thresholds.push(i);\n    }\n    if (this.options.debug) {console.log(\"Contour thresholds\"); console.log(thresholds);}\n\n    const contour = d3.contours()\n      .size([<number>this._contourData.width, <number>this._contourData.height]);\n\n    contour.thresholds(thresholds);\n    contour.smooth(this.options.contourSmoothLines);\n\n    const contoursGeoData = contour(values);\n    this._contourData.contoursGeoData = contoursGeoData;\n    if (this.options.debug) {console.log(\"contoursGeoData\"); console.log(contoursGeoData);}\n\n    return;\n  }\n\n  /**\n   * Clear contours canvas after turning off contours\n   */\n  protected async _clearContours() {\n    if (this.options.debug) console.log(\"_clearContours()\");\n\n    let contourCanvas: HTMLCanvasElement;\n    let contourCtx: CanvasRenderingContext2D;\n    if (this.options.contourCanvas) {\n      contourCanvas = this.options.contourCanvas;\n      contourCtx = <CanvasRenderingContext2D>contourCanvas.getContext('2d');\n    } else {\n      console.log(\"Error: contourCanvas not specified.\");\n      return;\n    }\n\n    contourCtx.setTransform(1, 0, 0, 1, 0, 0);\n    contourCtx.clearRect(0, 0, <number>this._contourData.width, <number>this._contourData.height);\n    contourCtx.beginPath(); // still necessary?\n  }\n\n  /**\n   * Move contours canvas to fit active tiles\n   */\n  protected async _moveContourCanvas(activeTilesBounds: ActiveTilesBounds) {\n    if (this.options.debug) console.log(\"_moveContourCanvas()\");\n\n    let contourCanvas: HTMLCanvasElement;\n    if (this.options.contourCanvas) {\n      contourCanvas = this.options.contourCanvas;\n    } else {\n      console.log(\"Error: contourCanvas not specified.\");\n      return;\n    }\n\n    let contourPane: HTMLElement;\n    if (this.options.contourPane) {\n      contourPane = this.options.contourPane;\n    } else {\n      console.log(\"Error: contourPane not specified.\");\n      return;\n    }\n\n    const scale = this._map.getZoomScale(this._map.getZoom(), this._level.zoom);\n    const pixelOrigin = this._map.getPixelOrigin();\n    const transformPane = this._level.origin.multiplyBy(scale)\n                        .subtract(pixelOrigin);\n    const activeTilesPos = this._getTilePos(this._keyToTileCoords(`${activeTilesBounds.xMin}:${activeTilesBounds.yMin}:${this._level.zoom}`));\n\n    L.DomUtil.setTransform(contourPane, transformPane, scale);\n    L.DomUtil.setTransform(contourCanvas, activeTilesPos);\n  }\n\n  /**\n   * Draw contours on seperate canvas\n   */\n  protected async _drawContours() {\n    if (this.options.debug) console.log(\"_drawContours()\");\n\n    const width = <number>this._contourData.width;\n    const height = <number>this._contourData.height;\n\n    let contourCanvas: HTMLCanvasElement;\n    let contourCtx: CanvasRenderingContext2D;\n    if (this.options.contourCanvas) {\n      contourCanvas = this.options.contourCanvas;\n      contourCtx = <CanvasRenderingContext2D>contourCanvas.getContext('2d');\n    } else {\n      console.log(\"Error: contourCanvas not specified.\");\n      return;\n    }\n\n    const path = d3.geoPath().context(contourCtx);\n\n    const bathyColor = d3.scaleLinear<string>()\n      .domain(this.options.contourBathyDomain)\n      .range(this.options.contourBathyColors);\n      const hypsoColor = d3.scaleLinear<string>()\n      .domain(this.options.contourHypsoDomain)\n      .range(this.options.contourHypsoColors)\n      .interpolate(d3.interpolateHcl);\n\n    const contoursGeoData = <ContourMultiPolygon[]>this._contourData.contoursGeoData;\n\n    const contourIndexInterval = this.options.contourIndexInterval;\n    const bathyHigh = this.options.contourBathyDomain[this.options.contourBathyDomain.length - 1];\n\n    contourCtx.clearRect(0, 0, width, height);\n    contourCtx.save();\n\n    if (this.options.contourType === 'lines') {\n      contourCtx.lineWidth = this.options.contourLineWeight;\n      contourCtx.strokeStyle = this.options.contourLineColor;\n\n      if (!this.options.contourHypso && !this.options.contourBathy) {\n        contourCtx.beginPath();\n        contoursGeoData.forEach(function (c) {\n          if (contourIndexInterval === 0 || c.value % contourIndexInterval !== 0) path(c);\n        });\n        contourCtx.stroke();\n      } else {\n        contoursGeoData.forEach(function (c) {\n          contourCtx.beginPath();\n          let fill;\n          if (c.value >= bathyHigh || !this.options.contourBathy) {\n            if (this.options.contourHypso) fill = hypsoColor(c.value);\n          } else {\n            if (this.options.contourBathy) fill = bathyColor(c.value);\n          }\n          path(c);\n          if (fill) {\n            contourCtx.fillStyle = fill;\n            contourCtx.fill();\n          }\n          contourCtx.stroke();\n        }, this);\n      }\n\n      // draw thicker index lines, if specified\n      if (this.options.contourIndexInterval !== 0) {\n        if (!this.options.contourIndexLabels) {\n          contourCtx.lineWidth = this.options.contourLineIndexWeight;\n          contourCtx.beginPath();\n          contoursGeoData.forEach(function (c) {\n            if (c.value % contourIndexInterval === 0) path(c);\n          });\n          contourCtx.stroke();\n        } else {\n          // calculate label positions and a mask around each\n          const labels: ContourLabel[] = [];\n          for (const c of contoursGeoData) {\n            const threshold = c.value;\n\n            if (c.value % this.options.contourIndexInterval === 0) {\n              // TODO: New TS errors occuring. Figure out why\n              // Property 'coordinates' does not exist on type 'ContourMultiPolygon'.\n              // @ts-ignore\n              c.coordinates.forEach(polygon =>\n                // @ts-ignore\n                polygon.forEach((ring, j) => {\n                  const p = ring.slice(1, Infinity);\n                  // best number of steps to divide ring.length\n                  const possibilities = d3.range(this.options.contourLabelDistance, this.options.contourLabelDistance * 1.4);\n                  const scores = possibilities.map(d => -((p.length - 1) % d));\n                  const n = possibilities[<number>d3.scan(scores)];\n                  // best starting point: bottom for first rings, top for holes\n                  const start = 1 + (<number>d3.scan(p.map(xy => (j === 0 ? -1 : 1) * xy[1])) % n);\n                  const margin = 10;\n\n                  // @ts-ignore\n                  p.forEach((xy, i) => {\n                    if (\n                      i % n === start &&\n                      xy[0] > margin &&\n                      xy[0] < width - margin &&\n                      xy[1] > margin &&\n                      xy[1] < height - margin\n                    ) {\n                      const a = (i - 2 + p.length) % p.length;\n                      const b = (i + 2) % p.length;\n                      const dx = p[b][0] - p[a][0];\n                      const dy = p[b][1] - p[a][1];\n                      if (dx === 0 && dy === 0) return;\n\n                      labels.push({\n                        threshold,\n                        // @ts-ignore\n                        xy: xy.map(d => 1.0 * d),\n                        angle: Math.atan2(dy, dx),\n                        text: `${c.value}`\n                      });\n                    }\n                  });\n                }, this)\n              , this);\n            }\n\n            // create the mask for this threshold:\n            // the full rectangle minus a ring around each label\n            contourCtx.save();\n            contourCtx.beginPath();\n            contourCtx.moveTo(0, 0);\n            contourCtx.lineTo(width, 0);\n            contourCtx.lineTo(width, height);\n            contourCtx.lineTo(0, height);\n            contourCtx.lineTo(0, 0);\n            for (const label of labels) {\n              for (let i = 0; i < 2 * Math.PI; i += 0.2) {\n                const pos = [Math.cos(i) * 20, -Math.sin(i) * 10];\n                const c = Math.cos(label.angle);\n                const s = Math.sin(label.angle);\n                  contourCtx[i === 0 ? \"moveTo\" : \"lineTo\"](\n                  label.xy[0] + pos[0] * c - pos[1] * s,\n                  label.xy[1] + pos[1] * c + pos[0] * s\n                );\n              }\n            }\n            // contourCtx.stroke(); // uncomment to see the mask\n            contourCtx.clip();\n\n            // draw index contour for this threshold\n            if (c.value % this.options.contourIndexInterval === 0 ) {\n              contourCtx.beginPath();\n              contourCtx.strokeStyle = this.options.contourLineColor;\n              contourCtx.lineWidth = this.options.contourLineIndexWeight;\n              path(c);\n              contourCtx.stroke();\n            }\n\n            // draw labels for this threshold\n            contourCtx.restore();\n            for (const label of labels) {\n              this._addlabel(\n                contourCtx,\n                label,\n                this.options.contourLineColor,\n                this.options.contourLabelFont\n              );\n            }\n          }\n        }\n      }\n    } else if (this.options.contourType === 'illuminated') {\n      contourCtx.lineWidth = this.options.contourIlluminatedShadowSize + 1;\n      contourCtx.shadowBlur = this.options.contourIlluminatedShadowSize;\n      contourCtx.shadowOffsetX = this.options.contourIlluminatedShadowSize;\n      contourCtx.shadowOffsetY = this.options.contourIlluminatedShadowSize;\n\n      contoursGeoData.forEach(function (c) {\n        contourCtx.beginPath();\n        if (c.value >= bathyHigh || !this.options.contourBathy) {\n          contourCtx.shadowColor = this.options.contourIlluminatedShadowColor;\n          contourCtx.strokeStyle = this.options.contourIlluminatedHighlightColor;\n          if (this.options.contourHypso) contourCtx.fillStyle = hypsoColor(c.value);\n        } else {\n          contourCtx.shadowColor = this.options.contourBathyShadowColor;\n          contourCtx.strokeStyle = this.options.contourBathyHighlightColor;\n          if (this.options.contourBathy) contourCtx.fillStyle = bathyColor(c.value);\n        }\n        path(c);  // draw the shape\n        // draw the light stroke first, then the fill with drop shadow\n        // the effect is a light edge on side and dark on the other, giving the raised/illuminated contour appearance\n        contourCtx.stroke();\n        if (this.options.contourHypso || this.options.contourBathy) {\n          contourCtx.fill();\n        }\n      }, this);\n    }\n    contourCtx.restore();\n    this._map.fire('contourDrawing', {status: false});\n  }\n\n  /**\n   * Wraps a handler for a Leaflet MouseEvent, providing an extra property, `pixelValue`, to the\n   * event object.\n   */\n  protected _wrapMouseEventHandler(handler: (event: MouseEvent) => void): (event: L.LeafletMouseEvent) => void {\n    return (event) => {\n      const { latlng } = event;\n      const pixelCoords: L.Point = this._map.project(latlng, this._tileZoom as number).floor();\n      // Find the tile containing the point.\n      const containingTile: GridLayerTile | undefined = this._getTileContainingPoint(pixelCoords);\n      // Find position within tile.\n      const coordsInTile: L.Point | undefined = containingTile && this._getCoordsInTile(containingTile, pixelCoords);\n      // get byteindex for coordsInTile\n\n      let byteIndex: number | undefined;\n      if (coordsInTile !== undefined) {\n        byteIndex = (coordsInTile.y * this._tileSizeAsNumber() + coordsInTile.x) * BYTES_PER_WORD;\n      }\n\n      const pixelValues: PixelValues = {};\n      if (byteIndex === undefined) {\n        pixelValues['pixelValue'] = undefined;\n      } else {\n        // Get pixel value.\n        const { pixelData } = containingTile!.el;\n        pixelValues['pixelValue'] = coordsInTile && this._getPixelValue(pixelData, byteIndex);\n      }\n\n      // Find values from additional layers if specified\n      if (byteIndex !== undefined && this.options.extraPixelLayers >= 1) {\n        const { pixelDataA } = containingTile!.el;\n        pixelValues['pixelValueA'] = coordsInTile && this._getPixelValue(pixelDataA, byteIndex);\n      }\n      if (byteIndex !== undefined && this.options.extraPixelLayers >= 2) {\n        const { pixelDataB } = containingTile!.el;\n        pixelValues['pixelValueB'] = coordsInTile && this._getPixelValue(pixelDataB, byteIndex);\n      }\n      if (byteIndex !== undefined && this.options.extraPixelLayers >= 3) {\n        const { pixelDataC } = containingTile!.el;\n        pixelValues['pixelValueC'] = coordsInTile && this._getPixelValue(pixelDataC, byteIndex);\n      }\n      if (byteIndex !== undefined && this.options.extraPixelLayers >= 4) {\n        const { pixelDataD } = containingTile!.el;\n        pixelValues['pixelValueD'] = coordsInTile && this._getPixelValue(pixelDataD, byteIndex);\n      }\n      if (byteIndex !== undefined && this.options.extraPixelLayers >= 5) {\n        const { pixelDataE } = containingTile!.el;\n        pixelValues['pixelValueE'] = coordsInTile && this._getPixelValue(pixelDataE, byteIndex);\n      }\n      if (byteIndex !== undefined && this.options.extraPixelLayers >= 6) {\n        const { pixelDataF } = containingTile!.el;\n        pixelValues['pixelValueF'] = coordsInTile && this._getPixelValue(pixelDataF, byteIndex);\n      }\n\n      // Call handler with pixel values.\n      handler({ ...event, pixelValues });\n    };\n  }\n\n  /**\n   * Get the tile containing the given point (in pixel coordinates) or `undefined` if no tile\n   * contains the point.\n   */\n  protected _getTileContainingPoint(point: L.Point): GridLayerTile | undefined {\n    const tiles = util.staticCast<TileCache>(this._tiles);\n    return values(tiles).find(tile => {\n      return tile.coords.z === this._tileZoom && this._tileBounds(tile).contains(point);\n    });\n  }\n\n  /**\n   * Compute the bounds (in projected pixel coordinates) of the given tile.\n   */\n  protected _tileBounds(tile: GridLayerTile) {\n    const { x, y } = tile.coords;\n    const tileSize = this._tileSizeAsNumber();\n    const topLeft = L.point(x * tileSize, y * tileSize);\n    const bottomRight = L.point(\n      topLeft.x + (tileSize - 1),\n      topLeft.y + (tileSize - 1),\n    );\n    return L.bounds(topLeft, bottomRight);\n  }\n\n  /**\n   * Convert absolute pixel coordinates to pixel coordinates relative to a given tile's upper left\n   * corner.\n   */\n  protected _getCoordsInTile(tile: GridLayerTile, pixelCoords: L.Point): L.Point {\n    const { x: tileX, y: tileY } = tile.coords;\n    const tileSize = this._tileSizeAsNumber();\n    return L.point(\n      pixelCoords.x - (tileX * tileSize),\n      pixelCoords.y - (tileY * tileSize),\n    );\n  }\n\n  /**\n   * Get the floating-point value of the pixel at the given coordinates in the given tile.\n   * Returns `undefined` if the value is equal to `nodataValue`.\n   * If the value matches a sentinel value, returns the corresponding `SentinelValue` object.\n   */\n  protected _getPixelValue(pixelData: Uint8Array | Float32Array | undefined, byteIndex: number): number | SentinelValue | undefined {\n    if (!pixelData) {\n      return undefined;\n    }\n    const {\n      nodataValue,\n      sentinelValues,\n    } = this.options;\n\n    const tileDataView = new DataView(pixelData.buffer);\n    // To find the byte index:\n    // (1) get the index of the start of the row in which the pixel is located\n    // (2) add to that the column index\n    // (3) multiply by the number of bytes used for each pixel\n\n    // use the byte index and the machine's endianness to obtain the pixel value\n    const pixelValue = tileDataView.getFloat32(byteIndex, littleEndian);\n    // Check for nodata value.\n    if (pixelValue === nodataValue) {\n      return undefined;\n    }\n    // Check for sentinel value.\n    const sentinel = sentinelValues && sentinelValues.find(({ offset }) => offset === pixelValue);\n    // If pixelValue matches no sentinel, just return pixelValue.\n    return sentinel || pixelValue;\n  }\n\n  /**\n   * Calculate how many map units one pixel represents. Used for hillshading.\n   */\n  protected _getPixelScale(): number {\n    let pixelScale = 1;\n    const zoom = this._getZoomForUrl();\n    if (this.options.hsAdvPixelScale === 'auto') {\n      pixelScale = EARTH_CIRCUMFERENCE * Math.abs(\n          Math.cos(this._map.getCenter().lat / 180 * Math.PI\n        )) / Math.pow(2, zoom + 8);\n    } else if (typeof this.options.hsAdvPixelScale === 'number') {\n      pixelScale = this.options.hsAdvPixelScale as unknown as number\n                    / (this._tileSizeAsNumber() * (2**zoom));\n    }\n    return pixelScale;\n  }\n}\n"],"names":["decode","toRGBA8","memoize","util.defineMacros","util.getTexCoordVerticesTriangleStripQuad","util.machineIsLittleEndian","littleEndian","util.getTransformMatrix","isEmpty","flatMap","util.range","L.DomUtil","REGL","reglCommands.getCommonDrawConfiguration","util.createColormapTexture","reglCommands.createDrawTileCommand","reglCommands.createDrawTileHsSimpleCommand","reglCommands.createDrawTileHsPregenCommand","reglCommands.createDrawTileInterpolateColorCommand","reglCommands.createDrawTileInterpolateColorOnlyCommand","reglCommands.createDrawTileInterpolateValueCommand","reglCommands.createCalcTileMultiAnalyze1Command","reglCommands.createCalcTileMultiAnalyze2Command","reglCommands.createCalcTileMultiAnalyze3Command","reglCommands.createCalcTileMultiAnalyze4Command","reglCommands.createCalcTileMultiAnalyze5Command","reglCommands.createCalcTileMultiAnalyze6Command","reglCommands.createDrawResultCommand","reglCommands.createCalcTileDiffCommand","reglCommands.createConvertDemCommand","reglCommands.createConvolutionSmoothCommand","reglCommands.createHsAdvMergeAndScaleTiles","reglCommands.createHsAdvCalcNormals","reglCommands.createHsAdvDirectLightning","reglCommands.createHsAdvSoftShadows","reglCommands.createHsAdvAmbientShadows","reglCommands.createHsAdvFinalColorscale","reglCommands.createHsAdvFinalBaselayer","reglCommands.createHsAdvSmoothCommand","util.PingPong","zipWith","chunk","util.createNoDataTile","util.typedArraysAreEqual","util.getAdjacentTilesTexCoords","util.Timer","vec3","util.delay","L.Util","pickBy","isUndefined","L.GridLayer","mapValues","L.Browser","noop","util.staticCast","values","util.compareTileCoordinates","util.sameTiles","util.fetchPNGData","L.point","L.bounds"],"mappings":"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AC,CAAC,EAAE,CAAC,CAAC,GAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAC,CAAC,EAAE,CAAC,CAAC,GAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAC,CAAC,CAAC;gBACzE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAC,CAAC,EAAE,CAAC,CAAC,GAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAC,CAAC,EAAE,CAAC,CAAC,GAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACtE,CAAC,CAAC,CAAC,GAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,CAAC,CAAC;gBACnE,CAAC,CAAC,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAC,CAAC,EAAE,CAAC,CAAC,GAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAC,CAAC,EAAE,CAAC,CAAC,GAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAC,CAAC,EAAE,CAAC,CAAC,GAAC,CAAC,CAAC;gBAC5E,CAAC,CAAC,CAAC,GAAC,CAAC,EAAE,CAAC,CAAC,GAAC,CAAC,CAAC,EAAE,CAAC,CAAC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"}