{"version":3,"file":"index.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/constants.ts","../src/util.ts","../src/regl-commands.ts","../src/TextureManager.ts","../src/Renderer.ts","../src/index.ts"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import REGL from 'regl';\n\nimport { WebGLColorStop } from './types';\n\nexport const CLEAR_COLOR: REGL.Vec4 = [0, 0, 0, 0];\nexport const DEFAULT_COLOR_STOP: WebGLColorStop = {\n  color: CLEAR_COLOR,\n  offset: 0,\n};\nexport const MAX_TEXTURE_DIMENSION = 1024;\n","import { memoize } from 'lodash-es';\nimport REGL from 'regl';\nimport { decode } from 'upng-js';\n\nimport {\n  Color,\n  Dictionary,\n  TextureBounds,\n  TileCoordinates,\n  WebGLColorStop,\n} from './types';\n\n/**\n * Converts a color scale (or array of SentinelValues) to a format usable by WebGL.\n */\nexport function convertColorScale(colorScale: Color[]): WebGLColorStop[] {\n  return colorScale.map(({ color, offset }) => ({\n    color: colorStringToWebGLFloats(color),\n    offset,\n  }));\n}\n\nconst RGB_REGEX = /^rgb\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)$/;\n\n/**\n * Parses a color string of the form 'rgb({rVal}, {gVal}, {bVal})' and converts the resulting values\n * to a Vec4 consumable by WebGL. Each color value is normalized to the range 0.0 to 1.0.\n */\nexport function colorStringToWebGLFloats(rgb: string): REGL.Vec4 {\n  if (rgb === 'transparent') {\n    return [1, 1, 1, 0];\n  }\n  const match = rgb.match(RGB_REGEX);\n  if (match === null) {\n    throw new Error(`'${rgb}' is not a valid RGB color expression.`);\n  }\n  const [, r, g, b] = match;\n  return [+r / 255, +g / 255, +b / 255, 1];\n}\n\n/**\n * Create an object representing the elements and properties of a WebGL struct array to be passed\n * to Regl. Each property is a \"dynamic prop\" in Regl parlance. That is, it's a function that is\n * evaluated when the drawing function is called. When each dynamic prop (function) is evaluated,\n * it's passed as second argument a `props` object (similar to `props` in a React component).\n */\nexport function bindStructArray<\n  Struct extends Dictionary<any>,\n  Props extends Dictionary<any[]> = {}\n>(\n  structPropertyNames: Array<keyof Struct>,\n  defaultValue: Struct,\n  maxArrayLength: number,\n  glslIdentifier: string,\n  propName: keyof Props = (glslIdentifier as keyof Props),\n) {\n  const output = {} as Dictionary<any>;\n  for (let i = 0; i < maxArrayLength; ++i) {\n    for (const key of structPropertyNames) {\n      output[`${glslIdentifier}[${i}].${key}`] = (_: any, props: Props) => {\n        const inputArray = props[propName];\n        return (\n          i < inputArray.length\n          ? inputArray[i][key]\n          : defaultValue[key]\n        );\n      };\n    }\n  }\n  return output;\n}\n\nexport function machineIsLittleEndian() {\n  const uint8Array = new Uint8Array([0xAA, 0xBB]);\n  const uint16array = new Uint16Array(uint8Array.buffer);\n  return uint16array[0] === 0xBBAA;\n}\n\n/**\n * Cribbed from Python's built-in `range` function.\n */\nexport function range(...args: number[]) {\n  if (args.length === 1) {\n    const [until] = args;\n    return new Array(until).fill(undefined).map((_, i) => i);\n  } else {\n    const [from, until, step = 1] = args;\n    if (step === 0) {\n      throw new Error('Argument step must be nonzero.');\n    }\n    const output = [];\n    for (let val = from; (step > 0) ? val < until : val > until; val += step) {\n      output.push(val);\n    }\n    return output;\n  }\n}\n\nexport async function fetchPNGData(url: string, nodataValue: number, tileDimension: number): Promise<Uint8Array> {\n  return new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", url, true);\n    xhr.responseType = \"arraybuffer\";\n    xhr.addEventListener('load', () => {\n      resolve(xhr.response);\n    });\n    xhr.addEventListener('error', reject);\n    xhr.send(null);\n  }).then((data: ArrayBuffer) => {\n    return new Uint8Array(decode(data).data);\n  }).catch(() => createNoDataTile(nodataValue, tileDimension));\n}\n\n/**\n * The matrix output by this function transforms coordinates in pixel space within the drawing\n * buffer (with upper left corner (0, 0) and lower right corner (buffer width, buffer height))\n * to WebGL \"clipspace\", with upper left corner (-1, 1) and lower right corner (1, -1).\n */\nexport function getTransformMatrix(\n  drawingBufferWidth: number,\n  drawingBufferHeight: number,\n): REGL.Mat4 {\n  // To scale horizontally, divide by width (in pixels) and multiply by 2, because width is 2 in clipspace.\n  const sx = 2 / drawingBufferWidth;\n  // To scale vertically, divide by height (in pixels) and multiply by -2, because height is 2 in clipspace,\n  // and the direction is flipped (positive is up, negative is down).\n  const sy = -2 / drawingBufferHeight;\n  // We translate by -1 horizontally (so the range 0 to 2 maps to the range -1 to 1).\n  const tx = -1;\n  // We translate by 1 horizontally (so the range -2 to 0 maps to the range -1 to 1).\n  const ty = 1;\n  // Matrix must be in column-major order for WebGL.\n  return [\n    sx, 0,  0, 0,\n    0,  sy, 0, 0,\n    0,  0,  1, 0,\n    tx, ty, 0, 1,\n  ];\n}\n\n/**\n * From a TextureBounds object, this function generates the four vertices WebGL needs to draw the\n * corresponding rectangle (as two conjoined triangles generated with the triangle strip primitive).\n */\nexport function getTexCoordVertices(textureBounds: TextureBounds): REGL.Vec2[] {\n  const [{ x: left, y: top }, { x: right, y: bottom }] = textureBounds;\n  return [\n    [left,  top   ],\n    [right, top   ],\n    [left,  bottom],\n    [right, bottom],\n  ];\n}\n\n/**\n * Produces a Promise that resolves when the desired `duration` has expired.\n */\nexport function Timer(duration: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, duration));\n}\n\n/**\n * Useful for sorting TileCoordinates objects.\n */\nexport function compareTileCoordinates(a: TileCoordinates, b: TileCoordinates): number {\n  const z = a.z - b.z;\n  const x = a.x - b.x;\n  const y = a.y - b.y;\n  if (z !== 0) {\n    // First compare z values.\n    return z;\n  } else if (x !== 0) {\n    // If z values are the same, compare x values.\n    return x;\n  } else {\n    // If x values are the same, compare y values.\n    return y;\n  }\n}\n\n/**\n * Determines whether two arrays of TileCoordinates are the same.\n */\nexport function sameTiles(a: TileCoordinates[], b: TileCoordinates[]): boolean {\n  return (\n    // arrays are of the same length\n    a.length === b.length\n    // and corresponding elements have the same tile coordinates\n    && a.every((tileA, index) => compareTileCoordinates(tileA, b[index]) === 0)\n  );\n}\n\nexport const createNoDataTile: any = memoize((nodataValue: number, tileDimension: number = 256): Uint8Array => {\n  // Create a float 32 array.\n  const float32Tile = new Float32Array(tileDimension * tileDimension);\n  // Fill the tile array with the no data value\n  float32Tile.fill(nodataValue);\n  // return the no data tile.\n  return new Uint8Array(float32Tile.buffer);\n});\n\n/**\n * Force TypeScript to interpret value `val` as type `T`.\n */\nexport function staticCast<T>(val: any): T {\n  return val as T;\n}\n\n/**\n * Add one or more macro definitions to a GLSL source string.\n */\nexport function defineMacros(src: string, macros: { [key: string]: any }): string {\n  const defs = Object.keys(macros).map((key) => `#define ${key} ${macros[key]}\\n`).join('');\n  return `${defs}\\n${src}`;\n}\n\n/**\n * Ping-pong technique. Render to a destination framebuffer,\n * then use it as a source texture in our next iteration.\n * Then swap them and continue. Used for advanced hillshading.\n */\nexport function PingPong(regl: REGL.Regl, opts: REGL.FramebufferOptions) {\n  const fbos = [regl.framebuffer(opts), regl.framebuffer(opts)];\n\n  let index = 0;\n\n  function ping() {\n    return fbos[index];\n  }\n\n  function pong() {\n    return fbos[1 - index];\n  }\n\n  function swap() {\n    index = 1 - index;\n  }\n\n  return {\n    ping,\n    pong,\n    swap\n  };\n}\n","import REGL from 'regl';\n\nimport vertDouble from './shaders/double.vs';\nimport vertSingle from './shaders/single.vs';\nimport vertMulti3 from './shaders/multi3.vs';\nimport vertMulti4 from './shaders/multi4.vs';\nimport vertMulti5 from './shaders/multi5.vs';\nimport vertMulti6 from './shaders/multi6.vs';\nimport vertSmooth from './shaders/smooth.vs';\n\nimport fragInterpolateColor from './shaders/interpolateColor.fs';\nimport fragInterpolateColorOnly from './shaders/interpolateColorOnly.fs';\nimport fragInterpolateValue from './shaders/interpolateValue.fs';\nimport fragSingle from './shaders/single.fs';\nimport fragHsPregen from './shaders/hillshading/hsPregen.fs';\nimport fragMulti1Calc from './shaders/multiAnalyze1Calc.fs';\nimport fragMulti1Draw from './shaders/multiAnalyze1Draw.fs';\nimport fragMulti2Calc from './shaders/multiAnalyze2Calc.fs';\nimport fragMulti2Draw from './shaders/multiAnalyze2Draw.fs';\nimport fragMulti3Calc from './shaders/multiAnalyze3Calc.fs';\nimport fragMulti3Draw from './shaders/multiAnalyze3Draw.fs';\nimport fragMulti4Calc from './shaders/multiAnalyze4Calc.fs';\nimport fragMulti4Draw from './shaders/multiAnalyze4Draw.fs';\nimport fragMulti5Calc from './shaders/multiAnalyze5Calc.fs';\nimport fragMulti5Draw from './shaders/multiAnalyze5Draw.fs';\nimport fragMulti6Calc from './shaders/multiAnalyze6Calc.fs';\nimport fragMulti6Draw from './shaders/multiAnalyze6Draw.fs';\nimport fragDiffCalc from './shaders/diffCalc.fs';\nimport fragDiffDraw from './shaders/diffDraw.fs';\nimport fragConvolutionSmooth from './shaders/convolutionSmooth.fs';\n\nimport {\n  DEFAULT_COLOR_STOP,\n} from './constants';\nimport {\n  Dictionary,\n  DrawCommon,\n  DrawTile,\n  DrawTileHsSimple,\n  DrawTileHsPregen,\n  DrawTileInterpolateColor,\n  DrawTileInterpolateColorOnly,\n  DrawTileInterpolateValue,\n  CalcTileMultiAnalyze1,\n  DrawTileMultiAnalyze1,\n  CalcTileMultiAnalyze2,\n  DrawTileMultiAnalyze2,\n  CalcTileMultiAnalyze3,\n  DrawTileMultiAnalyze3,\n  CalcTileMultiAnalyze4,\n  DrawTileMultiAnalyze4,\n  CalcTileMultiAnalyze5,\n  DrawTileMultiAnalyze5,\n  CalcTileMultiAnalyze6,\n  DrawTileMultiAnalyze6,\n  CalcTileDiff,\n  DrawTileDiff,\n  ConvolutionSmooth,\n} from './types';\nimport * as util from './util';\n\nconst littleEndian = util.machineIsLittleEndian();\n\nconst bindStructArray = util.bindStructArray.bind(null, ['color', 'offset'], DEFAULT_COLOR_STOP);\n\n/**\n * The object generated by this function should be merged into the DrawConfig for each Regl\n * DrawCommand in the application.\n */\nexport function getColorStructArray(\n  colorscaleName: string,\n  scaleMaxLength: number,\n  sentinelName: string,\n  sentinelMaxLength: number,\n): Dictionary<any> {\n  return {\n      colorScaleUniforms: bindStructArray(scaleMaxLength, colorscaleName),\n      sentinelValuesUniforms: bindStructArray(sentinelMaxLength, sentinelName),\n      fragMacros: {\n        SCALE_MAX_LENGTH: scaleMaxLength,\n        SENTINEL_MAX_LENGTH: sentinelMaxLength,\n      },\n  };\n}\n\n/**\n * The object generated by this function should be merged into the DrawConfig for each Regl\n * command in the application.\n */\nexport function getCommonDrawConfiguration(\n  tileSize: number,\n  nodataValue: number,\n): REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props> {\n  return {\n    uniforms: {\n      nodataValue,\n      littleEndian,\n      transformMatrix: ({ viewportWidth, viewportHeight }) => (\n        util.getTransformMatrix(viewportWidth, viewportHeight)\n      ),\n    },\n    attributes: {\n      position: (_, { canvasCoordinates }) => {\n        const [left, top] = canvasCoordinates;\n        const [right, bottom] = [left + tileSize, top + tileSize];\n        return [\n          [left,  top   ],\n          [right, top   ],\n          [left,  bottom],\n          [right, bottom],\n        ];\n      },\n    },\n    // We don't need the depth buffer for 2D drawing. Leaving it enabled (and failing to clear it\n    // between draw calls) results in visual artifacts.\n    depth: { enable: false },\n    primitive: 'triangle strip',\n    count: 4,\n    viewport: (_, { canvasSize: [width, height] }) => ({ width, height }),\n  };\n}\n\n// Hillshading (simple) parameters\nconst deg2rad = 0.017453292519943295;\nconst slopeFactor = 0.0333334;\n\n/**\n * The resulting Regl DrawCommand is used to draw a single tile. The fragment shader decodes the\n * Float32 value of a pixel and colorizes it with the given color scale (and/or sentinel values).\n */\nexport function createDrawTileCommand(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n  commonColors: Dictionary<any>,\n) {\n  return regl<DrawTile.Uniforms, DrawTile.Attributes, DrawTile.Props>({\n    ...commonConfig,\n    vert: vertSingle,\n    frag: util.defineMacros(fragSingle, commonColors.fragMacros),\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      ...commonColors.colorScaleUniforms,\n      ...commonColors.sentinelValuesUniforms,\n      colorScaleLength: (_, { colorScale }) => colorScale.length,\n      sentinelValuesLength: (_, { sentinelValues }) => sentinelValues.length,\n      texture: (_, { texture }) => texture,\n      enableSimpleHillshade: (_, { enableSimpleHillshade }) => enableSimpleHillshade,\n      offset: 0,\n      azimuth: 0,\n      altitude: 0,\n      slopescale: 0,\n      deg2rad: deg2rad,\n      slopeFactor: slopeFactor,\n      tileSize: 0,\n      textureSize: 0,\n      textureBounds: [0, 0, 0, 0],\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoord: (_, { textureBounds }) => util.getTexCoordVertices(textureBounds),\n    },\n  });\n}\n\n/**\n * The resulting Regl DrawCommand is used to draw a single tile. The fragment shader decodes the\n * Float32 value of a pixel and colorizes it with the given color scale (and/or sentinel values).\n * Hillshading is applied with a simple and fast algorithm\n */\nexport function createDrawTileHsSimpleCommand(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n  commonColors: Dictionary<any>,\n) {\n  return regl<DrawTileHsSimple.Uniforms, DrawTileHsSimple.Attributes, DrawTileHsSimple.Props>({\n    ...commonConfig,\n    vert: vertSingle,\n    frag: util.defineMacros(fragSingle, commonColors.fragMacros),\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      ...commonColors.colorScaleUniforms,\n      ...commonColors.sentinelValuesUniforms,\n      colorScaleLength: (_, { colorScale }) => colorScale.length,\n      sentinelValuesLength: (_, { sentinelValues }) => sentinelValues.length,\n      texture: (_, { texture }) => texture,\n      enableSimpleHillshade: (_, { enableSimpleHillshade }) => enableSimpleHillshade,\n      azimuth: (_, { azimuth }) => azimuth,\n      altitude: (_, { altitude }) => altitude,\n      slopescale: (_, { slopescale }) => slopescale,\n      deg2rad: deg2rad,\n      slopeFactor: slopeFactor,\n      offset: (_, { offset }) => offset,\n      textureBounds: (_, { textureBounds }) => {\n        return [\n          [textureBounds[0].x],\n          [textureBounds[0].y],\n          [textureBounds[1].x],\n          [textureBounds[1].y]\n        ]\n      },\n      textureSize: (_, { textureSize }) => textureSize,\n      tileSize: (_, { tileSize }) => tileSize,\n      // u_slopescale: 0.5 * slopeFactor,\n      // u_azimuthrad: azimuth * deg2rad,\n      // u_altituderad: altitude * deg2rad,\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoord: (_, { textureBounds }) => util.getTexCoordVertices(textureBounds),\n    },\n  });\n}\n\n/**\n * The resulting Regl DrawCommand is used to draw a single tile. The fragment shader decodes the\n * Float32 value of a pixel and colorizes it with the given color scale (and/or sentinel values).\n * Hillshading is applied from a pre-generated texture\n */\nexport function createDrawTileHsPregenCommand(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n  commonColors: Dictionary<any>,\n) {\n  return regl<DrawTileHsPregen.Uniforms, DrawTileHsPregen.Attributes, DrawTileHsPregen.Props>({\n    ...commonConfig,\n    vert: vertDouble,\n    frag: util.defineMacros(fragHsPregen, commonColors.fragMacros),\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      ...commonColors.colorScaleUniforms,\n      ...commonColors.sentinelValuesUniforms,\n      colorScaleLength: (_, { colorScale }) => colorScale.length,\n      sentinelValuesLength: (_, { sentinelValues }) => sentinelValues.length,\n      texture: (_, { texture }) => texture,\n      hillshadePregenTexture: (_, { hillshadePregenTexture }) => hillshadePregenTexture,\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoordA: (_, { textureBounds }) => util.getTexCoordVertices(textureBounds),\n      texCoordB: (_, { textureBoundsHs }) => util.getTexCoordVertices(textureBoundsHs),\n    },\n  });\n}\n\n/**\n * The DrawCommand output by this function interpolates, for each pixel, between two values, one\n * from `textureA` and one from `textureB`. The same color scale / sentinel values are applied to\n * both.\n */\nexport function createDrawTileInterpolateValueCommand(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n  commonColors: Dictionary<any>,\n) {\n  return regl<\n    DrawTileInterpolateValue.Uniforms,\n    DrawTileInterpolateValue.Attributes,\n    DrawTileInterpolateValue.Props\n  >({\n    ...commonConfig,\n    vert: vertDouble,\n    frag: util.defineMacros(fragInterpolateValue, commonColors.fragMacros),\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      ...commonColors.colorScaleUniforms,\n      ...commonColors.sentinelValuesUniforms,\n      colorScaleLength: (_, { colorScale }) => colorScale.length,\n      sentinelValuesLength: (_, { sentinelValues }) => sentinelValues.length,\n      textureA: (_, { textureA }) => textureA,\n      textureB: (_, { textureB }) => textureB,\n      interpolationFraction: (_, { interpolationFraction }) => interpolationFraction,\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoordA: (_, { textureBoundsA }) => util.getTexCoordVertices(textureBoundsA),\n      texCoordB: (_, { textureBoundsB }) => util.getTexCoordVertices(textureBoundsB),\n    },\n  });\n}\n\n\nexport function createDrawTileMultiAnalyze1Command(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n  commonColors: Dictionary<any>,\n) {\n  return regl<\n    DrawTileMultiAnalyze1.Uniforms,\n    DrawTileMultiAnalyze1.Attributes,\n    DrawTileMultiAnalyze1.Props\n  >({\n    ...commonConfig,\n    vert: vertSingle,\n    frag: util.defineMacros(fragMulti1Draw, commonColors.fragMacros),\n    depth:  {\n      enable: false\n    },\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      ...commonColors.colorScaleUniforms,\n      ...commonColors.sentinelValuesUniforms,\n      colorScaleLength: (_, { colorScale }) => colorScale.length,\n      sentinelValuesLength: (_, { sentinelValues }) => sentinelValues.length,\n      filterLowA: (_, { filterLowA }) => filterLowA,\n      filterHighA: (_, { filterHighA }) => filterHighA,\n      multiplierA: (_, { multiplierA }) => multiplierA,\n      textureA: (_, { textureA }) => textureA,\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoord: (_, { textureBoundsA }) => util.getTexCoordVertices(textureBoundsA),\n    },\n  });\n}\n\nexport function createCalcTileMultiAnalyze1Command(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n) {\n  return regl<\n    CalcTileMultiAnalyze1.Uniforms,\n    CalcTileMultiAnalyze1.Attributes,\n    CalcTileMultiAnalyze1.Props\n  >({\n    ...commonConfig,\n    vert: vertSingle,\n    frag: fragMulti1Calc,\n    depth: {\n      enable: false\n    },\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      filterLowA: (_, { filterLowA }) => filterLowA,\n      filterHighA: (_, { filterHighA }) => filterHighA,\n      multiplierA: (_, { multiplierA }) => multiplierA,\n      textureA: (_, { textureA }) => textureA,\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoord: (_, { textureBoundsA }) => util.getTexCoordVertices(textureBoundsA),\n    },\n  });\n}\n\nexport function createDrawTileMultiAnalyze2Command(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n  commonColors: Dictionary<any>,\n) {\n  return regl<\n    DrawTileMultiAnalyze2.Uniforms,\n    DrawTileMultiAnalyze2.Attributes,\n    DrawTileMultiAnalyze2.Props\n  >({\n    ...commonConfig,\n    vert: vertDouble,\n    frag: util.defineMacros(fragMulti2Draw, commonColors.fragMacros),\n    depth:  {\n      enable: false\n    },\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      ...commonColors.colorScaleUniforms,\n      ...commonColors.sentinelValuesUniforms,\n      colorScaleLength: (_, { colorScale }) => colorScale.length,\n      sentinelValuesLength: (_, { sentinelValues }) => sentinelValues.length,\n      filterLowA: (_, { filterLowA }) => filterLowA,\n      filterHighA: (_, { filterHighA }) => filterHighA,\n      filterLowB: (_, { filterLowB }) => filterLowB,\n      filterHighB: (_, { filterHighB }) => filterHighB,\n      multiplierA: (_, { multiplierA }) => multiplierA,\n      multiplierB: (_, { multiplierB }) => multiplierB,\n      textureA: (_, { textureA }) => textureA,\n      textureB: (_, { textureB }) => textureB,\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoordA: (_, { textureBoundsA }) => util.getTexCoordVertices(textureBoundsA),\n      texCoordB: (_, { textureBoundsB }) => util.getTexCoordVertices(textureBoundsB),\n    },\n  });\n}\n\nexport function createCalcTileMultiAnalyze2Command(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n) {\n  return regl<\n    CalcTileMultiAnalyze2.Uniforms,\n    CalcTileMultiAnalyze2.Attributes,\n    CalcTileMultiAnalyze2.Props\n  >({\n    ...commonConfig,\n    vert: vertDouble,\n    frag: fragMulti2Calc,\n    depth:  {\n      enable: false\n    },\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      filterLowA: (_, { filterLowA }) => filterLowA,\n      filterHighA: (_, { filterHighA }) => filterHighA,\n      filterLowB: (_, { filterLowB }) => filterLowB,\n      filterHighB: (_, { filterHighB }) => filterHighB,\n      multiplierA: (_, { multiplierA }) => multiplierA,\n      multiplierB: (_, { multiplierB }) => multiplierB,\n      textureA: (_, { textureA }) => textureA,\n      textureB: (_, { textureB }) => textureB,\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoordA: (_, { textureBoundsA }) => util.getTexCoordVertices(textureBoundsA),\n      texCoordB: (_, { textureBoundsB }) => util.getTexCoordVertices(textureBoundsB),\n    },\n  });\n}\n\nexport function createDrawTileMultiAnalyze3Command(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n  commonColors: Dictionary<any>,\n) {\n  return regl<\n    DrawTileMultiAnalyze3.Uniforms,\n    DrawTileMultiAnalyze3.Attributes,\n    DrawTileMultiAnalyze3.Props\n  >({\n    ...commonConfig,\n    vert: vertMulti3,\n    frag: util.defineMacros(fragMulti3Draw, commonColors.fragMacros),\n    depth:  {\n      enable: false\n    },\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      ...commonColors.colorScaleUniforms,\n      ...commonColors.sentinelValuesUniforms,\n      colorScaleLength: (_, { colorScale }) => colorScale.length,\n      sentinelValuesLength: (_, { sentinelValues }) => sentinelValues.length,\n      filterLowA: (_, { filterLowA }) => filterLowA,\n      filterHighA: (_, { filterHighA }) => filterHighA,\n      filterLowB: (_, { filterLowB }) => filterLowB,\n      filterHighB: (_, { filterHighB }) => filterHighB,\n      filterLowC: (_, { filterLowC }) => filterLowC,\n      filterHighC: (_, { filterHighC }) => filterHighC,\n      multiplierA: (_, { multiplierA }) => multiplierA,\n      multiplierB: (_, { multiplierB }) => multiplierB,\n      multiplierC: (_, { multiplierC }) => multiplierC,\n      textureA: (_, { textureA }) => textureA,\n      textureB: (_, { textureB }) => textureB,\n      textureC: (_, { textureC }) => textureC,\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoordA: (_, { textureBoundsA }) => util.getTexCoordVertices(textureBoundsA),\n      texCoordB: (_, { textureBoundsB }) => util.getTexCoordVertices(textureBoundsB),\n      texCoordC: (_, { textureBoundsC }) => util.getTexCoordVertices(textureBoundsC),\n    },\n  });\n}\n\nexport function createCalcTileMultiAnalyze3Command(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n) {\n  return regl<\n    CalcTileMultiAnalyze3.Uniforms,\n    CalcTileMultiAnalyze3.Attributes,\n    CalcTileMultiAnalyze3.Props\n  >({\n    ...commonConfig,\n    vert: vertMulti3,\n    frag: fragMulti3Calc,\n    depth:  {\n      enable: false\n    },\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      filterLowA: (_, { filterLowA }) => filterLowA,\n      filterHighA: (_, { filterHighA }) => filterHighA,\n      filterLowB: (_, { filterLowB }) => filterLowB,\n      filterHighB: (_, { filterHighB }) => filterHighB,\n      filterLowC: (_, { filterLowC }) => filterLowC,\n      filterHighC: (_, { filterHighC }) => filterHighC,\n      multiplierA: (_, { multiplierA }) => multiplierA,\n      multiplierB: (_, { multiplierB }) => multiplierB,\n      multiplierC: (_, { multiplierC }) => multiplierC,\n      textureA: (_, { textureA }) => textureA,\n      textureB: (_, { textureB }) => textureB,\n      textureC: (_, { textureC }) => textureC,\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoordA: (_, { textureBoundsA }) => util.getTexCoordVertices(textureBoundsA),\n      texCoordB: (_, { textureBoundsB }) => util.getTexCoordVertices(textureBoundsB),\n      texCoordC: (_, { textureBoundsC }) => util.getTexCoordVertices(textureBoundsC),\n    },\n  });\n}\n\nexport function createDrawTileMultiAnalyze4Command(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n  commonColors: Dictionary<any>,\n) {\n  return regl<\n    DrawTileMultiAnalyze4.Uniforms,\n    DrawTileMultiAnalyze4.Attributes,\n    DrawTileMultiAnalyze4.Props\n  >({\n    ...commonConfig,\n    vert: vertMulti4,\n    frag: util.defineMacros(fragMulti4Draw, commonColors.fragMacros),\n    depth:  {\n      enable: false\n    },\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      ...commonColors.colorScaleUniforms,\n      ...commonColors.sentinelValuesUniforms,\n      colorScaleLength: (_, { colorScale }) => colorScale.length,\n      sentinelValuesLength: (_, { sentinelValues }) => sentinelValues.length,\n      filterLowA: (_, { filterLowA }) => filterLowA,\n      filterHighA: (_, { filterHighA }) => filterHighA,\n      filterLowB: (_, { filterLowB }) => filterLowB,\n      filterHighB: (_, { filterHighB }) => filterHighB,\n      filterLowC: (_, { filterLowC }) => filterLowC,\n      filterHighC: (_, { filterHighC }) => filterHighC,\n      filterLowD: (_, { filterLowD }) => filterLowD,\n      filterHighD: (_, { filterHighD }) => filterHighD,\n      multiplierA: (_, { multiplierA }) => multiplierA,\n      multiplierB: (_, { multiplierB }) => multiplierB,\n      multiplierC: (_, { multiplierC }) => multiplierC,\n      multiplierD: (_, { multiplierD }) => multiplierD,\n      textureA: (_, { textureA }) => textureA,\n      textureB: (_, { textureB }) => textureB,\n      textureC: (_, { textureC }) => textureC,\n      textureD: (_, { textureD }) => textureD,\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoordA: (_, { textureBoundsA }) => util.getTexCoordVertices(textureBoundsA),\n      texCoordB: (_, { textureBoundsB }) => util.getTexCoordVertices(textureBoundsB),\n      texCoordC: (_, { textureBoundsC }) => util.getTexCoordVertices(textureBoundsC),\n      texCoordD: (_, { textureBoundsD }) => util.getTexCoordVertices(textureBoundsD),\n    },\n  });\n}\n\nexport function createCalcTileMultiAnalyze4Command(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n) {\n  return regl<\n    CalcTileMultiAnalyze4.Uniforms,\n    CalcTileMultiAnalyze4.Attributes,\n    CalcTileMultiAnalyze4.Props\n  >({\n    ...commonConfig,\n    vert: vertMulti4,\n    frag: fragMulti4Calc,\n    depth: {\n      enable: false\n    },\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      filterLowA: (_, { filterLowA }) => filterLowA,\n      filterHighA: (_, { filterHighA }) => filterHighA,\n      filterLowB: (_, { filterLowB }) => filterLowB,\n      filterHighB: (_, { filterHighB }) => filterHighB,\n      filterLowC: (_, { filterLowC }) => filterLowC,\n      filterHighC: (_, { filterHighC }) => filterHighC,\n      filterLowD: (_, { filterLowD }) => filterLowD,\n      filterHighD: (_, { filterHighD }) => filterHighD,\n      multiplierA: (_, { multiplierA }) => multiplierA,\n      multiplierB: (_, { multiplierB }) => multiplierB,\n      multiplierC: (_, { multiplierC }) => multiplierC,\n      multiplierD: (_, { multiplierD }) => multiplierD,\n      textureA: (_, { textureA }) => textureA,\n      textureB: (_, { textureB }) => textureB,\n      textureC: (_, { textureC }) => textureC,\n      textureD: (_, { textureD }) => textureD,\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoordA: (_, { textureBoundsA }) => util.getTexCoordVertices(textureBoundsA),\n      texCoordB: (_, { textureBoundsB }) => util.getTexCoordVertices(textureBoundsB),\n      texCoordC: (_, { textureBoundsC }) => util.getTexCoordVertices(textureBoundsC),\n      texCoordD: (_, { textureBoundsD }) => util.getTexCoordVertices(textureBoundsD),\n    },\n  });\n}\n\nexport function createDrawTileMultiAnalyze5Command(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n  commonColors: Dictionary<any>,\n) {\n  return regl<\n    DrawTileMultiAnalyze5.Uniforms,\n    DrawTileMultiAnalyze5.Attributes,\n    DrawTileMultiAnalyze5.Props\n  >({\n    ...commonConfig,\n    vert: vertMulti5,\n    frag: util.defineMacros(fragMulti5Draw, commonColors.fragMacros),\n    depth: {\n      enable: false\n    },\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      ...commonColors.colorScaleUniforms,\n      ...commonColors.sentinelValuesUniforms,\n      colorScaleLength: (_, { colorScale }) => colorScale.length,\n      sentinelValuesLength: (_, { sentinelValues }) => sentinelValues.length,\n      filterLowA: (_, { filterLowA }) => filterLowA,\n      filterHighA: (_, { filterHighA }) => filterHighA,\n      filterLowB: (_, { filterLowB }) => filterLowB,\n      filterHighB: (_, { filterHighB }) => filterHighB,\n      filterLowC: (_, { filterLowC }) => filterLowC,\n      filterHighC: (_, { filterHighC }) => filterHighC,\n      filterLowD: (_, { filterLowD }) => filterLowD,\n      filterHighD: (_, { filterHighD }) => filterHighD,\n      filterLowE: (_, { filterLowE }) => filterLowE,\n      filterHighE: (_, { filterHighE }) => filterHighE,\n      multiplierA: (_, { multiplierA }) => multiplierA,\n      multiplierB: (_, { multiplierB }) => multiplierB,\n      multiplierC: (_, { multiplierC }) => multiplierC,\n      multiplierD: (_, { multiplierD }) => multiplierD,\n      multiplierE: (_, { multiplierE }) => multiplierE,\n      textureA: (_, { textureA }) => textureA,\n      textureB: (_, { textureB }) => textureB,\n      textureC: (_, { textureC }) => textureC,\n      textureD: (_, { textureD }) => textureD,\n      textureE: (_, { textureE }) => textureE,\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoordA: (_, { textureBoundsA }) => util.getTexCoordVertices(textureBoundsA),\n      texCoordB: (_, { textureBoundsB }) => util.getTexCoordVertices(textureBoundsB),\n      texCoordC: (_, { textureBoundsC }) => util.getTexCoordVertices(textureBoundsC),\n      texCoordD: (_, { textureBoundsD }) => util.getTexCoordVertices(textureBoundsD),\n      texCoordE: (_, { textureBoundsE }) => util.getTexCoordVertices(textureBoundsE),\n    },\n  });\n}\n\nexport function createCalcTileMultiAnalyze5Command(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n) {\n  return regl<\n    CalcTileMultiAnalyze5.Uniforms,\n    CalcTileMultiAnalyze5.Attributes,\n    CalcTileMultiAnalyze5.Props\n  >({\n    ...commonConfig,\n    vert: vertMulti5,\n    frag: fragMulti5Calc,\n    depth: {\n      enable: false\n    },\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      filterLowA: (_, { filterLowA }) => filterLowA,\n      filterHighA: (_, { filterHighA }) => filterHighA,\n      filterLowB: (_, { filterLowB }) => filterLowB,\n      filterHighB: (_, { filterHighB }) => filterHighB,\n      filterLowC: (_, { filterLowC }) => filterLowC,\n      filterHighC: (_, { filterHighC }) => filterHighC,\n      filterLowD: (_, { filterLowD }) => filterLowD,\n      filterHighD: (_, { filterHighD }) => filterHighD,\n      filterLowE: (_, { filterLowE }) => filterLowE,\n      filterHighE: (_, { filterHighE }) => filterHighE,\n      multiplierA: (_, { multiplierA }) => multiplierA,\n      multiplierB: (_, { multiplierB }) => multiplierB,\n      multiplierC: (_, { multiplierC }) => multiplierC,\n      multiplierD: (_, { multiplierD }) => multiplierD,\n      multiplierE: (_, { multiplierE }) => multiplierE,\n      textureA: (_, { textureA }) => textureA,\n      textureB: (_, { textureB }) => textureB,\n      textureC: (_, { textureC }) => textureC,\n      textureD: (_, { textureD }) => textureD,\n      textureE: (_, { textureE }) => textureE,\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoordA: (_, { textureBoundsA }) => util.getTexCoordVertices(textureBoundsA),\n      texCoordB: (_, { textureBoundsB }) => util.getTexCoordVertices(textureBoundsB),\n      texCoordC: (_, { textureBoundsC }) => util.getTexCoordVertices(textureBoundsC),\n      texCoordD: (_, { textureBoundsD }) => util.getTexCoordVertices(textureBoundsD),\n      texCoordE: (_, { textureBoundsE }) => util.getTexCoordVertices(textureBoundsE),\n    },\n  });\n}\n\n\nexport function createDrawTileMultiAnalyze6Command(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n  commonColors: Dictionary<any>,\n) {\n  return regl<\n    DrawTileMultiAnalyze6.Uniforms,\n    DrawTileMultiAnalyze6.Attributes,\n    DrawTileMultiAnalyze6.Props\n  >({\n    ...commonConfig,\n    vert: vertMulti6,\n    frag: util.defineMacros(fragMulti6Draw, commonColors.fragMacros),\n    depth: {\n      enable: false\n    },\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      ...commonColors.colorScaleUniforms,\n      ...commonColors.sentinelValuesUniforms,\n      colorScaleLength: (_, { colorScale }) => colorScale.length,\n      sentinelValuesLength: (_, { sentinelValues }) => sentinelValues.length,\n      filterLowA: (_, { filterLowA }) => filterLowA,\n      filterHighA: (_, { filterHighA }) => filterHighA,\n      filterLowB: (_, { filterLowB }) => filterLowB,\n      filterHighB: (_, { filterHighB }) => filterHighB,\n      filterLowC: (_, { filterLowC }) => filterLowC,\n      filterHighC: (_, { filterHighC }) => filterHighC,\n      filterLowD: (_, { filterLowD }) => filterLowD,\n      filterHighD: (_, { filterHighD }) => filterHighD,\n      filterLowE: (_, { filterLowE }) => filterLowE,\n      filterHighE: (_, { filterHighE }) => filterHighE,\n      filterLowF: (_, { filterLowF }) => filterLowF,\n      filterHighF: (_, { filterHighF }) => filterHighF,\n      multiplierA: (_, { multiplierA }) => multiplierA,\n      multiplierB: (_, { multiplierB }) => multiplierB,\n      multiplierC: (_, { multiplierC }) => multiplierC,\n      multiplierD: (_, { multiplierD }) => multiplierD,\n      multiplierE: (_, { multiplierE }) => multiplierE,\n      multiplierF: (_, { multiplierF }) => multiplierF,\n      textureA: (_, { textureA }) => textureA,\n      textureB: (_, { textureB }) => textureB,\n      textureC: (_, { textureC }) => textureC,\n      textureD: (_, { textureD }) => textureD,\n      textureE: (_, { textureE }) => textureE,\n      textureF: (_, { textureF }) => textureF,\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoordA: (_, { textureBoundsA }) => util.getTexCoordVertices(textureBoundsA),\n      texCoordB: (_, { textureBoundsB }) => util.getTexCoordVertices(textureBoundsB),\n      texCoordC: (_, { textureBoundsC }) => util.getTexCoordVertices(textureBoundsC),\n      texCoordD: (_, { textureBoundsD }) => util.getTexCoordVertices(textureBoundsD),\n      texCoordE: (_, { textureBoundsE }) => util.getTexCoordVertices(textureBoundsE),\n      texCoordF: (_, { textureBoundsF }) => util.getTexCoordVertices(textureBoundsF)\n    },\n  });\n}\n\nexport function createCalcTileMultiAnalyze6Command(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n) {\n  return regl<\n    CalcTileMultiAnalyze6.Uniforms,\n    CalcTileMultiAnalyze6.Attributes,\n    CalcTileMultiAnalyze6.Props\n  >({\n    ...commonConfig,\n    vert: vertMulti6,\n    frag: fragMulti6Calc,\n    depth:  {\n      enable: false\n    },\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      filterLowA: (_, { filterLowA }) => filterLowA,\n      filterHighA: (_, { filterHighA }) => filterHighA,\n      filterLowB: (_, { filterLowB }) => filterLowB,\n      filterHighB: (_, { filterHighB }) => filterHighB,\n      filterLowC: (_, { filterLowC }) => filterLowC,\n      filterHighC: (_, { filterHighC }) => filterHighC,\n      filterLowD: (_, { filterLowD }) => filterLowD,\n      filterHighD: (_, { filterHighD }) => filterHighD,\n      filterLowE: (_, { filterLowE }) => filterLowE,\n      filterHighE: (_, { filterHighE }) => filterHighE,\n      filterLowF: (_, { filterLowF }) => filterLowF,\n      filterHighF: (_, { filterHighF }) => filterHighF,\n      multiplierA: (_, { multiplierA }) => multiplierA,\n      multiplierB: (_, { multiplierB }) => multiplierB,\n      multiplierC: (_, { multiplierC }) => multiplierC,\n      multiplierD: (_, { multiplierD }) => multiplierD,\n      multiplierE: (_, { multiplierE }) => multiplierE,\n      multiplierF: (_, { multiplierF }) => multiplierF,\n      textureA: (_, { textureA }) => textureA,\n      textureB: (_, { textureB }) => textureB,\n      textureC: (_, { textureC }) => textureC,\n      textureD: (_, { textureD }) => textureD,\n      textureE: (_, { textureE }) => textureE,\n      textureF: (_, { textureF }) => textureF,\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoordA: (_, { textureBoundsA }) => util.getTexCoordVertices(textureBoundsA),\n      texCoordB: (_, { textureBoundsB }) => util.getTexCoordVertices(textureBoundsB),\n      texCoordC: (_, { textureBoundsC }) => util.getTexCoordVertices(textureBoundsC),\n      texCoordD: (_, { textureBoundsD }) => util.getTexCoordVertices(textureBoundsD),\n      texCoordE: (_, { textureBoundsE }) => util.getTexCoordVertices(textureBoundsE),\n      texCoordF: (_, { textureBoundsF }) => util.getTexCoordVertices(textureBoundsF)\n    },\n  });\n}\n\nexport function createCalcTileDiffCommand(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n) {\n  return regl<\n    CalcTileDiff.Uniforms,\n    CalcTileDiff.Attributes,\n    CalcTileDiff.Props\n  >({\n    ...commonConfig,\n    vert: vertDouble,\n    frag: fragDiffCalc,\n    depth:  {\n      enable: false\n    },\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      textureA: (_, { textureA }) => textureA,\n      textureB: (_, { textureB }) => textureB,\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoordA: (_, { textureBoundsA }) => util.getTexCoordVertices(textureBoundsA),\n      texCoordB: (_, { textureBoundsB }) => util.getTexCoordVertices(textureBoundsB),\n    },\n  });\n}\n\nexport function createDrawTileDiffCommand(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n  commonColors: Dictionary<any>,\n) {\n  return regl<\n    DrawTileDiff.Uniforms,\n    DrawTileDiff.Attributes,\n    DrawTileDiff.Props\n  >({\n    ...commonConfig,\n    vert: vertDouble,\n    frag: util.defineMacros(fragDiffDraw, commonColors.fragMacros),\n    depth:  {\n      enable: false\n    },\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      ...commonColors.colorScaleUniforms,\n      ...commonColors.sentinelValuesUniforms,\n      colorScaleLength: (_, { colorScale }) => colorScale.length,\n      sentinelValuesLength: (_, { sentinelValues }) => sentinelValues.length,\n      textureA: regl.prop<DrawTileDiff.Props, 'textureA'>(\"textureA\"),\n      textureB: regl.prop<DrawTileDiff.Props, 'textureB'>(\"textureB\"),\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoordA: (_, { textureBoundsA }) => util.getTexCoordVertices(textureBoundsA),\n      texCoordB: (_, { textureBoundsB }) => util.getTexCoordVertices(textureBoundsB),\n    },\n  });\n}\n\n/**\n * The behavior of this DrawCommand is similar to the one above, except that pixels from `textureA`\n * are colorized with one color scale / set of sentinel values, while pixels from `textureB` use a\n * different color scale / set of sentinel values.\n */\nexport function createDrawTileInterpolateColorCommand(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n  colorsA: Dictionary<any>,\n  colorsB: Dictionary<any>,\n) {\n  return regl<\n    DrawTileInterpolateColor.Uniforms,\n    DrawTileInterpolateColor.Attributes,\n    DrawTileInterpolateColor.Props\n  >({\n    ...commonConfig,\n    vert: vertDouble,\n    frag: util.defineMacros(fragInterpolateColor, colorsA.fragMacros),\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      ...colorsA.colorScaleUniforms,\n      ...colorsA.sentinelValuesUniforms,\n      ...colorsB.colorScaleUniforms,\n      ...colorsB.sentinelValuesUniforms,\n      colorScaleLengthA: (_, { colorScaleA }) => colorScaleA.length,\n      colorScaleLengthB: (_, { colorScaleB }) => colorScaleB.length,\n      sentinelValuesLengthA: (_, { sentinelValuesA }) => sentinelValuesA.length,\n      sentinelValuesLengthB: (_, { sentinelValuesB }) => sentinelValuesB.length,\n      textureA: (_, { textureA }) => textureA,\n      textureB: (_, { textureB }) => textureB,\n      interpolationFraction: (_, { interpolationFraction }) => interpolationFraction,\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoordA: (_, { textureBoundsA }) => util.getTexCoordVertices(textureBoundsA),\n      texCoordB: (_, { textureBoundsB }) => util.getTexCoordVertices(textureBoundsB),\n    },\n  });\n}\n\n/**\n * The behavior of this DrawCommand is similar to the one above, except that the pixel values\n * are the same. Only the colorscale changes.\n */\nexport function createDrawTileInterpolateColorOnlyCommand(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n  colorsA: Dictionary<any>,\n  colorsB: Dictionary<any>,\n) {\n  return regl<\n    DrawTileInterpolateColorOnly.Uniforms,\n    DrawTileInterpolateColorOnly.Attributes,\n    DrawTileInterpolateColorOnly.Props\n  >({\n    ...commonConfig,\n    vert: vertSingle,\n    frag: util.defineMacros(fragInterpolateColorOnly, colorsA.fragMacros),\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      ...colorsA.colorScaleUniforms,\n      ...colorsA.sentinelValuesUniforms,\n      ...colorsB.colorScaleUniforms,\n      ...colorsB.sentinelValuesUniforms,\n      colorScaleLengthA: (_, { colorScaleA }) => colorScaleA.length,\n      colorScaleLengthB: (_, { colorScaleB }) => colorScaleB.length,\n      sentinelValuesLengthA: (_, { sentinelValuesA }) => sentinelValuesA.length,\n      sentinelValuesLengthB: (_, { sentinelValuesB }) => sentinelValuesB.length,\n      texture: (_, { texture }) => texture,\n      interpolationFraction: (_, { interpolationFraction }) => interpolationFraction,\n    },\n    attributes: {\n      ...commonConfig.attributes as DrawCommon.Attributes,\n      texCoord: (_, { textureBounds }) => util.getTexCoordVertices(textureBounds),\n    },\n  });\n}\n\n/**\n * The resulting Regl DrawCommand is for using a convolution kernel to smooth the input data.\n * Currently hard-coded the kernel and positions in the shader to reduce number of uniforms.\n */\nexport function createConvolutionSmoothCommand(\n  regl: REGL.Regl,\n  commonConfig: REGL.DrawConfig<DrawCommon.Uniforms, DrawCommon.Attributes, DrawCommon.Props>,\n) {\n  return regl<ConvolutionSmooth.Uniforms, ConvolutionSmooth.Attributes, ConvolutionSmooth.Props>({\n    vert: vertSmooth,\n    frag: fragConvolutionSmooth,\n    uniforms: {\n      ...commonConfig.uniforms as DrawCommon.Uniforms,\n      texture: regl.prop<ConvolutionSmooth.Props, 'texture'>(\"texture\"),\n      textureSize: regl.prop<ConvolutionSmooth.Props, 'textureSize'>(\"textureSize\"),\n      kernelSize: regl.prop<ConvolutionSmooth.Props, 'kernelSize'>(\"kernelSize\"),\n    },\n    attributes: {\n      texCoord: [0, 1, 1, 1, 0, 0, 1, 0],\n      position: [-1, 1, 1, 1, -1, -1, 1, -1],\n    },\n    depth: { enable: false },\n    primitive: 'triangle strip',\n    count: 4,\n  });\n}\n","import {\n  flatMap,\n  isEmpty,\n} from 'lodash-es';\nimport REGL from 'regl';\n\nimport {\n  TextureCoordinates,\n  TileCoordinates,\n} from './types';\nimport * as util from './util';\n\nexport default class TextureManager {\n  // width/height of a tile in pixels\n  readonly tileSize: number;\n  // dimension of the texture in number of tiles\n  readonly tilesAcross: number;\n  // dimension of the texture in number of pixels\n  readonly pixelsAcross: number;\n  // number of tiles that will fit in the texture\n  readonly tileCapacity: number;\n  // the Regl Texture2D object\n  readonly texture: REGL.Texture2D;\n\n  // map of tile coordinates to texture coordinates\n  // (key is hash string of tile coordinates: 'x:y:z')\n  protected contents: Map<string, TextureCoordinates>;\n  // texture coordinates positions that are currently available\n  protected available: TextureCoordinates[];\n\n  constructor(\n    regl: REGL.Regl,\n    tileSize: number,\n    maxTextureDimension: number,\n    flipY: boolean,\n  ) {\n    const tilesAcross = Math.floor(maxTextureDimension / tileSize);\n    const pixelsAcross = tilesAcross * tileSize;\n    const tileCapacity = tilesAcross * tilesAcross;\n\n    const texture = regl.texture({\n      width: pixelsAcross,\n      height: pixelsAcross,\n      flipY: flipY,\n      format: 'rgba',\n      type: 'uint8',\n    });\n\n    const contents = new Map<string, TextureCoordinates>();\n    const available = this.allTextureCoordinates(tilesAcross, tileSize);\n\n    Object.assign(this, {\n      tileSize,\n      tilesAcross,\n      pixelsAcross,\n      tileCapacity,\n      texture,\n      contents,\n      available,\n    });\n  }\n\n  addTile(\n    tileCoordinates: TileCoordinates,\n    data: ArrayBufferView,\n  ): [TextureCoordinates, TextureCoordinates] {\n    const {\n      available,\n      contents,\n      texture,\n      tileSize,\n    } = this;\n\n    const hashKey = this.hashTileCoordinates(tileCoordinates);\n    if (contents.has(hashKey)) {\n      const textureCoordinates = contents.get(hashKey) as TextureCoordinates;\n      // We use a least-recently-used eviction policy for the tile cache. Map iterators are\n      // convenient for this, because they return entries in insertion order. But for this to work\n      // as expected, every time we access a tile, we need to reinsert it so that it moves to the\n      // end of that insertion-order list.\n      contents.delete(hashKey);\n      contents.set(hashKey, textureCoordinates);\n      return this.formatOutputTextureCoordinates(textureCoordinates);\n    }\n    if (isEmpty(available)) {\n      // Get the first key inserted. Map.prototype.keys() produces an iterable iterator over the keys\n      // in the order of insertion, so we can just use the iterator's first value.\n      const firstInsertedKey = contents.keys().next().value;\n      this.removeByHashKey(firstInsertedKey);\n    }\n    // remove from list of available positions\n    const textureCoordinates = available.pop() as TextureCoordinates;\n    // store mapping of tile to texture coordinates\n    contents.set(hashKey, textureCoordinates);\n\n    const { x: textureX, y: textureY } = textureCoordinates;\n    texture.subimage({\n      data,\n      width: tileSize,\n      height: tileSize,\n    }, textureX, textureY);\n\n    return this.formatOutputTextureCoordinates(textureCoordinates);\n  }\n\n  removeTile(tileCoordinates: TileCoordinates) {\n    this.removeByHashKey(this.hashTileCoordinates(tileCoordinates));\n  }\n\n  clearTiles() {\n    for (const hashKey of Array.from(this.contents.keys())) {\n      this.removeByHashKey(hashKey);\n    }\n  }\n\n  destroy() {\n    this.texture.destroy();\n  }\n\n  protected removeByHashKey(hashKey: string) {\n    // This method only removes the key. The pixel data remains in the texture.\n    if (this.contents.has(hashKey)) {\n      const textureCoordinates = this.contents.get(hashKey) as TextureCoordinates;\n      this.contents.delete(hashKey);\n      this.available.push(textureCoordinates);\n    }\n  }\n\n  protected formatOutputTextureCoordinates(\n    textureCoordinates: TextureCoordinates,\n  ): [TextureCoordinates, TextureCoordinates] {\n    const { x, y } = textureCoordinates;\n    const { pixelsAcross, tileSize } = this;\n    return [\n      {\n        x: x / pixelsAcross,\n        y: y / pixelsAcross,\n      },\n      {\n        x: (x + tileSize) / pixelsAcross,\n        y: (y + tileSize) / pixelsAcross,\n      },\n    ];\n  }\n\n  protected hashTileCoordinates({ x, y, z }: TileCoordinates): string {\n    return `${x}:${y}:${z}`;\n  }\n\n  protected allTextureCoordinates(tilesAcross: number, tileSize: number): TextureCoordinates[] {\n    return flatMap(util.range(tilesAcross), x =>\n      util.range(tilesAcross).map(y => ({\n        x: x * tileSize,\n        y: y * tileSize,\n      })),\n    );\n  }\n}\n","import * as L from 'leaflet';\nimport {\n  chunk,\n  flatMap,\n  zipWith,\n} from 'lodash-es';\nimport REGL, { Framebuffer2D } from 'regl';\n\nimport { CLEAR_COLOR, MAX_TEXTURE_DIMENSION } from './constants';\n\nimport * as commands from './regl-commands';\nimport TextureManager from './TextureManager';\nimport {\n  DrawTile,\n  DrawTileHsSimple,\n  DrawTileHsPregen,\n  DrawTileInterpolateColor,\n  DrawTileInterpolateColorOnly,\n  DrawTileInterpolateValue,\n  CalcTileMultiAnalyze1,\n  DrawTileMultiAnalyze1,\n  CalcTileMultiAnalyze2,\n  DrawTileMultiAnalyze2,\n  CalcTileMultiAnalyze3,\n  DrawTileMultiAnalyze3,\n  CalcTileMultiAnalyze4,\n  DrawTileMultiAnalyze4,\n  CalcTileMultiAnalyze5,\n  DrawTileMultiAnalyze5,\n  CalcTileMultiAnalyze6,\n  DrawTileMultiAnalyze6,\n  DrawTileDiff,\n  CalcTileDiff,\n  ConvolutionSmooth,\n  Pair,\n  calcResult,\n  TileCoordinates,\n  TileDatum,\n  HillshadeOptions,\n} from './types';\nimport * as util from './util';\n\nimport {\n  Color,\n  SentinelValue,\n} from './types';\n\nexport default class Renderer {\n  canvas: HTMLCanvasElement;\n  regl: REGL.Regl;\n  textureManager: TextureManager;\n  textureManagerA: TextureManager;\n  textureManagerB: TextureManager;\n  textureManagerC: TextureManager;\n  textureManagerD: TextureManager;\n  textureManagerE: TextureManager;\n  textureManagerF: TextureManager;\n  textureManagerHillshade: TextureManager;\n  tileSize: number;\n  fboTile: Framebuffer2D;\n  maxTextureDimension: number;\n\n  // Regl draw commands.\n  drawTile: REGL.DrawCommand<REGL.DefaultContext, DrawTile.Props>;\n  drawTileHsSimple: REGL.DrawCommand<REGL.DefaultContext, DrawTileHsSimple.Props>;\n  drawTileHsPregen: REGL.DrawCommand<REGL.DefaultContext, DrawTileHsPregen.Props>;\n  drawTileInterpolateColor: REGL.DrawCommand<REGL.DefaultContext, DrawTileInterpolateColor.Props>;\n  drawTileInterpolateColorOnly: REGL.DrawCommand<REGL.DefaultContext, DrawTileInterpolateColorOnly.Props>;\n  drawTileInterpolateValue: REGL.DrawCommand<REGL.DefaultContext, DrawTileInterpolateValue.Props>;\n  calcTileDiff: REGL.DrawCommand<REGL.DefaultContext, CalcTileDiff.Props>;\n  drawTileDiff: REGL.DrawCommand<REGL.DefaultContext, DrawTileDiff.Props>;\n  calcTileMultiAnalyze1: REGL.DrawCommand<REGL.DefaultContext, CalcTileMultiAnalyze1.Props>;\n  drawTileMultiAnalyze1: REGL.DrawCommand<REGL.DefaultContext, DrawTileMultiAnalyze1.Props>;\n  calcTileMultiAnalyze2: REGL.DrawCommand<REGL.DefaultContext, CalcTileMultiAnalyze2.Props>;\n  drawTileMultiAnalyze2: REGL.DrawCommand<REGL.DefaultContext, DrawTileMultiAnalyze2.Props>;\n  calcTileMultiAnalyze3: REGL.DrawCommand<REGL.DefaultContext, CalcTileMultiAnalyze3.Props>;\n  drawTileMultiAnalyze3: REGL.DrawCommand<REGL.DefaultContext, DrawTileMultiAnalyze3.Props>;\n  calcTileMultiAnalyze4: REGL.DrawCommand<REGL.DefaultContext, CalcTileMultiAnalyze4.Props>;\n  drawTileMultiAnalyze4: REGL.DrawCommand<REGL.DefaultContext, DrawTileMultiAnalyze4.Props>;\n  calcTileMultiAnalyze5: REGL.DrawCommand<REGL.DefaultContext, CalcTileMultiAnalyze5.Props>;\n  drawTileMultiAnalyze5: REGL.DrawCommand<REGL.DefaultContext, DrawTileMultiAnalyze5.Props>;\n  calcTileMultiAnalyze6: REGL.DrawCommand<REGL.DefaultContext, CalcTileMultiAnalyze6.Props>;\n  drawTileMultiAnalyze6: REGL.DrawCommand<REGL.DefaultContext, DrawTileMultiAnalyze6.Props>;\n  convolutionSmooth: REGL.DrawCommand<REGL.DefaultContext, ConvolutionSmooth.Props>;\n\n  constructor(\n    tileSize: number,\n    nodataValue: number,\n    colorscaleMaxLength: number,\n    sentinelMaxLength: number,\n  ) {\n    const canvas = L.DomUtil.create('canvas') as HTMLCanvasElement;\n    let maxTextureDimension = MAX_TEXTURE_DIMENSION;\n\n    const regl = REGL({\n      canvas: canvas,\n      // profile: true,\n      onDone: function (err: Error, regl: REGL.Regl) {\n        if (err) {\n          console.log(err)\n          return\n        } else {\n          // maxTextureDimension = this.findMaxTextureDimension()\n          //TODO: fix maxTextureSize logic\n          if (regl.limits.maxTextureSize > 2048) {\n            maxTextureDimension = 2048;\n          } else if (regl.limits.maxTextureSize > 4096) {\n            maxTextureDimension = 4096;\n          };\n        }\n        // TODO: Improve software rendering detection\n        if (regl.limits.maxFragmentUniforms === 261) {\n          console.log(\"Software rendering detected and not supported with GLOperations plugin. If you have a GPU, check if drivers are installed ok?\");\n        }\n      }\n    });\n\n    const commonDrawConfig = commands.getCommonDrawConfiguration(tileSize, nodataValue);\n    const commonDrawColors = commands.getColorStructArray('colorScale', colorscaleMaxLength, 'sentinelValues', sentinelMaxLength);\n    const interpolateDrawColorsA = commands.getColorStructArray('colorScaleA', colorscaleMaxLength, 'sentinelValuesA', sentinelMaxLength);\n    const interpolateDrawColorsB = commands.getColorStructArray('colorScaleB', colorscaleMaxLength, 'sentinelValuesB', sentinelMaxLength);\n\n    // Assign object \"instance\" properties.\n    Object.assign(this, {\n      canvas,\n      regl,\n      tileSize,\n      maxTextureDimension: maxTextureDimension,\n      textureManager: new TextureManager(regl, tileSize, maxTextureDimension, false),\n      textureManagerA: new TextureManager(regl, tileSize, maxTextureDimension, false),\n      textureManagerB: new TextureManager(regl, tileSize, maxTextureDimension, false),\n      textureManagerC: new TextureManager(regl, tileSize, maxTextureDimension, false),\n      textureManagerD: new TextureManager(regl, tileSize, maxTextureDimension, false),\n      textureManagerE: new TextureManager(regl, tileSize, maxTextureDimension, false),\n      textureManagerF: new TextureManager(regl, tileSize, maxTextureDimension, false),\n      textureManagerHillshade: new TextureManager(regl, tileSize, maxTextureDimension, false),\n      drawTile: commands.createDrawTileCommand(regl, commonDrawConfig, commonDrawColors),\n      drawTileHsSimple: commands.createDrawTileHsSimpleCommand(regl, commonDrawConfig, commonDrawColors),\n      drawTileHsPregen: commands.createDrawTileHsPregenCommand(regl, commonDrawConfig, commonDrawColors),\n      drawTileInterpolateColor: commands.createDrawTileInterpolateColorCommand(regl, commonDrawConfig, interpolateDrawColorsA, interpolateDrawColorsB),\n      drawTileInterpolateColorOnly: commands.createDrawTileInterpolateColorOnlyCommand(regl, commonDrawConfig, interpolateDrawColorsA, interpolateDrawColorsB),\n      drawTileInterpolateValue: commands.createDrawTileInterpolateValueCommand(regl, commonDrawConfig, commonDrawColors),\n      calcTileMultiAnalyze1: commands.createCalcTileMultiAnalyze1Command(regl, commonDrawConfig),\n      drawTileMultiAnalyze1: commands.createDrawTileMultiAnalyze1Command(regl, commonDrawConfig, commonDrawColors),\n      calcTileMultiAnalyze2: commands.createCalcTileMultiAnalyze2Command(regl, commonDrawConfig),\n      drawTileMultiAnalyze2: commands.createDrawTileMultiAnalyze2Command(regl, commonDrawConfig, commonDrawColors),\n      calcTileMultiAnalyze3: commands.createCalcTileMultiAnalyze3Command(regl, commonDrawConfig),\n      drawTileMultiAnalyze3: commands.createDrawTileMultiAnalyze3Command(regl, commonDrawConfig, commonDrawColors),\n      calcTileMultiAnalyze4: commands.createCalcTileMultiAnalyze4Command(regl, commonDrawConfig),\n      drawTileMultiAnalyze4: commands.createDrawTileMultiAnalyze4Command(regl, commonDrawConfig, commonDrawColors),\n      calcTileMultiAnalyze5: commands.createCalcTileMultiAnalyze5Command(regl, commonDrawConfig),\n      drawTileMultiAnalyze5: commands.createDrawTileMultiAnalyze5Command(regl, commonDrawConfig, commonDrawColors),\n      calcTileMultiAnalyze6: commands.createCalcTileMultiAnalyze6Command(regl, commonDrawConfig),\n      drawTileMultiAnalyze6: commands.createDrawTileMultiAnalyze6Command(regl, commonDrawConfig, commonDrawColors),\n      drawTileDiff: commands.createDrawTileDiffCommand(regl, commonDrawConfig, commonDrawColors),\n      calcTileDiff: commands.createCalcTileDiffCommand(regl, commonDrawConfig),\n      convolutionSmooth: commands.createConvolutionSmoothCommand(regl, commonDrawConfig),\n    });\n  }\n\n  setMaxTextureDimension(newMaxTextureDimension: number) {\n    const {\n      textureManager,\n      tileSize,\n      regl,\n    } = this;\n\n    textureManager.destroy();\n\n    Object.assign(this, {\n      maxTextureDimension: newMaxTextureDimension,\n      textureManager: new TextureManager(regl, tileSize, newMaxTextureDimension, false),\n    });\n  }\n\n  findMaxTextureDimension() {\n    // TODO: fix maxTextureSize logic\n    const {\n      regl,\n    } = this;\n\n    let maxTextureDimension = MAX_TEXTURE_DIMENSION;\n\n    if (regl.limits.maxTextureSize > 2048) {\n      maxTextureDimension = 2048;\n    } else if (regl.limits.maxTextureSize > 4096) {\n      maxTextureDimension = 4096;\n    };\n\n    return maxTextureDimension\n  }\n\n  renderTile(\n    { coords, pixelData }: TileDatum,\n    colorScale: Color[],\n    sentinelValues: SentinelValue[],\n    _hillshadeOptions: HillshadeOptions,\n    zoom: number = 0,\n  ): Pair<number> {\n    const {\n      regl,\n      textureManager,\n      tileSize,\n    } = this;\n    this.setCanvasSize(tileSize, tileSize);\n    // Add image to the texture and retrieve its texture coordinates.\n    const textureBounds = textureManager.addTile(coords, pixelData);\n\n    regl.clear({ color: CLEAR_COLOR });\n\n    let zoomdelta = _hillshadeOptions.hsSimpleZoomdelta || 0;\n\n    let offset_pixels = Math.max(0.5, 2 ** (zoom + zoomdelta) / 2048);\n    let offset_texcoords = offset_pixels / textureManager.texture.width;\n\n    if (_hillshadeOptions.hillshadeType === 'none') {\n      this.drawTile({\n        colorScale: util.convertColorScale(colorScale),\n        sentinelValues: util.convertColorScale(sentinelValues),\n        canvasSize: [tileSize, tileSize],\n        canvasCoordinates: [0, 0],\n        textureBounds,\n        texture: textureManager.texture,\n        enableSimpleHillshade: false,\n      });\n    } else if (_hillshadeOptions.hillshadeType === 'simple') {\n      this.drawTileHsSimple({\n        colorScale: util.convertColorScale(colorScale),\n        sentinelValues: util.convertColorScale(sentinelValues),\n        canvasSize: [tileSize, tileSize],\n        canvasCoordinates: [0, 0],\n        textureBounds: textureBounds,\n        texture: textureManager.texture,\n        textureSize: textureManager.texture.width,\n        tileSize: tileSize,\n        offset: offset_texcoords,\n        enableSimpleHillshade: true,\n        // elevationScale: _hillshadeOptions.hsElevationScale,\n        azimuth: _hillshadeOptions.hsSimpleAzimuth,\n        altitude: _hillshadeOptions.hsSimpleAltitude,\n        slopescale: _hillshadeOptions.hsSimpleSlopescale,\n      });\n    }\n\n    // Since the tile will fill the whole canvas, the offset is simply [0, 0].\n    return [0, 0];\n  }\n\n  renderTileHsPregen(\n    tileDatum: TileDatum,\n    tileDatumHs: TileDatum,\n    colorScale: Color[],\n    sentinelValues: SentinelValue[],\n    _hillshadeOptions: HillshadeOptions,\n  ): Pair<number> {\n    const {\n      regl,\n      textureManager,\n      textureManagerHillshade,\n      tileSize,\n    } = this;\n    this.setCanvasSize(tileSize, tileSize);\n    // Add image to the texture and retrieve its texture coordinates.\n    const textureBounds = textureManager.addTile(tileDatum.coords, tileDatum.pixelData);\n    const textureBoundsHs = textureManagerHillshade.addTile(tileDatumHs.coords, tileDatumHs.pixelData);\n\n    regl.clear({ color: CLEAR_COLOR });\n\n    this.drawTileHsPregen({\n      colorScale: util.convertColorScale(colorScale),\n      sentinelValues: util.convertColorScale(sentinelValues),\n      canvasSize: [tileSize, tileSize],\n      canvasCoordinates: [0, 0],\n      textureBounds: textureBounds,\n      textureBoundsHs: textureBoundsHs,\n      texture: textureManager.texture,\n      hillshadePregenTexture: textureManagerHillshade.texture,\n    });\n\n    // Since the tile will fill the whole canvas, the offset is simply [0, 0].\n    return [0, 0];\n  }\n\n\n  // TODO: Render to a fbo using a texture with flipY and this should not be necessary?\n  flipReadPixelsFloat(\n    width: number,\n    height: number,\n    pixels: Float32Array,\n  ) {\n    let halfHeight = height / 2 | 0;  // the | 0 keeps the result an int\n    let bytesPerRow = width * 4;\n\n    // make a temp buffer to hold one row\n    var temp = new Float32Array(width * 4);\n    for (var y = 0; y < halfHeight; ++y) {\n      var topOffset = y * bytesPerRow;\n      var bottomOffset = (height - y - 1) * bytesPerRow;\n      // make copy of a row on the top half\n      temp.set(pixels.subarray(topOffset, topOffset + bytesPerRow));\n      // copy a row from the bottom half to the top\n      pixels.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);\n      // copy the copy of the top half row to the bottom half\n      pixels.set(temp, bottomOffset);\n    }\n    return pixels\n  }\n\n  /**\n   * WebGL uses [0,0] coordinate at top, not bottom. Use this function to flip readPixel results.\n   */\n  flipReadPixelsUint(\n    width: number,\n    height: number,\n    pixels: Uint8Array,\n  ) {\n    let halfHeight = height / 2 | 0;  // the | 0 keeps the result an int\n    let bytesPerRow = width * 4;\n\n    // make a temp buffer to hold one row\n    var temp = new Uint8Array(width * 4);\n    for (var y = 0; y < halfHeight; ++y) {\n      var topOffset = y * bytesPerRow;\n      var bottomOffset = (height - y - 1) * bytesPerRow;\n      // make copy of a row on the top half\n      temp.set(pixels.subarray(topOffset, topOffset + bytesPerRow));\n      // copy a row from the bottom half to the top\n      pixels.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);\n      // copy the copy of the top half row to the bottom half\n      pixels.set(temp, bottomOffset);\n    }\n    return pixels\n  }\n\n  renderTileDiff(\n    tileDatumA: TileDatum,\n    tileDatumB: TileDatum,\n    colorScale: Color[],\n    sentinelValues: SentinelValue[],\n  ): calcResult {\n    const {\n      regl,\n      textureManagerA,\n      textureManagerB,\n      tileSize,\n    } = this;\n    this.setCanvasSize(tileSize, tileSize);\n\n    // Add image to the texture and retrieve its texture coordinates.\n    const textureBoundsA = textureManagerA.addTile(tileDatumA.coords, tileDatumA.pixelData);\n    const textureBoundsB = textureManagerB.addTile(tileDatumB.coords, tileDatumB.pixelData);\n\n    let fboTile = regl.framebuffer({\n      width: tileSize,\n      height: tileSize,\n      depth: false,\n      colorFormat: 'rgba',\n      colorType: 'uint8',\n    });\n\n    let resultEncodedPixels = new Uint8Array(tileSize * tileSize * 4);\n\n    fboTile.use(() => {\n      this.calcTileDiff({\n        canvasSize: [tileSize, tileSize],\n        canvasCoordinates: [0, 0],\n        textureA: textureManagerA.texture,\n        textureB: textureManagerB.texture,\n        textureBoundsA: textureBoundsA,\n        textureBoundsB: textureBoundsB,\n      });\n\n      // Get encoded floatValues to use for mouseEvents\n      regl.read({data: resultEncodedPixels});\n    });\n\n    // Flip readPixels result\n    resultEncodedPixels = this.flipReadPixelsUint(tileSize, tileSize, resultEncodedPixels);\n\n    this.drawTileDiff({\n      colorScale: util.convertColorScale(colorScale),\n      sentinelValues: util.convertColorScale(sentinelValues),\n      canvasSize: [tileSize, tileSize],\n      canvasCoordinates: [0, 0],\n      textureA: textureManagerA.texture,\n      textureB: textureManagerB.texture,\n      textureBoundsA: textureBoundsA,\n      textureBoundsB: textureBoundsB,\n    });\n\n    fboTile.destroy();\n\n    // Since the tile will fill the whole canvas, the offset is simply [0, 0].\n    return [0, 0, resultEncodedPixels];\n  }\n\n  renderConvolutionSmooth(\n    inputData: Uint8Array,\n    width: number,\n    height: number,\n    kernelSize: number,\n  ): Float32Array {\n    const {\n      regl,\n    } = this;\n    this.setCanvasSize(width, height);\n\n    const texture = regl.texture({\n      data: inputData,\n      width: width,\n      height: height,\n      flipY: false,\n    });\n\n    let fboSmoothed = regl.framebuffer({\n      width: width,\n      height: height,\n      depth: false,\n      colorFormat: 'rgba',\n      colorType: 'uint8'\n    });\n\n    let resultEncodedPixels: Uint8Array | Float32Array = new Uint8Array(width * height * 4);\n\n    fboSmoothed.use(() => {\n      this.convolutionSmooth({\n        texture: texture,\n        //TODO: case with width != height?\n        textureSize: width,\n        kernelSize: kernelSize,\n      });\n      regl.read({data: resultEncodedPixels});\n    });\n\n    resultEncodedPixels = new Float32Array(resultEncodedPixels.buffer);\n\n    fboSmoothed.destroy();\n\n    return resultEncodedPixels;\n  }\n\n  renderTileMulti1(\n    tileDatumA: TileDatum,\n    colorScale: Color[],\n    sentinelValues: SentinelValue[],\n    filterLowA: number,\n    filterHighA: number,\n    multiplierA: number,\n  ): calcResult {\n    const {\n      regl,\n      textureManagerA,\n      tileSize,\n    } = this;\n\n    this.setCanvasSize(tileSize, tileSize);\n\n    // Add image to the texture and retrieve its texture coordinates.\n    const textureBoundsA = textureManagerA.addTile(tileDatumA.coords, tileDatumA.pixelData);\n\n    let fboTile = regl.framebuffer({\n      width: tileSize,\n      height: tileSize,\n      depth: false,\n      colorFormat: 'rgba',\n      colorType: 'uint8'\n    });\n\n    let resultEncodedPixels = new Uint8Array(tileSize * tileSize * 4);\n\n    fboTile.use(() => {\n      this.calcTileMultiAnalyze1({\n        canvasSize: [tileSize, tileSize],\n        canvasCoordinates: [0, 0],\n        textureA: textureManagerA.texture,\n        textureBoundsA: textureBoundsA,\n        filterLowA : filterLowA,\n        filterHighA : filterHighA,\n        multiplierA: multiplierA,\n      });\n\n      // Get encoded floatValues to use for mouseEvents\n      regl.read({data: resultEncodedPixels});\n    });\n\n    // Flip readPixels result\n    resultEncodedPixels = this.flipReadPixelsUint(tileSize, tileSize, resultEncodedPixels);\n\n    // draw result.\n    this.drawTileMultiAnalyze1({\n      colorScale: util.convertColorScale(colorScale),\n      sentinelValues: util.convertColorScale(sentinelValues),\n      canvasSize: [tileSize, tileSize],\n      canvasCoordinates: [0, 0],\n      textureA: textureManagerA.texture,\n      textureBoundsA: textureBoundsA,\n      filterLowA : filterLowA,\n      filterHighA : filterHighA,\n      multiplierA: multiplierA,\n    });\n\n    fboTile.destroy();\n\n    // Since the tile will fill the whole canvas, the offset is simply [0, 0].\n    return [0, 0, resultEncodedPixels];\n  }\n\n  renderTileMulti2(\n    tileDatumA: TileDatum,\n    tileDatumB: TileDatum,\n    colorScale: Color[],\n    sentinelValues: SentinelValue[],\n    filterLowA: number,\n    filterHighA: number,\n    filterLowB: number,\n    filterHighB: number,\n    multiplierA: number,\n    multiplierB: number,\n  ): calcResult {\n    const {\n      regl,\n      textureManagerA,\n      textureManagerB,\n      tileSize,\n    } = this;\n\n    this.setCanvasSize(tileSize, tileSize);\n\n    // Add image to the texture and retrieve its texture coordinates.\n    const textureBoundsA = textureManagerA.addTile(tileDatumA.coords, tileDatumA.pixelData);\n    const textureBoundsB = textureManagerB.addTile(tileDatumB.coords, tileDatumB.pixelData);\n\n    let fboTile = regl.framebuffer({\n      width: tileSize,\n      height: tileSize,\n      depth: false,\n      colorFormat: 'rgba',\n      colorType: 'uint8'\n    });\n\n    let resultEncodedPixels = new Uint8Array(tileSize * tileSize * 4);\n\n    fboTile.use(() => {\n      this.calcTileMultiAnalyze2({\n        canvasSize: [tileSize, tileSize],\n        canvasCoordinates: [0, 0],\n        textureA: textureManagerA.texture,\n        textureB: textureManagerB.texture,\n        textureBoundsA: textureBoundsA,\n        textureBoundsB: textureBoundsB,\n        filterLowA : filterLowA,\n        filterHighA : filterHighA,\n        filterLowB : filterLowB,\n        filterHighB : filterHighB,\n        multiplierA: multiplierA,\n        multiplierB: multiplierB,\n      });\n\n      // Get encoded floatValues to use for mouseEvents\n      regl.read({data: resultEncodedPixels});\n    });\n\n    // Flip readPixels result\n    resultEncodedPixels = this.flipReadPixelsUint(tileSize, tileSize, resultEncodedPixels);\n\n    // draw result.\n    this.drawTileMultiAnalyze2({\n      colorScale: util.convertColorScale(colorScale),\n      sentinelValues: util.convertColorScale(sentinelValues),\n      canvasSize: [tileSize, tileSize],\n      canvasCoordinates: [0, 0],\n      textureA: textureManagerA.texture,\n      textureB: textureManagerB.texture,\n      textureBoundsA: textureBoundsA,\n      textureBoundsB: textureBoundsB,\n      filterLowA : filterLowA,\n      filterHighA : filterHighA,\n      filterLowB : filterLowB,\n      filterHighB : filterHighB,\n      multiplierA: multiplierA,\n      multiplierB: multiplierB,\n    });\n\n    fboTile.destroy();\n\n    // Since the tile will fill the whole canvas, the offset is simply [0, 0].\n    return [0, 0, resultEncodedPixels];\n  }\n\n\n  renderTileMulti3(\n    tileDatumA: TileDatum,\n    tileDatumB: TileDatum,\n    tileDatumC: TileDatum,\n    colorScale: Color[],\n    sentinelValues: SentinelValue[],\n    filterLowA: number,\n    filterHighA: number,\n    filterLowB: number,\n    filterHighB: number,\n    filterLowC: number,\n    filterHighC: number,\n    multiplierA: number,\n    multiplierB: number,\n    multiplierC: number,\n  ): calcResult {\n    const {\n      regl,\n      textureManagerA,\n      textureManagerB,\n      textureManagerC,\n      tileSize,\n    } = this;\n\n    this.setCanvasSize(tileSize, tileSize);\n\n    // Add image to the texture and retrieve its texture coordinates.\n    const textureBoundsA = textureManagerA.addTile(tileDatumA.coords, tileDatumA.pixelData);\n    const textureBoundsB = textureManagerB.addTile(tileDatumB.coords, tileDatumB.pixelData);\n    const textureBoundsC = textureManagerC.addTile(tileDatumC.coords, tileDatumC.pixelData);\n\n    let fboTile = regl.framebuffer({\n      width: tileSize,\n      height: tileSize,\n      depth: false,\n      colorFormat: 'rgba',\n      colorType: 'uint8'\n    });\n\n    let resultEncodedPixels = new Uint8Array(tileSize * tileSize * 4);\n\n    fboTile.use(() => {\n      this.calcTileMultiAnalyze3({\n        canvasSize: [tileSize, tileSize],\n        canvasCoordinates: [0, 0],\n        textureA: textureManagerA.texture,\n        textureB: textureManagerB.texture,\n        textureC: textureManagerC.texture,\n        textureBoundsA: textureBoundsA,\n        textureBoundsB: textureBoundsB,\n        textureBoundsC: textureBoundsC,\n        filterLowA : filterLowA,\n        filterHighA : filterHighA,\n        filterLowB : filterLowB,\n        filterHighB : filterHighB,\n        filterLowC : filterLowC,\n        filterHighC : filterHighC,\n        multiplierA: multiplierA,\n        multiplierB: multiplierB,\n        multiplierC: multiplierC,\n      });\n\n      // Get encoded floatValues to use for mouseEvents\n      regl.read({data: resultEncodedPixels});\n    });\n\n    // Flip readPixels result\n    resultEncodedPixels = this.flipReadPixelsUint(tileSize, tileSize, resultEncodedPixels);\n\n    // draw result.\n    this.drawTileMultiAnalyze3({\n      colorScale: util.convertColorScale(colorScale),\n      sentinelValues: util.convertColorScale(sentinelValues),\n      canvasSize: [tileSize, tileSize],\n      canvasCoordinates: [0, 0],\n      textureA: textureManagerA.texture,\n      textureB: textureManagerB.texture,\n      textureC: textureManagerC.texture,\n      textureBoundsA: textureBoundsA,\n      textureBoundsB: textureBoundsB,\n      textureBoundsC: textureBoundsC,\n      filterLowA : filterLowA,\n      filterHighA : filterHighA,\n      filterLowB : filterLowB,\n      filterHighB : filterHighB,\n      filterLowC : filterLowC,\n      filterHighC : filterHighC,\n      multiplierA: multiplierA,\n      multiplierB: multiplierB,\n      multiplierC: multiplierC,\n    });\n\n    fboTile.destroy();\n\n    // Since the tile will fill the whole canvas, the offset is simply [0, 0].\n    return [0, 0, resultEncodedPixels];\n  }\n\n  renderTileMulti4(\n    tileDatumA: TileDatum,\n    tileDatumB: TileDatum,\n    tileDatumC: TileDatum,\n    tileDatumD: TileDatum,\n    colorScale: Color[],\n    sentinelValues: SentinelValue[],\n    filterLowA: number,\n    filterHighA: number,\n    filterLowB: number,\n    filterHighB: number,\n    filterLowC: number,\n    filterHighC: number,\n    filterLowD: number,\n    filterHighD: number,\n    multiplierA: number,\n    multiplierB: number,\n    multiplierC: number,\n    multiplierD: number,\n  ): calcResult {\n    const {\n      regl,\n      textureManagerA,\n      textureManagerB,\n      textureManagerC,\n      textureManagerD,\n      tileSize,\n    } = this;\n    // Set canvas size.\n    this.setCanvasSize(tileSize, tileSize);\n\n    // Add image to the texture and retrieve its texture coordinates.\n    const textureBoundsA = textureManagerA.addTile(tileDatumA.coords, tileDatumA.pixelData);\n    const textureBoundsB = textureManagerB.addTile(tileDatumB.coords, tileDatumB.pixelData);\n    const textureBoundsC = textureManagerC.addTile(tileDatumC.coords, tileDatumC.pixelData);\n    const textureBoundsD = textureManagerD.addTile(tileDatumD.coords, tileDatumD.pixelData);\n\n    let fboTile = regl.framebuffer({\n      width: tileSize,\n      height: tileSize,\n      depth: false,\n      colorFormat: 'rgba',\n      colorType: 'uint8'\n    });\n\n    let resultEncodedPixels = new Uint8Array(tileSize * tileSize * 4);\n\n    fboTile.use(() => {\n      this.calcTileMultiAnalyze4({\n        canvasSize: [tileSize, tileSize],\n        canvasCoordinates: [0, 0],\n        textureA: textureManagerA.texture,\n        textureB: textureManagerB.texture,\n        textureC: textureManagerC.texture,\n        textureD: textureManagerD.texture,\n        textureBoundsA: textureBoundsA,\n        textureBoundsB: textureBoundsB,\n        textureBoundsC: textureBoundsC,\n        textureBoundsD: textureBoundsD,\n        filterLowA : filterLowA,\n        filterHighA : filterHighA,\n        filterLowB : filterLowB,\n        filterHighB : filterHighB,\n        filterLowC : filterLowC,\n        filterHighC : filterHighC,\n        filterLowD : filterLowD,\n        filterHighD : filterHighD,\n        multiplierA: multiplierA,\n        multiplierB: multiplierB,\n        multiplierC: multiplierC,\n        multiplierD: multiplierD,\n      });\n\n      // Get encoded floatValues to use for mouseEvents\n      regl.read({data: resultEncodedPixels});\n    });\n\n    // Flip readPixels result\n    resultEncodedPixels = this.flipReadPixelsUint(tileSize, tileSize, resultEncodedPixels);\n\n    // draw result.\n    this.drawTileMultiAnalyze4({\n      colorScale: util.convertColorScale(colorScale),\n      sentinelValues: util.convertColorScale(sentinelValues),\n      canvasSize: [tileSize, tileSize],\n      canvasCoordinates: [0, 0],\n      textureA: textureManagerA.texture,\n      textureB: textureManagerB.texture,\n      textureC: textureManagerC.texture,\n      textureD: textureManagerD.texture,\n      textureBoundsA: textureBoundsA,\n      textureBoundsB: textureBoundsB,\n      textureBoundsC: textureBoundsC,\n      textureBoundsD: textureBoundsD,\n      filterLowA : filterLowA,\n      filterHighA : filterHighA,\n      filterLowB : filterLowB,\n      filterHighB : filterHighB,\n      filterLowC : filterLowC,\n      filterHighC : filterHighC,\n      filterLowD : filterLowD,\n      filterHighD : filterHighD,\n      multiplierA: multiplierA,\n      multiplierB: multiplierB,\n      multiplierC: multiplierC,\n      multiplierD: multiplierD,\n    });\n\n    fboTile.destroy();\n\n    // Since the tile will fill the whole canvas, the offset is simply [0, 0].\n    return [0, 0, resultEncodedPixels];\n  }\n\n  renderTileMulti5(\n    tileDatumA: TileDatum,\n    tileDatumB: TileDatum,\n    tileDatumC: TileDatum,\n    tileDatumD: TileDatum,\n    tileDatumE: TileDatum,\n    colorScale: Color[],\n    sentinelValues: SentinelValue[],\n    filterLowA: number,\n    filterHighA: number,\n    filterLowB: number,\n    filterHighB: number,\n    filterLowC: number,\n    filterHighC: number,\n    filterLowD: number,\n    filterHighD: number,\n    filterLowE: number,\n    filterHighE: number,\n    multiplierA: number,\n    multiplierB: number,\n    multiplierC: number,\n    multiplierD: number,\n    multiplierE: number,\n  ): calcResult {\n    const {\n      regl,\n      textureManagerA,\n      textureManagerB,\n      textureManagerC,\n      textureManagerD,\n      textureManagerE,\n      tileSize,\n    } = this;\n\n    this.setCanvasSize(tileSize, tileSize);\n\n    // Add image to the texture and retrieve its texture coordinates.\n    const textureBoundsA = textureManagerA.addTile(tileDatumA.coords, tileDatumA.pixelData);\n    const textureBoundsB = textureManagerB.addTile(tileDatumB.coords, tileDatumB.pixelData);\n    const textureBoundsC = textureManagerC.addTile(tileDatumC.coords, tileDatumC.pixelData);\n    const textureBoundsD = textureManagerD.addTile(tileDatumD.coords, tileDatumD.pixelData);\n    const textureBoundsE = textureManagerE.addTile(tileDatumE.coords, tileDatumE.pixelData);\n\n    let fboTile = regl.framebuffer({\n      width: tileSize,\n      height: tileSize,\n      depth: false,\n      colorFormat: 'rgba',\n      colorType: 'uint8'\n    });\n\n    let resultEncodedPixels = new Uint8Array(tileSize * tileSize * 4);\n\n    fboTile.use(() => {\n      this.calcTileMultiAnalyze5({\n        canvasSize: [tileSize, tileSize],\n        canvasCoordinates: [0, 0],\n        textureA: textureManagerA.texture,\n        textureB: textureManagerB.texture,\n        textureC: textureManagerC.texture,\n        textureD: textureManagerD.texture,\n        textureE: textureManagerE.texture,\n        textureBoundsA: textureBoundsA,\n        textureBoundsB: textureBoundsB,\n        textureBoundsC: textureBoundsC,\n        textureBoundsD: textureBoundsD,\n        textureBoundsE: textureBoundsE,\n        filterLowA: filterLowA,\n        filterHighA: filterHighA,\n        filterLowB: filterLowB,\n        filterHighB: filterHighB,\n        filterLowC: filterLowC,\n        filterHighC: filterHighC,\n        filterLowD: filterLowD,\n        filterHighD: filterHighD,\n        filterLowE: filterLowE,\n        filterHighE: filterHighE,\n        multiplierA: multiplierA,\n        multiplierB: multiplierB,\n        multiplierC: multiplierC,\n        multiplierD: multiplierD,\n        multiplierE: multiplierE,\n      });\n\n      // Get encoded floatValues to use for mouseEvents\n      regl.read({data: resultEncodedPixels});\n    });\n\n    // Flip readPixels result\n    resultEncodedPixels = this.flipReadPixelsUint(tileSize, tileSize, resultEncodedPixels);\n\n    this.drawTileMultiAnalyze5({\n      colorScale: util.convertColorScale(colorScale),\n      sentinelValues: util.convertColorScale(sentinelValues),\n      canvasSize: [tileSize, tileSize],\n      canvasCoordinates: [0, 0],\n      textureA: textureManagerA.texture,\n      textureB: textureManagerB.texture,\n      textureC: textureManagerC.texture,\n      textureD: textureManagerD.texture,\n      textureE: textureManagerE.texture,\n      textureBoundsA: textureBoundsA,\n      textureBoundsB: textureBoundsB,\n      textureBoundsC: textureBoundsC,\n      textureBoundsD: textureBoundsD,\n      textureBoundsE: textureBoundsE,\n      filterLowA: filterLowA,\n      filterHighA: filterHighA,\n      filterLowB: filterLowB,\n      filterHighB: filterHighB,\n      filterLowC: filterLowC,\n      filterHighC: filterHighC,\n      filterLowD: filterLowD,\n      filterHighD: filterHighD,\n      filterLowE: filterLowE,\n      filterHighE: filterHighE,\n      multiplierA: multiplierA,\n      multiplierB: multiplierB,\n      multiplierC: multiplierC,\n      multiplierD: multiplierD,\n      multiplierE: multiplierE,\n    });\n\n    fboTile.destroy();\n\n    // Since the tile will fill the whole canvas, the offset is simply [0, 0].\n    return [0, 0, resultEncodedPixels];\n  }\n\n  renderTileMulti6(\n    tileDatumA: TileDatum,\n    tileDatumB: TileDatum,\n    tileDatumC: TileDatum,\n    tileDatumD: TileDatum,\n    tileDatumE: TileDatum,\n    tileDatumF: TileDatum,\n    colorScale: Color[],\n    sentinelValues: SentinelValue[],\n    filterLowA: number,\n    filterHighA: number,\n    filterLowB: number,\n    filterHighB: number,\n    filterLowC: number,\n    filterHighC: number,\n    filterLowD: number,\n    filterHighD: number,\n    filterLowE: number,\n    filterHighE: number,\n    filterLowF: number,\n    filterHighF: number,\n    multiplierA: number,\n    multiplierB: number,\n    multiplierC: number,\n    multiplierD: number,\n    multiplierE: number,\n    multiplierF: number,\n  ): calcResult {\n    const {\n      regl,\n      textureManagerA,\n      textureManagerB,\n      textureManagerC,\n      textureManagerD,\n      textureManagerE,\n      textureManagerF,\n      tileSize,\n    } = this;\n\n    this.setCanvasSize(tileSize, tileSize);\n\n    // Add image to the texture and retrieve its texture coordinates.\n    const textureBoundsA = textureManagerA.addTile(tileDatumA.coords, tileDatumA.pixelData);\n    const textureBoundsB = textureManagerB.addTile(tileDatumB.coords, tileDatumB.pixelData);\n    const textureBoundsC = textureManagerC.addTile(tileDatumC.coords, tileDatumC.pixelData);\n    const textureBoundsD = textureManagerD.addTile(tileDatumD.coords, tileDatumD.pixelData);\n    const textureBoundsE = textureManagerE.addTile(tileDatumE.coords, tileDatumE.pixelData);\n    const textureBoundsF = textureManagerE.addTile(tileDatumF.coords, tileDatumF.pixelData);\n\n    let fboTile = regl.framebuffer({\n      width: tileSize,\n      height: tileSize,\n      depth: false,\n      colorFormat: 'rgba',\n      colorType: 'uint8'\n    });\n\n    let resultEncodedPixels = new Uint8Array(tileSize * tileSize * 4);\n\n    fboTile.use(() => {\n      this.calcTileMultiAnalyze6({\n        canvasSize: [tileSize, tileSize],\n        canvasCoordinates: [0, 0],\n        textureA: textureManagerA.texture,\n        textureB: textureManagerB.texture,\n        textureC: textureManagerC.texture,\n        textureD: textureManagerD.texture,\n        textureE: textureManagerE.texture,\n        textureF: textureManagerF.texture,\n        textureBoundsA: textureBoundsA,\n        textureBoundsB: textureBoundsB,\n        textureBoundsC: textureBoundsC,\n        textureBoundsD: textureBoundsD,\n        textureBoundsE: textureBoundsE,\n        textureBoundsF: textureBoundsF,\n        filterLowA: filterLowA,\n        filterHighA: filterHighA,\n        filterLowB: filterLowB,\n        filterHighB: filterHighB,\n        filterLowC: filterLowC,\n        filterHighC: filterHighC,\n        filterLowD: filterLowD,\n        filterHighD: filterHighD,\n        filterLowE: filterLowE,\n        filterHighE: filterHighE,\n        filterLowF: filterLowF,\n        filterHighF: filterHighF,\n        multiplierA: multiplierA,\n        multiplierB: multiplierB,\n        multiplierC: multiplierC,\n        multiplierD: multiplierD,\n        multiplierE: multiplierE,\n        multiplierF: multiplierF,\n      });\n\n      // Get encoded floatValues to use for mouseEvents\n      regl.read({data: resultEncodedPixels});\n    });\n\n    // Flip readPixels result\n    resultEncodedPixels = this.flipReadPixelsUint(tileSize, tileSize, resultEncodedPixels);\n\n    this.drawTileMultiAnalyze6({\n      colorScale: util.convertColorScale(colorScale),\n      sentinelValues: util.convertColorScale(sentinelValues),\n      canvasSize: [tileSize, tileSize],\n      canvasCoordinates: [0, 0],\n      textureA: textureManagerA.texture,\n      textureB: textureManagerB.texture,\n      textureC: textureManagerC.texture,\n      textureD: textureManagerD.texture,\n      textureE: textureManagerE.texture,\n      textureF: textureManagerF.texture,\n      textureBoundsA: textureBoundsA,\n      textureBoundsB: textureBoundsB,\n      textureBoundsC: textureBoundsC,\n      textureBoundsD: textureBoundsD,\n      textureBoundsE: textureBoundsE,\n      textureBoundsF: textureBoundsF,\n      filterLowA: filterLowA,\n      filterHighA: filterHighA,\n      filterLowB: filterLowB,\n      filterHighB: filterHighB,\n      filterLowC: filterLowC,\n      filterHighC: filterHighC,\n      filterLowD: filterLowD,\n      filterHighD: filterHighD,\n      filterLowE: filterLowE,\n      filterHighE: filterHighE,\n      filterLowF: filterLowF,\n      filterHighF: filterHighF,\n      multiplierA: multiplierA,\n      multiplierB: multiplierB,\n      multiplierC: multiplierC,\n      multiplierD: multiplierD,\n      multiplierE: multiplierE,\n      multiplierF: multiplierF,\n    });\n\n    fboTile.destroy();\n\n    // Since the tile will fill the whole canvas, the offset is simply [0, 0].\n    return [0, 0, resultEncodedPixels];\n  }\n\n\n  renderTiles(\n    tiles: TileDatum[],\n    colorScale: Color[],\n    sentinelValues: SentinelValue[],\n    _hillshadeOptions: HillshadeOptions,\n    zoom: number = 0,\n  ): Array<Pair<number>> {\n    const {\n      regl,\n      textureManager,\n      tileSize,\n    } = this;\n\n    // Compute required canvas dimensions, then resize the canvas.\n    const [canvasWidth, canvasHeight] = this.computeRequiredCanvasDimensions(tiles.length);\n    this.setCanvasSize(canvasWidth, canvasHeight);\n\n    // Compute the coordinates at which each tile will be rendered in the canvas.\n    const canvasCoordinates = this.getCanvasCoordinates(canvasWidth, canvasHeight, tiles.length);\n\n    type TileWithCanvasCoords = TileDatum & { canvasCoords: Pair<number> };\n\n    // Form an array combining each tile datum with the coordinates at which it will be rendered.\n    const tilesWithCanvasCoordinates = zipWith<TileDatum | Pair<number>, TileWithCanvasCoords>(\n      tiles,\n      canvasCoordinates,\n      (tile: TileDatum, canvasCoords: Pair<number>) => ({\n        ...tile,\n        canvasCoords,\n      }),\n    );\n\n    // Convert the color scale and sentinel values to the form expected by WebGL.\n    const webGLColorScale = util.convertColorScale(colorScale);\n    const webGLSentinelValues = util.convertColorScale(sentinelValues);\n\n    const canvasSize = [canvasWidth, canvasHeight] as Pair<number>;\n\n    // Clear existing tiles from cache.\n    textureManager.clearTiles();\n    // Clear the canvas.\n    regl.clear({ color: CLEAR_COLOR });\n\n    // Split the tiles array into chunks the size of the texture capacity. If we need to render more\n    // tiles than will fit in the texture, we have to render in batches.\n    const chunks = chunk(tilesWithCanvasCoordinates, textureManager.tileCapacity);\n\n    let zoomdelta = _hillshadeOptions.hsSimpleZoomdelta || 0;\n\n    // Render chunk by chunk.\n    for (const chunk of chunks) {\n      // Add tiles.\n      const textureBounds = chunk.map(\n        ({ coords, pixelData }) => textureManager.addTile(coords, pixelData),\n      );\n\n      let offset_pixels = Math.max(0.5, 2 ** (zoom + zoomdelta) / 2048);\n      let offset_texcoords = offset_pixels / textureManager.texture.width;\n\n      if (_hillshadeOptions.hillshadeType === 'none') {\n        this.drawTile(chunk.map(({ canvasCoords }, index) => ({\n          colorScale: webGLColorScale,\n          sentinelValues: webGLSentinelValues,\n          canvasSize,\n          canvasCoordinates: canvasCoords,\n          textureBounds: textureBounds[index],\n          texture: textureManager.texture,\n          enableSimpleHillshade: false,\n        })));\n      } else if (_hillshadeOptions.hillshadeType === 'simple') {\n        this.drawTileHsSimple(chunk.map(({ canvasCoords }, index) => ({\n          colorScale: webGLColorScale,\n          sentinelValues: webGLSentinelValues,\n          canvasSize,\n          canvasCoordinates: canvasCoords,\n          textureBounds: textureBounds[index],\n          textureSize: textureManager.texture.width,\n          texture: textureManager.texture,\n          tileSize: tileSize,\n          offset: offset_texcoords,\n          enableSimpleHillshade: true,\n          azimuth: _hillshadeOptions.hsSimpleAzimuth,\n          altitude: _hillshadeOptions.hsSimpleAltitude,\n          slopescale: _hillshadeOptions.hsSimpleSlopescale,\n        })));\n      }\n    }\n\n    return canvasCoordinates;\n  }\n\n  renderTilesHsPregen(\n    tiles: TileDatum[],\n    tilesHs: TileDatum[],\n    colorScale: Color[],\n    sentinelValues: SentinelValue[],\n    _hillshadeOptions: HillshadeOptions,\n  ): Array<Pair<number>> {\n    const {\n      regl,\n      textureManager,\n      textureManagerHillshade,\n    } = this;\n\n    // Compute required canvas dimensions, then resize the canvas.\n    const [canvasWidth, canvasHeight] = this.computeRequiredCanvasDimensions(tiles.length);\n    this.setCanvasSize(canvasWidth, canvasHeight);\n\n    // Compute the coordinates at which each tile will be rendered in the canvas.\n    const canvasCoordinates = this.getCanvasCoordinates(canvasWidth, canvasHeight, tiles.length);\n\n    interface TilesWithCanvasCoords {\n      canvasCoords: Pair<number>;\n      coords: TileCoordinates;\n      tilesPixelData: Uint8Array;\n      tilesHsPixelData: Uint8Array;\n    }\n\n    // Form an array combining each tile datum with the coordinates at which it will be rendered.\n    const tilesWithCanvasCoordinates = zipWith<TileDatum | Pair<number>, TilesWithCanvasCoords>(\n      tiles,\n      tilesHs,\n      canvasCoordinates,\n      (tiles: TileDatum, tilesHs: TileDatum, canvasCoords: Pair<number>) => ({\n        coords: tiles.coords,\n        tilesPixelData: tiles.pixelData,\n        tilesHsPixelData: tilesHs.pixelData,\n        canvasCoords,\n      }),\n    );\n\n    // Convert the color scale and sentinel values to the form expected by WebGL.\n    const webGLColorScale = util.convertColorScale(colorScale);\n    const webGLSentinelValues = util.convertColorScale(sentinelValues);\n\n    const canvasSize = [canvasWidth, canvasHeight] as Pair<number>;\n\n    // Clear existing tiles from cache.\n    textureManager.clearTiles();\n    textureManagerHillshade.clearTiles();\n\n    // Clear the canvas.\n    regl.clear({ color: CLEAR_COLOR });\n\n    // Split the tiles array into chunks the size of the texture capacity. If we need to render more\n    // tiles than will fit in the texture, we have to render in batches.\n    const chunks = chunk(tilesWithCanvasCoordinates, textureManager.tileCapacity);\n\n    // Render chunk by chunk.\n    for (const chunk of chunks) {\n      // Add tiles.\n      const textureBounds = chunk.map(\n        ({ coords, tilesPixelData }) => textureManager.addTile(coords, tilesPixelData),\n      );\n      const textureBoundsHs = chunk.map(\n        ({ coords, tilesHsPixelData }) => textureManagerHillshade.addTile(coords, tilesHsPixelData),\n      );\n\n      this.drawTileHsPregen(chunk.map(({ canvasCoords }, index) => ({\n        colorScale: webGLColorScale,\n        sentinelValues: webGLSentinelValues,\n        canvasSize,\n        canvasCoordinates: canvasCoords,\n        textureBounds: textureBounds[index],\n        textureBoundsHs: textureBoundsHs[index],\n        texture: textureManager.texture,\n        hillshadePregenTexture: textureManagerHillshade.texture,\n      })));\n    }\n\n    return canvasCoordinates;\n  }\n\n  renderTilesWithDiff(\n    tilesA: TileDatum[],\n    tilesB: TileDatum[],\n    colorScale: Color[],\n    sentinelValues: SentinelValue[],\n    onFrameRendered: (canvasCoordinates: Array<Pair<number>>) => void,\n  ) {\n    const {\n      regl,\n      textureManagerA,\n      textureManagerB,\n      tileSize,\n    } = this;\n\n    // Compute required canvas dimensions, then resize the canvas.\n    const canvasSize = this.computeRequiredCanvasDimensions(tilesA.length);\n    const [canvasWidth, canvasHeight] = canvasSize;\n    this.setCanvasSize(canvasWidth, canvasHeight);\n\n    // Compute the coordinates at which each tile will be rendered in the canvas.\n    const canvasCoordinates = this.getCanvasCoordinates(canvasWidth, canvasHeight, tilesA.length);\n\n    interface TilesWithCanvasCoords {\n      canvasCoords: Pair<number>;\n      coords: TileCoordinates;\n      tilesAPixelData: Uint8Array;\n      tilesBPixelData: Uint8Array;\n    }\n\n    // Form an array combining each tile datum with the coordinates at which it will be rendered.\n    const tilesWithCanvasCoordinates = zipWith<TileDatum | Pair<number>, TilesWithCanvasCoords>(\n      tilesA,\n      tilesB,\n      canvasCoordinates,\n      (tilesA: TileDatum, tilesB: TileDatum, canvasCoords: Pair<number>) => ({\n        coords: tilesA.coords,\n        tilesAPixelData: tilesA.pixelData,\n        tilesBPixelData: tilesB.pixelData,\n        canvasCoords,\n      }),\n    );\n\n    // Convert the color scale and sentinel values to the form expected by WebGL.\n    const webGLColorScale = util.convertColorScale(colorScale);\n    const webGLSentinelValues = util.convertColorScale(sentinelValues);\n\n    // let resultEncodedPixels: Float32Array[] = [];\n    let resultEncodedPixels: Uint8Array[] = [];\n\n    const renderFrame = () => {\n      // Split the tiles array into chunks the size of the texture capacity. If we need to render more\n      // tiles than will fit in the texture, we have to render in batches.\n      const chunks = chunk(tilesWithCanvasCoordinates, textureManagerA.tileCapacity);\n\n      // Clear the canvas.\n      regl.clear({ color: CLEAR_COLOR });\n\n      let tileIndex: number = 0;\n\n      // Render chunk by chunk.\n      for (const chunk of chunks) {\n        // Add tiles.\n        const tilesABounds = chunk.map(\n          ({ coords, tilesAPixelData }) => textureManagerA.addTile(coords, tilesAPixelData),\n        );\n        const tilesBBounds = chunk.map(\n          ({ coords, tilesBPixelData }) => textureManagerB.addTile(coords, tilesBPixelData),\n        );\n\n        chunk.forEach(({ canvasCoords }, index) => {\n          let fboTile = regl.framebuffer({\n            width: tileSize,\n            height: tileSize,\n            depth: false,\n            colorFormat: 'rgba',\n            colorType: 'uint8',\n          });\n\n          let resultEncodedPixelsTile = new Uint8Array(tileSize * tileSize * 4);\n\n          fboTile.use(() => {\n            this.calcTileDiff({\n              canvasSize: [tileSize, tileSize],\n              canvasCoordinates: [0, 0],\n              textureA: textureManagerA.texture,\n              textureB: textureManagerB.texture,\n              textureBoundsA: tilesABounds[index],\n              textureBoundsB: tilesBBounds[index],\n            });\n            regl.read({data: resultEncodedPixelsTile});\n          });\n\n          // Flip readPixels result\n          resultEncodedPixelsTile = this.flipReadPixelsUint(tileSize, tileSize, resultEncodedPixelsTile);\n          // Add tile result to array\n          resultEncodedPixels[tileIndex] = resultEncodedPixelsTile;\n          tileIndex += 1;\n\n          this.drawTileDiff({\n            colorScale: webGLColorScale,\n            sentinelValues: webGLSentinelValues,\n            canvasSize,\n            canvasCoordinates: canvasCoords,\n            textureA: textureManagerA.texture,\n            textureB: textureManagerB.texture,\n            textureBoundsA: tilesABounds[index],\n            textureBoundsB: tilesBBounds[index],\n          });\n\n          fboTile.destroy();\n        });\n      };\n\n      // Invoke the callback with the canvas coordinates of the rendered tiles.\n      onFrameRendered(canvasCoordinates);\n    };\n\n    renderFrame();\n\n    //clean up TextureManagers\n    this.textureManagerA.destroy();\n    this.textureManagerB.destroy();\n    this.textureManagerA = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerB = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n\n    return resultEncodedPixels;\n  }\n\n  renderTilesWithMultiAnalyze1(\n    tilesA: TileDatum[],\n    colorScale: Color[],\n    sentinelValues: SentinelValue[],\n    filterLowA : number,\n    filterHighA : number,\n    multiplierA: number,\n    onFrameRendered: (canvasCoordinates: Array<Pair<number>>) => void,\n  ) {\n    const {\n      regl,\n      textureManagerA,\n      tileSize,\n    } = this;\n\n    // Compute required canvas dimensions, then resize the canvas.\n    const canvasSize = this.computeRequiredCanvasDimensions(tilesA.length);\n    const [canvasWidth, canvasHeight] = canvasSize;\n    this.setCanvasSize(canvasWidth, canvasHeight);\n\n    // Compute the coordinates at which each tile will be rendered in the canvas.\n    const canvasCoordinates = this.getCanvasCoordinates(canvasWidth, canvasHeight, tilesA.length);\n\n    interface TilesWithCanvasCoords {\n      canvasCoords: Pair<number>;\n      coords: TileCoordinates;\n      tilesAPixelData: Uint8Array;\n    }\n\n    // Form an array combining each tile datum with the coordinates at which it will be rendered.\n    const tilesWithCanvasCoordinates = zipWith<TileDatum | Pair<number>, TilesWithCanvasCoords>(\n      tilesA,\n      canvasCoordinates,\n      (tilesA: TileDatum, canvasCoords: Pair<number>) => ({\n        coords: tilesA.coords,\n        tilesAPixelData: tilesA.pixelData,\n        canvasCoords,\n      }),\n    );\n\n    // Convert the color scale and sentinel values to the form expected by WebGL.\n    const webGLColorScale = util.convertColorScale(colorScale);\n    const webGLSentinelValues = util.convertColorScale(sentinelValues);\n\n    let resultEncodedPixels: Uint8Array[] = [];\n\n    const renderFrame = () => {\n      // Split the tiles array into chunks the size of the texture capacity. If we need to render more\n      // tiles than will fit in the texture, we have to render in batches.\n      const chunks = chunk(tilesWithCanvasCoordinates, textureManagerA.tileCapacity);\n\n      // Clear the canvas.\n      regl.clear({ color: CLEAR_COLOR });\n\n      let tileIndex: number = 0;\n\n      // Render chunk by chunk.\n      for (const chunk of chunks) {\n        // Add tiles.\n        const tilesABounds = chunk.map(\n          ({ coords, tilesAPixelData }) => textureManagerA.addTile(coords, tilesAPixelData),\n        );\n\n        chunk.forEach(({ canvasCoords }, index) => {\n          let fboTile = regl.framebuffer({\n            width: tileSize,\n            height: tileSize,\n            depth: false,\n            colorFormat: 'rgba',\n            colorType: 'uint8'\n          });\n\n          let resultEncodedPixelsTile = new Uint8Array(tileSize * tileSize * 4);\n\n          fboTile.use(() => {\n            this.calcTileMultiAnalyze1({\n              canvasSize: [tileSize, tileSize],\n              canvasCoordinates: [0, 0],\n              textureA: textureManagerA.texture,\n              textureBoundsA: tilesABounds[index],\n              filterLowA: filterLowA,\n              filterHighA: filterHighA,\n              multiplierA: multiplierA,\n            });\n\n            // Get encoded floatValues to use for mouseEvents\n            regl.read({data: resultEncodedPixelsTile});\n          });\n\n\n          // Flip readPixels result\n          resultEncodedPixelsTile = this.flipReadPixelsUint(tileSize, tileSize, resultEncodedPixelsTile);\n          // Add tile result to array\n          resultEncodedPixels[tileIndex] = resultEncodedPixelsTile;\n          tileIndex += 1;\n\n          this.drawTileMultiAnalyze1({\n            colorScale: webGLColorScale,\n            sentinelValues: webGLSentinelValues,\n            canvasSize,\n            canvasCoordinates: canvasCoords,\n            textureA: textureManagerA.texture,\n            textureBoundsA: tilesABounds[index],\n            filterLowA : filterLowA,\n            filterHighA : filterHighA,\n            multiplierA: multiplierA,\n          });\n\n          fboTile.destroy();\n        });\n      }\n\n      // Invoke the callback with the canvas coordinates of the rendered tiles.\n      onFrameRendered(canvasCoordinates);\n    };\n\n    renderFrame();\n\n    //clean up TextureManagers\n    this.textureManagerA.destroy();\n    this.textureManagerA = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n\n    return resultEncodedPixels;\n  }\n\n  renderTilesWithMultiAnalyze2(\n    tilesA: TileDatum[],\n    tilesB: TileDatum[],\n    colorScale: Color[],\n    sentinelValues: SentinelValue[],\n    filterLowA : number,\n    filterHighA : number,\n    filterLowB : number,\n    filterHighB : number,\n    multiplierA: number,\n    multiplierB: number,\n    onFrameRendered: (canvasCoordinates: Array<Pair<number>>) => void,\n  ) {\n    const {\n      regl,\n      textureManagerA,\n      textureManagerB,\n      tileSize,\n    } = this;\n\n    // Compute required canvas dimensions, then resize the canvas.\n    const canvasSize = this.computeRequiredCanvasDimensions(tilesA.length);\n    const [canvasWidth, canvasHeight] = canvasSize;\n    this.setCanvasSize(canvasWidth, canvasHeight);\n\n    // Compute the coordinates at which each tile will be rendered in the canvas.\n    const canvasCoordinates = this.getCanvasCoordinates(canvasWidth, canvasHeight, tilesA.length);\n\n    interface TilesWithCanvasCoords {\n      canvasCoords: Pair<number>;\n      coords: TileCoordinates;\n      tilesAPixelData: Uint8Array;\n      tilesBPixelData: Uint8Array;\n    }\n\n    // Form an array combining each tile datum with the coordinates at which it will be rendered.\n    const tilesWithCanvasCoordinates = zipWith<TileDatum | Pair<number>, TilesWithCanvasCoords>(\n      tilesA,\n      tilesB,\n      canvasCoordinates,\n      (tilesA: TileDatum, tilesB: TileDatum, canvasCoords: Pair<number>) => ({\n        coords: tilesA.coords,\n        tilesAPixelData: tilesA.pixelData,\n        tilesBPixelData: tilesB.pixelData,\n        canvasCoords,\n      }),\n    );\n\n    // Convert the color scale and sentinel values to the form expected by WebGL.\n    const webGLColorScale = util.convertColorScale(colorScale);\n    const webGLSentinelValues = util.convertColorScale(sentinelValues);\n\n    let resultEncodedPixels: Uint8Array[] = [];\n\n    const renderFrame = () => {\n      // Split the tiles array into chunks the size of the texture capacity. If we need to render more\n      // tiles than will fit in the texture, we have to render in batches.\n      const chunks = chunk(tilesWithCanvasCoordinates, textureManagerA.tileCapacity);\n\n      // Clear the canvas.\n      regl.clear({ color: CLEAR_COLOR });\n\n      let tileIndex: number = 0;\n\n      // Render chunk by chunk.\n      for (const chunk of chunks) {\n        // Add tiles.\n        const tilesABounds = chunk.map(\n          ({ coords, tilesAPixelData }) => textureManagerA.addTile(coords, tilesAPixelData),\n        );\n        const tilesBBounds = chunk.map(\n          ({ coords, tilesBPixelData }) => textureManagerB.addTile(coords, tilesBPixelData),\n        );\n\n        chunk.forEach(({ canvasCoords }, index) => {\n          let fboTile = regl.framebuffer({\n            width: tileSize,\n            height: tileSize,\n            depth: false,\n            colorFormat: 'rgba',\n            colorType: 'uint8'\n          });\n\n          let resultEncodedPixelsTile = new Uint8Array(tileSize * tileSize * 4);\n\n          fboTile.use(() => {\n            this.calcTileMultiAnalyze2({\n              canvasSize: [tileSize, tileSize],\n              canvasCoordinates: [0, 0],\n              textureA: textureManagerA.texture,\n              textureB: textureManagerB.texture,\n              textureBoundsA: tilesABounds[index],\n              textureBoundsB: tilesBBounds[index],\n              filterLowA: filterLowA,\n              filterHighA: filterHighA,\n              filterLowB: filterLowB,\n              filterHighB: filterHighB,\n              multiplierA: multiplierA,\n              multiplierB: multiplierB,\n            });\n\n            // Get encoded floatValues to use for mouseEvents\n            regl.read({data: resultEncodedPixelsTile});\n          });\n\n\n          // Flip readPixels result\n          resultEncodedPixelsTile = this.flipReadPixelsUint(tileSize, tileSize, resultEncodedPixelsTile);\n          // Add tile result to array\n          resultEncodedPixels[tileIndex] = resultEncodedPixelsTile;\n          tileIndex += 1;\n\n          this.drawTileMultiAnalyze2({\n            colorScale: webGLColorScale,\n            sentinelValues: webGLSentinelValues,\n            canvasSize,\n            canvasCoordinates: canvasCoords,\n            textureA: textureManagerA.texture,\n            textureB: textureManagerB.texture,\n            textureBoundsA: tilesABounds[index],\n            textureBoundsB: tilesBBounds[index],\n            filterLowA : filterLowA,\n            filterHighA : filterHighA,\n            filterLowB : filterLowB,\n            filterHighB : filterHighB,\n            multiplierA: multiplierA,\n            multiplierB: multiplierB,\n          });\n\n          fboTile.destroy();\n        });\n      }\n\n      // Invoke the callback with the canvas coordinates of the rendered tiles.\n      onFrameRendered(canvasCoordinates);\n    };\n\n    renderFrame();\n\n    //clean up TextureManagers\n    this.textureManagerA.destroy();\n    this.textureManagerB.destroy();\n    this.textureManagerA = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerB = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n\n    return resultEncodedPixels;\n  }\n\n\n  renderTilesWithMultiAnalyze3(\n    tilesA: TileDatum[],\n    tilesB: TileDatum[],\n    tilesC: TileDatum[],\n    colorScale: Color[],\n    sentinelValues: SentinelValue[],\n    filterLowA : number,\n    filterHighA : number,\n    filterLowB : number,\n    filterHighB : number,\n    filterLowC : number,\n    filterHighC : number,\n    multiplierA: number,\n    multiplierB: number,\n    multiplierC: number,\n    onFrameRendered: (canvasCoordinates: Array<Pair<number>>) => void,\n  ) {\n    const {\n      regl,\n      textureManagerA,\n      textureManagerB,\n      textureManagerC,\n      tileSize,\n    } = this;\n\n    // Compute required canvas dimensions, then resize the canvas.\n    const canvasSize = this.computeRequiredCanvasDimensions(tilesA.length);\n    const [canvasWidth, canvasHeight] = canvasSize;\n    this.setCanvasSize(canvasWidth, canvasHeight);\n\n    // Compute the coordinates at which each tile will be rendered in the canvas.\n    const canvasCoordinates = this.getCanvasCoordinates(canvasWidth, canvasHeight, tilesA.length);\n\n    interface TilesWithCanvasCoords {\n      canvasCoords: Pair<number>;\n      coords: TileCoordinates;\n      tilesAPixelData: Uint8Array;\n      tilesBPixelData: Uint8Array;\n      tilesCPixelData: Uint8Array;\n    }\n\n    // Form an array combining each tile datum with the coordinates at which it will be rendered.\n    const tilesWithCanvasCoordinates = zipWith<TileDatum | Pair<number>, TilesWithCanvasCoords>(\n      tilesA,\n      tilesB,\n      tilesC,\n      canvasCoordinates,\n      (tilesA: TileDatum, tilesB: TileDatum, tilesC: TileDatum, canvasCoords: Pair<number>) => ({\n        coords: tilesA.coords,\n        tilesAPixelData: tilesA.pixelData,\n        tilesBPixelData: tilesB.pixelData,\n        tilesCPixelData: tilesC.pixelData,\n        canvasCoords,\n      }),\n    );\n\n    // Convert the color scale and sentinel values to the form expected by WebGL.\n    const webGLColorScale = util.convertColorScale(colorScale);\n    const webGLSentinelValues = util.convertColorScale(sentinelValues);\n\n    let resultEncodedPixels: Uint8Array[] = [];\n\n    const renderFrame = () => {\n      // Split the tiles array into chunks the size of the texture capacity. If we need to render more\n      // tiles than will fit in the texture, we have to render in batches.\n      const chunks = chunk(tilesWithCanvasCoordinates, textureManagerA.tileCapacity);\n\n      // Clear the canvas.\n      regl.clear({ color: CLEAR_COLOR });\n\n      let tileIndex: number = 0;\n\n      // Render chunk by chunk.\n      for (const chunk of chunks) {\n        // Add tiles.\n        const tilesABounds = chunk.map(\n          ({ coords, tilesAPixelData }) => textureManagerA.addTile(coords, tilesAPixelData),\n        );\n        const tilesBBounds = chunk.map(\n          ({ coords, tilesBPixelData }) => textureManagerB.addTile(coords, tilesBPixelData),\n        );\n        const tilesCBounds = chunk.map(\n          ({ coords, tilesCPixelData }) => textureManagerC.addTile(coords, tilesCPixelData),\n        );\n\n        chunk.forEach(({ canvasCoords }, index) => {\n          let fboTile = regl.framebuffer({\n            width: tileSize,\n            height: tileSize,\n            depth: false,\n            colorFormat: 'rgba',\n            colorType: 'uint8'\n          });\n\n          let resultEncodedPixelsTile = new Uint8Array(tileSize * tileSize * 4);\n\n          fboTile.use(() => {\n            this.calcTileMultiAnalyze3({\n              canvasSize: [tileSize, tileSize],\n              canvasCoordinates: [0, 0],\n              textureA: textureManagerA.texture,\n              textureB: textureManagerB.texture,\n              textureC: textureManagerC.texture,\n              textureBoundsA: tilesABounds[index],\n              textureBoundsB: tilesBBounds[index],\n              textureBoundsC: tilesCBounds[index],\n              filterLowA: filterLowA,\n              filterHighA: filterHighA,\n              filterLowB: filterLowB,\n              filterHighB: filterHighB,\n              filterLowC: filterLowC,\n              filterHighC: filterHighC,\n              multiplierA: multiplierA,\n              multiplierB: multiplierB,\n              multiplierC: multiplierC,\n            });\n\n            // Get encoded floatValues to use for mouseEvents\n            regl.read({data: resultEncodedPixelsTile});\n          });\n\n\n          // Flip readPixels result\n          resultEncodedPixelsTile = this.flipReadPixelsUint(tileSize, tileSize, resultEncodedPixelsTile);\n          // Add tile result to array\n          resultEncodedPixels[tileIndex] = resultEncodedPixelsTile;\n          tileIndex += 1;\n\n          this.drawTileMultiAnalyze3({\n            colorScale: webGLColorScale,\n            sentinelValues: webGLSentinelValues,\n            canvasSize,\n            canvasCoordinates: canvasCoords,\n            textureA: textureManagerA.texture,\n            textureB: textureManagerB.texture,\n            textureC: textureManagerC.texture,\n            textureBoundsA: tilesABounds[index],\n            textureBoundsB: tilesBBounds[index],\n            textureBoundsC: tilesCBounds[index],\n            filterLowA : filterLowA,\n            filterHighA : filterHighA,\n            filterLowB : filterLowB,\n            filterHighB : filterHighB,\n            filterLowC : filterLowC,\n            filterHighC : filterHighC,\n            multiplierA: multiplierA,\n            multiplierB: multiplierB,\n            multiplierC: multiplierC,\n          });\n\n          fboTile.destroy();\n        });\n      }\n\n      // Invoke the callback with the canvas coordinates of the rendered tiles.\n      onFrameRendered(canvasCoordinates);\n    };\n\n    renderFrame();\n\n    //clean up TextureManagers\n    this.textureManagerA.destroy();\n    this.textureManagerB.destroy();\n    this.textureManagerC.destroy();\n    this.textureManagerA = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerB = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerC = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n\n    return resultEncodedPixels;\n  }\n\n\n  renderTilesWithMultiAnalyze4(\n    tilesA: TileDatum[],\n    tilesB: TileDatum[],\n    tilesC: TileDatum[],\n    tilesD: TileDatum[],\n    colorScale: Color[],\n    sentinelValues: SentinelValue[],\n    filterLowA : number,\n    filterHighA : number,\n    filterLowB : number,\n    filterHighB : number,\n    filterLowC : number,\n    filterHighC : number,\n    filterLowD : number,\n    filterHighD : number,\n    multiplierA: number,\n    multiplierB: number,\n    multiplierC: number,\n    multiplierD: number,\n    onFrameRendered: (canvasCoordinates: Array<Pair<number>>) => void,\n  ) {\n    const {\n      regl,\n      textureManagerA,\n      textureManagerB,\n      textureManagerC,\n      textureManagerD,\n      tileSize,\n    } = this;\n\n    // Compute required canvas dimensions, then resize the canvas.\n    const canvasSize = this.computeRequiredCanvasDimensions(tilesA.length);\n    const [canvasWidth, canvasHeight] = canvasSize;\n    this.setCanvasSize(canvasWidth, canvasHeight);\n\n    // Compute the coordinates at which each tile will be rendered in the canvas.\n    const canvasCoordinates = this.getCanvasCoordinates(canvasWidth, canvasHeight, tilesA.length);\n\n    interface TilesWithCanvasCoords {\n      canvasCoords: Pair<number>;\n      coords: TileCoordinates;\n      tilesAPixelData: Uint8Array;\n      tilesBPixelData: Uint8Array;\n      tilesCPixelData: Uint8Array;\n      tilesDPixelData: Uint8Array;\n    }\n\n    // Form an array combining each tile datum with the coordinates at which it will be rendered.\n    const tilesWithCanvasCoordinates = zipWith<TileDatum | Pair<number>, TilesWithCanvasCoords>(\n      tilesA,\n      tilesB,\n      tilesC,\n      tilesD,\n      canvasCoordinates,\n      (tilesA: TileDatum, tilesB: TileDatum, tilesC: TileDatum, tilesD: TileDatum, canvasCoords: Pair<number>) => ({\n        coords: tilesA.coords,\n        tilesAPixelData: tilesA.pixelData,\n        tilesBPixelData: tilesB.pixelData,\n        tilesCPixelData: tilesC.pixelData,\n        tilesDPixelData: tilesD.pixelData,\n        canvasCoords,\n      }),\n    );\n\n    // Convert the color scale and sentinel values to the form expected by WebGL.\n    const webGLColorScale = util.convertColorScale(colorScale);\n    const webGLSentinelValues = util.convertColorScale(sentinelValues);\n\n    let resultEncodedPixels: Uint8Array[] = [];\n\n    const renderFrame = () => {\n      // Split the tiles array into chunks the size of the texture capacity. If we need to render more\n      // tiles than will fit in the texture, we have to render in batches.\n      const chunks = chunk(tilesWithCanvasCoordinates, textureManagerA.tileCapacity);\n\n      // Clear the canvas.\n      regl.clear({ color: CLEAR_COLOR });\n\n      let tileIndex: number = 0;\n\n      // Render chunk by chunk.\n      for (const chunk of chunks) {\n        // Add tiles.\n        const tilesABounds = chunk.map(\n          ({ coords, tilesAPixelData }) => textureManagerA.addTile(coords, tilesAPixelData),\n        );\n        const tilesBBounds = chunk.map(\n          ({ coords, tilesBPixelData }) => textureManagerB.addTile(coords, tilesBPixelData),\n        );\n        const tilesCBounds = chunk.map(\n          ({ coords, tilesCPixelData }) => textureManagerC.addTile(coords, tilesCPixelData),\n        );\n        const tilesDBounds = chunk.map(\n          ({ coords, tilesDPixelData }) => textureManagerD.addTile(coords, tilesDPixelData),\n        );\n\n        chunk.forEach(({ canvasCoords }, index) => {\n          let fboTile = regl.framebuffer({\n            width: tileSize,\n            height: tileSize,\n            depth: false,\n            colorFormat: 'rgba',\n            colorType: 'uint8'\n          });\n\n          let resultEncodedPixelsTile = new Uint8Array(tileSize * tileSize * 4);\n\n          fboTile.use(() => {\n            this.calcTileMultiAnalyze4({\n              canvasSize: [tileSize, tileSize],\n              canvasCoordinates: [0, 0],\n              textureA: textureManagerA.texture,\n              textureB: textureManagerB.texture,\n              textureC: textureManagerC.texture,\n              textureD: textureManagerD.texture,\n              textureBoundsA: tilesABounds[index],\n              textureBoundsB: tilesBBounds[index],\n              textureBoundsC: tilesCBounds[index],\n              textureBoundsD: tilesDBounds[index],\n              filterLowA: filterLowA,\n              filterHighA: filterHighA,\n              filterLowB: filterLowB,\n              filterHighB: filterHighB,\n              filterLowC: filterLowC,\n              filterHighC: filterHighC,\n              filterLowD: filterLowD,\n              filterHighD: filterHighD,\n              multiplierA: multiplierA,\n              multiplierB: multiplierB,\n              multiplierC: multiplierC,\n              multiplierD: multiplierD,\n            });\n\n            // Get encoded floatValues to use for mouseEvents\n            regl.read({data: resultEncodedPixelsTile});\n          });\n\n          // Flip readPixels result\n          resultEncodedPixelsTile = this.flipReadPixelsUint(tileSize, tileSize, resultEncodedPixelsTile);\n          // Add tile result to array\n          resultEncodedPixels[tileIndex] = resultEncodedPixelsTile;\n          tileIndex += 1;\n\n          this.drawTileMultiAnalyze4({\n            colorScale: webGLColorScale,\n            sentinelValues: webGLSentinelValues,\n            canvasSize,\n            canvasCoordinates: canvasCoords,\n            textureA: textureManagerA.texture,\n            textureB: textureManagerB.texture,\n            textureC: textureManagerC.texture,\n            textureD: textureManagerD.texture,\n            textureBoundsA: tilesABounds[index],\n            textureBoundsB: tilesBBounds[index],\n            textureBoundsC: tilesCBounds[index],\n            textureBoundsD: tilesDBounds[index],\n            filterLowA : filterLowA,\n            filterHighA : filterHighA,\n            filterLowB : filterLowB,\n            filterHighB : filterHighB,\n            filterLowC : filterLowC,\n            filterHighC : filterHighC,\n            filterLowD : filterLowD,\n            filterHighD : filterHighD,\n            multiplierA: multiplierA,\n            multiplierB: multiplierB,\n            multiplierC: multiplierC,\n            multiplierD: multiplierD,\n          });\n\n          fboTile.destroy();\n        });\n      }\n\n      // Invoke the callback with the canvas coordinates of the rendered tiles.\n      onFrameRendered(canvasCoordinates);\n    };\n\n    renderFrame();\n\n    //clean up TextureManagers\n    this.textureManagerA.destroy();\n    this.textureManagerB.destroy();\n    this.textureManagerC.destroy();\n    this.textureManagerD.destroy();\n    this.textureManagerA = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerB = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerC = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerD = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n\n    return resultEncodedPixels;\n  }\n\n  renderTilesWithMultiAnalyze5(\n    tilesA: TileDatum[],\n    tilesB: TileDatum[],\n    tilesC: TileDatum[],\n    tilesD: TileDatum[],\n    tilesE: TileDatum[],\n    colorScale: Color[],\n    sentinelValues: SentinelValue[],\n    filterLowA : number,\n    filterHighA : number,\n    filterLowB : number,\n    filterHighB : number,\n    filterLowC : number,\n    filterHighC : number,\n    filterLowD : number,\n    filterHighD : number,\n    filterLowE : number,\n    filterHighE : number,\n    multiplierA: number,\n    multiplierB: number,\n    multiplierC: number,\n    multiplierD: number,\n    multiplierE: number,\n    onFrameRendered: (canvasCoordinates: Array<Pair<number>>) => void,\n  ) {\n    const {\n      regl,\n      textureManagerA,\n      textureManagerB,\n      textureManagerC,\n      textureManagerD,\n      textureManagerE,\n      tileSize,\n    } = this;\n\n    // Compute required canvas dimensions, then resize the canvas.\n    const canvasSize = this.computeRequiredCanvasDimensions(tilesA.length);\n    const [canvasWidth, canvasHeight] = canvasSize;\n    this.setCanvasSize(canvasWidth, canvasHeight);\n\n    // Compute the coordinates at which each tile will be rendered in the canvas.\n    const canvasCoordinates = this.getCanvasCoordinates(canvasWidth, canvasHeight, tilesA.length);\n\n    interface TilesWithCanvasCoords {\n      canvasCoords: Pair<number>;\n      coords: TileCoordinates;\n      tilesAPixelData: Uint8Array;\n      tilesBPixelData: Uint8Array;\n      tilesCPixelData: Uint8Array;\n      tilesDPixelData: Uint8Array;\n      tilesEPixelData: Uint8Array;\n    }\n\n    // Form an array combining each tile datum with the coordinates at which it will be rendered.\n    const tilesWithCanvasCoordinates = zipWith<TileDatum | Pair<number>, TilesWithCanvasCoords>(\n      tilesA,\n      tilesB,\n      tilesC,\n      tilesD,\n      tilesE,\n      canvasCoordinates,\n      (tilesA: TileDatum, tilesB: TileDatum, tilesC: TileDatum, tilesD: TileDatum, tilesE: TileDatum, canvasCoords: Pair<number>) => ({\n        coords: tilesA.coords,\n        tilesAPixelData: tilesA.pixelData,\n        tilesBPixelData: tilesB.pixelData,\n        tilesCPixelData: tilesC.pixelData,\n        tilesDPixelData: tilesD.pixelData,\n        tilesEPixelData: tilesE.pixelData,\n        canvasCoords,\n      }),\n    );\n\n    // Convert the color scale and sentinel values to the form expected by WebGL.\n    const webGLColorScale = util.convertColorScale(colorScale);\n    const webGLSentinelValues = util.convertColorScale(sentinelValues);\n\n    let resultEncodedPixels: Uint8Array[] = [];\n\n    const renderFrame = () => {\n      // Split the tiles array into chunks the size of the texture capacity. If we need to render more\n      // tiles than will fit in the texture, we have to render in batches.\n      const chunks = chunk(tilesWithCanvasCoordinates, textureManagerA.tileCapacity);\n\n      // Clear the canvas.\n      regl.clear({ color: CLEAR_COLOR });\n\n      let tileIndex: number = 0;\n\n      // Render chunk by chunk.\n      for (const chunk of chunks) {\n        // Add tiles.\n        const tilesABounds = chunk.map(\n          ({ coords, tilesAPixelData }) => textureManagerA.addTile(coords, tilesAPixelData),\n        );\n        const tilesBBounds = chunk.map(\n          ({ coords, tilesBPixelData }) => textureManagerB.addTile(coords, tilesBPixelData),\n        );\n        const tilesCBounds = chunk.map(\n          ({ coords, tilesCPixelData }) => textureManagerC.addTile(coords, tilesCPixelData),\n        );\n        const tilesDBounds = chunk.map(\n          ({ coords, tilesDPixelData }) => textureManagerD.addTile(coords, tilesDPixelData),\n        );\n        const tilesEBounds = chunk.map(\n          ({ coords, tilesEPixelData }) => textureManagerE.addTile(coords, tilesEPixelData),\n        );\n\n        chunk.forEach(({ canvasCoords }, index) => {\n          let fboTile = regl.framebuffer({\n            width: tileSize,\n            height: tileSize,\n            depth: false,\n            colorFormat: 'rgba',\n            colorType: 'uint8'\n          });\n\n          let resultEncodedPixelsTile = new Uint8Array(tileSize * tileSize * 4);\n\n          fboTile.use(() => {\n            this.calcTileMultiAnalyze5({\n              canvasSize: [tileSize, tileSize],\n              canvasCoordinates: [0, 0],\n              textureA: textureManagerA.texture,\n              textureB: textureManagerB.texture,\n              textureC: textureManagerC.texture,\n              textureD: textureManagerD.texture,\n              textureE: textureManagerE.texture,\n              textureBoundsA: tilesABounds[index],\n              textureBoundsB: tilesBBounds[index],\n              textureBoundsC: tilesCBounds[index],\n              textureBoundsD: tilesDBounds[index],\n              textureBoundsE: tilesEBounds[index],\n              filterLowA: filterLowA,\n              filterHighA: filterHighA,\n              filterLowB: filterLowB,\n              filterHighB: filterHighB,\n              filterLowC: filterLowC,\n              filterHighC: filterHighC,\n              filterLowD: filterLowD,\n              filterHighD: filterHighD,\n              filterLowE: filterLowE,\n              filterHighE: filterHighE,\n              multiplierA: multiplierA,\n              multiplierB: multiplierB,\n              multiplierC: multiplierC,\n              multiplierD: multiplierD,\n              multiplierE: multiplierE,\n            });\n\n            // Get encoded floatValues to use for mouseEvents\n            regl.read({data: resultEncodedPixelsTile});\n          });\n\n          // Flip readPixels result\n          resultEncodedPixelsTile = this.flipReadPixelsUint(tileSize, tileSize, resultEncodedPixelsTile);\n          // Add tile result to array\n          resultEncodedPixels[tileIndex] = resultEncodedPixelsTile;\n          tileIndex += 1;\n\n          this.drawTileMultiAnalyze5({\n            colorScale: webGLColorScale,\n            sentinelValues: webGLSentinelValues,\n            canvasSize,\n            canvasCoordinates: canvasCoords,\n            textureA: textureManagerA.texture,\n            textureB: textureManagerB.texture,\n            textureC: textureManagerC.texture,\n            textureD: textureManagerD.texture,\n            textureE: textureManagerE.texture,\n            textureBoundsA: tilesABounds[index],\n            textureBoundsB: tilesBBounds[index],\n            textureBoundsC: tilesCBounds[index],\n            textureBoundsD: tilesDBounds[index],\n            textureBoundsE: tilesEBounds[index],\n            filterLowA : filterLowA,\n            filterHighA : filterHighA,\n            filterLowB : filterLowB,\n            filterHighB : filterHighB,\n            filterLowC : filterLowC,\n            filterHighC : filterHighC,\n            filterLowD : filterLowD,\n            filterHighD : filterHighD,\n            filterLowE : filterLowE,\n            filterHighE : filterHighE,\n            multiplierA: multiplierA,\n            multiplierB: multiplierB,\n            multiplierC: multiplierC,\n            multiplierD: multiplierD,\n            multiplierE: multiplierE,\n          });\n\n          fboTile.destroy();\n        });\n      }\n\n      // Invoke the callback with the canvas coordinates of the rendered tiles.\n      onFrameRendered(canvasCoordinates);\n    };\n\n    renderFrame();\n\n    //clean up TextureManagers\n    this.textureManagerA.destroy();\n    this.textureManagerB.destroy();\n    this.textureManagerC.destroy();\n    this.textureManagerD.destroy();\n    this.textureManagerE.destroy();\n    this.textureManagerA = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerB = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerC = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerD = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerE = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n\n    return resultEncodedPixels;\n  }\n\n  renderTilesWithMultiAnalyze6(\n    tilesA: TileDatum[],\n    tilesB: TileDatum[],\n    tilesC: TileDatum[],\n    tilesD: TileDatum[],\n    tilesE: TileDatum[],\n    tilesF: TileDatum[],\n    colorScale: Color[],\n    sentinelValues: SentinelValue[],\n    filterLowA : number,\n    filterHighA : number,\n    filterLowB : number,\n    filterHighB : number,\n    filterLowC : number,\n    filterHighC : number,\n    filterLowD : number,\n    filterHighD : number,\n    filterLowE: number,\n    filterHighE: number,\n    filterLowF: number,\n    filterHighF: number,\n    multiplierA: number,\n    multiplierB: number,\n    multiplierC: number,\n    multiplierD: number,\n    multiplierE: number,\n    multiplierF: number,\n    onFrameRendered: (canvasCoordinates: Array<Pair<number>>) => void,\n  ) {\n    const {\n      regl,\n      textureManagerA,\n      textureManagerB,\n      textureManagerC,\n      textureManagerD,\n      textureManagerE,\n      textureManagerF,\n      tileSize,\n    } = this;\n\n    // Compute required canvas dimensions, then resize the canvas.\n    const canvasSize = this.computeRequiredCanvasDimensions(tilesA.length);\n    const [canvasWidth, canvasHeight] = canvasSize;\n    this.setCanvasSize(canvasWidth, canvasHeight);\n\n    // Compute the coordinates at which each tile will be rendered in the canvas.\n    const canvasCoordinates = this.getCanvasCoordinates(canvasWidth, canvasHeight, tilesA.length);\n\n    interface TilesWithCanvasCoords {\n      canvasCoords: Pair<number>;\n      coords: TileCoordinates;\n      tilesAPixelData: Uint8Array;\n      tilesBPixelData: Uint8Array;\n      tilesCPixelData: Uint8Array;\n      tilesDPixelData: Uint8Array;\n      tilesEPixelData: Uint8Array;\n      tilesFPixelData: Uint8Array;\n    }\n\n    // Form an array combining each tile datum with the coordinates at which it will be rendered.\n    const tilesWithCanvasCoordinates = zipWith<TileDatum | Pair<number>, TilesWithCanvasCoords>(\n      tilesA,\n      tilesB,\n      tilesC,\n      tilesD,\n      tilesE,\n      tilesF,\n      canvasCoordinates,\n      (tilesA: TileDatum, tilesB: TileDatum, tilesC: TileDatum, tilesD: TileDatum, tilesE: TileDatum, tilesF: TileDatum, canvasCoords: Pair<number>) => ({\n        coords: tilesA.coords,\n        tilesAPixelData: tilesA.pixelData,\n        tilesBPixelData: tilesB.pixelData,\n        tilesCPixelData: tilesC.pixelData,\n        tilesDPixelData: tilesD.pixelData,\n        tilesEPixelData: tilesE.pixelData,\n        tilesFPixelData: tilesF.pixelData,\n        canvasCoords,\n      }),\n    );\n\n    // Convert the color scale and sentinel values to the form expected by WebGL.\n    const webGLColorScale = util.convertColorScale(colorScale);\n    const webGLSentinelValues = util.convertColorScale(sentinelValues);\n\n    let resultEncodedPixels: Uint8Array[] = [];\n\n    const renderFrame = () => {\n      // Split the tiles array into chunks the size of the texture capacity. If we need to render more\n      // tiles than will fit in the texture, we have to render in batches.\n      const chunks = chunk(tilesWithCanvasCoordinates, textureManagerA.tileCapacity);\n\n      // Clear the canvas.\n      regl.clear({ color: CLEAR_COLOR });\n\n      let tileIndex: number = 0;\n\n      // Render chunk by chunk.\n      for (const chunk of chunks) {\n        // Add tiles.\n        const tilesABounds = chunk.map(\n          ({ coords, tilesAPixelData }) => textureManagerA.addTile(coords, tilesAPixelData),\n        );\n        const tilesBBounds = chunk.map(\n          ({ coords, tilesBPixelData }) => textureManagerB.addTile(coords, tilesBPixelData),\n        );\n        const tilesCBounds = chunk.map(\n          ({ coords, tilesCPixelData }) => textureManagerC.addTile(coords, tilesCPixelData),\n        );\n        const tilesDBounds = chunk.map(\n          ({ coords, tilesDPixelData }) => textureManagerD.addTile(coords, tilesDPixelData),\n        );\n        const tilesEBounds = chunk.map(\n          ({ coords, tilesEPixelData }) => textureManagerE.addTile(coords, tilesEPixelData),\n        );\n        const tilesFBounds = chunk.map(\n          ({ coords, tilesFPixelData }) => textureManagerF.addTile(coords, tilesFPixelData),\n        );\n\n        chunk.forEach(({ canvasCoords }, index) => {\n          let fboTile = regl.framebuffer({\n            width: tileSize,\n            height: tileSize,\n            depth: false,\n            colorFormat: 'rgba',\n            colorType: 'uint8'\n          });\n\n          let resultEncodedPixelsTile = new Uint8Array(tileSize * tileSize * 4);\n\n          fboTile.use(() => {\n            this.calcTileMultiAnalyze6({\n              canvasSize: [tileSize, tileSize],\n              canvasCoordinates: [0, 0],\n              textureA: textureManagerA.texture,\n              textureB: textureManagerB.texture,\n              textureC: textureManagerC.texture,\n              textureD: textureManagerD.texture,\n              textureE: textureManagerE.texture,\n              textureF: textureManagerF.texture,\n              textureBoundsA: tilesABounds[index],\n              textureBoundsB: tilesBBounds[index],\n              textureBoundsC: tilesCBounds[index],\n              textureBoundsD: tilesDBounds[index],\n              textureBoundsE: tilesEBounds[index],\n              textureBoundsF: tilesFBounds[index],\n              filterLowA: filterLowA,\n              filterHighA: filterHighA,\n              filterLowB: filterLowB,\n              filterHighB: filterHighB,\n              filterLowC: filterLowC,\n              filterHighC: filterHighC,\n              filterLowD: filterLowD,\n              filterHighD: filterHighD,\n              filterLowE: filterLowE,\n              filterHighE: filterHighE,\n              filterLowF: filterLowF,\n              filterHighF: filterHighF,\n              multiplierA: multiplierA,\n              multiplierB: multiplierB,\n              multiplierC: multiplierC,\n              multiplierD: multiplierD,\n              multiplierE: multiplierE,\n              multiplierF: multiplierF,\n            });\n\n            // Get encoded floatValues to use for mouseEvents\n            regl.read({data: resultEncodedPixelsTile});\n          });\n\n          // Flip readPixels result\n          resultEncodedPixelsTile = this.flipReadPixelsUint(tileSize, tileSize, resultEncodedPixelsTile);\n          // Add tile result to array\n          resultEncodedPixels[tileIndex] = resultEncodedPixelsTile;\n          tileIndex += 1;\n\n          this.drawTileMultiAnalyze6({\n            colorScale: webGLColorScale,\n            sentinelValues: webGLSentinelValues,\n            canvasSize,\n            canvasCoordinates: canvasCoords,\n            textureA: textureManagerA.texture,\n            textureB: textureManagerB.texture,\n            textureC: textureManagerC.texture,\n            textureD: textureManagerD.texture,\n            textureE: textureManagerE.texture,\n            textureF: textureManagerF.texture,\n            textureBoundsA: tilesABounds[index],\n            textureBoundsB: tilesBBounds[index],\n            textureBoundsC: tilesCBounds[index],\n            textureBoundsD: tilesDBounds[index],\n            textureBoundsE: tilesEBounds[index],\n            textureBoundsF: tilesFBounds[index],\n            filterLowA: filterLowA,\n            filterHighA: filterHighA,\n            filterLowB: filterLowB,\n            filterHighB: filterHighB,\n            filterLowC: filterLowC,\n            filterHighC: filterHighC,\n            filterLowD: filterLowD,\n            filterHighD: filterHighD,\n            filterLowE: filterLowE,\n            filterHighE: filterHighE,\n            filterLowF: filterLowF,\n            filterHighF: filterHighF,\n            multiplierA: multiplierA,\n            multiplierB: multiplierB,\n            multiplierC: multiplierC,\n            multiplierD: multiplierD,\n            multiplierE: multiplierE,\n            multiplierF: multiplierF,\n          });\n\n          fboTile.destroy();\n        });\n      }\n\n      // Invoke the callback with the canvas coordinates of the rendered tiles.\n      onFrameRendered(canvasCoordinates);\n    };\n\n    renderFrame();\n\n    //clean up TextureManagers\n    this.textureManagerA.destroy();\n    this.textureManagerB.destroy();\n    this.textureManagerC.destroy();\n    this.textureManagerD.destroy();\n    this.textureManagerE.destroy();\n    this.textureManagerF.destroy();\n    this.textureManagerA = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerB = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerC = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerD = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerE = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n    this.textureManagerF = new TextureManager(regl, tileSize, MAX_TEXTURE_DIMENSION, false);\n\n    return resultEncodedPixels;\n  }\n\n  async renderTilesWithTransition(\n    oldTiles: TileDatum[],\n    newTiles: TileDatum[],\n    colorScale: Color[],\n    sentinelValues: SentinelValue[],\n    transitionDurationMs: number,\n    onFrameRendered: (canvasCoordinates: Array<Pair<number>>) => void,\n  ) {\n    const {\n      regl,\n      textureManager,\n      tileSize,\n      maxTextureDimension,\n    } = this;\n\n    // Compute required canvas dimensions, then resize the canvas.\n    const canvasSize = this.computeRequiredCanvasDimensions(oldTiles.length);\n    const [canvasWidth, canvasHeight] = canvasSize;\n    this.setCanvasSize(canvasWidth, canvasHeight);\n\n    // Compute the coordinates at which each tile will be rendered in the canvas.\n    const canvasCoordinates = this.getCanvasCoordinates(canvasWidth, canvasHeight, oldTiles.length);\n\n    interface TilesWithCanvasCoords {\n      canvasCoords: Pair<number>;\n      coords: TileCoordinates;\n      oldPixelData: Uint8Array;\n      newPixelData: Uint8Array;\n    }\n\n    // Form an array combining each tile datum with the coordinates at which it will be rendered.\n    const tilesWithCanvasCoordinates = zipWith<TileDatum | Pair<number>, TilesWithCanvasCoords>(\n      oldTiles,\n      newTiles,\n      canvasCoordinates,\n      (oldTile: TileDatum, newTile: TileDatum, canvasCoords: Pair<number>) => ({\n        coords: oldTile.coords,\n        oldPixelData: oldTile.pixelData,\n        newPixelData: newTile.pixelData,\n        canvasCoords,\n      }),\n    );\n\n    // Create a new TextureManager to hold the new data. After the transition, this will replace the\n    // Renderer's stored TextureManager.\n    const newTextureManager = new TextureManager(regl, tileSize, maxTextureDimension, false);\n\n    // Convert the color scale and sentinel values to the form expected by WebGL.\n    const webGLColorScale = util.convertColorScale(colorScale);\n    const webGLSentinelValues = util.convertColorScale(sentinelValues);\n\n    // Record the starting time.\n    const transitionStart = regl.now();\n\n    const renderFrame = (interpolationFraction: number) => {\n      // Split the tiles array into chunks the size of the texture capacity. If we need to render more\n      // tiles than will fit in the texture, we have to render in batches.\n      const chunks = chunk(tilesWithCanvasCoordinates, textureManager.tileCapacity);\n\n      // Clear the canvas.\n      regl.clear({ color: CLEAR_COLOR });\n\n      // Render chunk by chunk.\n      for (const chunk of chunks) {\n        // Add tiles.\n        const oldTextureBounds = chunk.map(\n          ({ coords, oldPixelData }) => textureManager.addTile(coords, oldPixelData),\n        );\n        const newTextureBounds = chunk.map(\n          ({ coords, newPixelData }) => newTextureManager.addTile(coords, newPixelData),\n        );\n\n        // Render each tile.\n        this.drawTileInterpolateValue(chunk.map(({ canvasCoords }, index) => ({\n          colorScale: webGLColorScale,\n          sentinelValues: webGLSentinelValues,\n          canvasSize,\n          canvasCoordinates: canvasCoords,\n          textureA: textureManager.texture,\n          textureB: newTextureManager.texture,\n          textureBoundsA: oldTextureBounds[index],\n          textureBoundsB: newTextureBounds[index],\n          interpolationFraction,\n        })));\n      }\n\n      // Invoke the callback with the canvas coordinates of the rendered tiles.\n      onFrameRendered(canvasCoordinates);\n    };\n\n    const animationHandle = regl.frame(({ time }) => {\n      const elapsedTimeMs = (time - transitionStart) * 1000;\n      const interpolationFraction = elapsedTimeMs / transitionDurationMs;\n      renderFrame(interpolationFraction);\n    });\n\n    await util.Timer(transitionDurationMs);\n    animationHandle.cancel();\n\n    // Render again, in case previous frames didn't make it all the way to interpolationFraction 1.0.\n    renderFrame(1);\n\n    // Clean up the old TextureManager and replace it with the new one.\n    this.textureManager.destroy();\n    this.textureManager = newTextureManager;\n  }\n\n  async renderTilesWithTransitionAndNewColorScale(\n    oldTiles: TileDatum[],\n    newTiles: TileDatum[],\n    oldColorScale: Color[],\n    newColorScale: Color[],\n    oldSentinelValues: SentinelValue[],\n    newSentinelValues: SentinelValue[],\n    transitionDurationMs: number,\n    onFrameRendered: (canvasCoordinates: Array<Pair<number>>) => void,\n  ) {\n    const {\n      regl,\n      textureManager,\n      tileSize,\n      maxTextureDimension,\n    } = this;\n\n    // Compute required canvas dimensions, then resize the canvas.\n    const canvasSize = this.computeRequiredCanvasDimensions(oldTiles.length);\n    const [canvasWidth, canvasHeight] = canvasSize;\n    this.setCanvasSize(canvasWidth, canvasHeight);\n\n    // Compute the coordinates at which each tile will be rendered in the canvas.\n    const canvasCoordinates = this.getCanvasCoordinates(canvasWidth, canvasHeight, oldTiles.length);\n\n    interface TilesWithCanvasCoords {\n      canvasCoords: Pair<number>;\n      coords: TileCoordinates;\n      oldPixelData: Uint8Array;\n      newPixelData: Uint8Array;\n    }\n\n    // Form an array combining each tile datum with the coordinates at which it will be rendered.\n    const tilesWithCanvasCoordinates = zipWith<TileDatum | Pair<number>, TilesWithCanvasCoords>(\n      oldTiles,\n      newTiles,\n      canvasCoordinates,\n      (oldTile: TileDatum, newTile: TileDatum, canvasCoords: Pair<number>) => ({\n        coords: oldTile.coords,\n        oldPixelData: oldTile.pixelData,\n        newPixelData: newTile.pixelData,\n        canvasCoords,\n      }),\n    );\n\n    // Create a new TextureManager to hold the new data. After the transition, this will replace the\n    // Renderer's stored TextureManager.\n    const newTextureManager = new TextureManager(regl, tileSize, maxTextureDimension, false);\n\n    // Convert the color scales and sentinel values to the form expected by WebGL.\n    const colorScaleA = util.convertColorScale(oldColorScale);\n    const colorScaleB = util.convertColorScale(newColorScale);\n    const sentinelValuesA = util.convertColorScale(oldSentinelValues);\n    const sentinelValuesB = util.convertColorScale(newSentinelValues);\n\n    // Record the starting time.\n    const transitionStart = regl.now();\n\n    const renderFrame = (interpolationFraction: number) => {\n      // Split the tiles array into chunks the size of the texture capacity. If we need to render more\n      // tiles than will fit in the texture, we have to render in batches.\n      const chunks = chunk(tilesWithCanvasCoordinates, textureManager.tileCapacity);\n\n      // Clear the canvas.\n      regl.clear({ color: CLEAR_COLOR });\n\n      // Render chunk by chunk.\n      for (const chunk of chunks) {\n        // Add tiles.\n        const oldTextureBounds = chunk.map(\n          ({ coords, oldPixelData }) => textureManager.addTile(coords, oldPixelData),\n        );\n        const newTextureBounds = chunk.map(\n          ({ coords, newPixelData }) => newTextureManager.addTile(coords, newPixelData),\n        );\n\n        // Render each tile.\n        this.drawTileInterpolateColor(chunk.map(({ canvasCoords }, index) => ({\n          colorScaleA,\n          colorScaleB,\n          sentinelValuesA,\n          sentinelValuesB,\n          canvasSize,\n          canvasCoordinates: canvasCoords,\n          textureA: textureManager.texture,\n          textureB: newTextureManager.texture,\n          textureBoundsA: oldTextureBounds[index],\n          textureBoundsB: newTextureBounds[index],\n          interpolationFraction,\n        })));\n      }\n\n      // Invoke the callback with the canvas coordinates of the rendered tiles.\n      onFrameRendered(canvasCoordinates);\n    };\n\n    const animationHandle = regl.frame(({ time }) => {\n      const elapsedTimeMs = (time - transitionStart) * 1000;\n      const interpolationFraction = elapsedTimeMs / transitionDurationMs;\n      renderFrame(interpolationFraction);\n    });\n\n    await util.Timer(transitionDurationMs);\n    animationHandle.cancel();\n\n    // Render again, in case previous frames didn't make it all the way to interpolationFraction 1.0.\n    renderFrame(1);\n\n    // Clean up the old TextureManager and replace it with the new one.\n    this.textureManager.destroy();\n    this.textureManager = newTextureManager;\n  }\n\n  async renderTilesWithTransitionAndNewColorScaleOnly(\n    tiles: TileDatum[],\n    oldColorScale: Color[],\n    newColorScale: Color[],\n    oldSentinelValues: SentinelValue[],\n    newSentinelValues: SentinelValue[],\n    transitionDurationMs: number,\n    onFrameRendered: (canvasCoordinates: Array<Pair<number>>) => void,\n  ) {\n    const {\n      regl,\n      textureManager,\n      tileSize,\n      maxTextureDimension,\n    } = this;\n\n    // Compute required canvas dimensions, then resize the canvas.\n    const canvasSize = this.computeRequiredCanvasDimensions(tiles.length);\n    const [canvasWidth, canvasHeight] = canvasSize;\n    this.setCanvasSize(canvasWidth, canvasHeight);\n\n    // Compute the coordinates at which each tile will be rendered in the canvas.\n    const canvasCoordinates = this.getCanvasCoordinates(canvasWidth, canvasHeight, tiles.length);\n\n    type TileWithCanvasCoords = TileDatum & { canvasCoords: Pair<number> };\n\n    // Form an array combining each tile datum with the coordinates at which it will be rendered.\n    const tilesWithCanvasCoordinates = zipWith<TileDatum | Pair<number>, TileWithCanvasCoords>(\n      tiles,\n      canvasCoordinates,\n      (tile: TileDatum, canvasCoords: Pair<number>) => ({\n        ...tile,\n        canvasCoords,\n      }),\n    );\n\n    // Create a new TextureManager to hold the new data. After the transition, this will replace the\n    // Renderer's stored TextureManager.\n    const newTextureManager = new TextureManager(regl, tileSize, maxTextureDimension, false);\n\n    // Convert the color scales and sentinel values to the form expected by WebGL.\n    const colorScaleA = util.convertColorScale(oldColorScale);\n    const colorScaleB = util.convertColorScale(newColorScale);\n    const sentinelValuesA = util.convertColorScale(oldSentinelValues);\n    const sentinelValuesB = util.convertColorScale(newSentinelValues);\n\n    // Record the starting time.\n    const transitionStart = regl.now();\n\n    const renderFrame = (interpolationFraction: number) => {\n      // Split the tiles array into chunks the size of the texture capacity. If we need to render more\n      // tiles than will fit in the texture, we have to render in batches.\n      const chunks = chunk(tilesWithCanvasCoordinates, textureManager.tileCapacity);\n\n      // Clear the canvas.\n      regl.clear({ color: CLEAR_COLOR });\n\n      // Render chunk by chunk.\n      for (const chunk of chunks) {\n        // Add tiles.\n        const textureBounds = chunk.map(\n          ({ coords, pixelData }) => textureManager.addTile(coords, pixelData),\n        );\n\n        // Render each tile.\n        this.drawTileInterpolateColorOnly(chunk.map(({ canvasCoords }, index) => ({\n          colorScaleA,\n          colorScaleB,\n          sentinelValuesA,\n          sentinelValuesB,\n          canvasSize,\n          canvasCoordinates: canvasCoords,\n          texture: textureManager.texture,\n          textureBounds: textureBounds[index],\n          interpolationFraction,\n        })));\n      }\n\n      // Invoke the callback with the canvas coordinates of the rendered tiles.\n      onFrameRendered(canvasCoordinates);\n    };\n\n    const animationHandle = regl.frame(({ time }) => {\n      const elapsedTimeMs = (time - transitionStart) * 1000;\n      const interpolationFraction = elapsedTimeMs / transitionDurationMs;\n      renderFrame(interpolationFraction);\n    });\n\n    await util.Timer(transitionDurationMs);\n    animationHandle.cancel();\n\n    // Render again, in case previous frames didn't make it all the way to interpolationFraction 1.0.\n    renderFrame(1);\n\n    // Clean up the old TextureManager and replace it with the new one.\n    this.textureManager.destroy();\n    this.textureManager = newTextureManager;\n  }\n\n  removeTile(tileCoordinates: TileCoordinates): void {\n    this.textureManager.removeTile(tileCoordinates);\n  }\n\n  protected setCanvasSize(width: number, height: number): void {\n    Object.assign(this.canvas, { width, height });\n  }\n\n  protected computeRequiredCanvasDimensions(numTiles: number): Pair<number> {\n    const { tileSize } = this;\n    const tilesAcross = Math.ceil(Math.sqrt(numTiles));\n    const tilesDown = Math.ceil(numTiles / tilesAcross);\n    return [tilesAcross * tileSize, tilesDown * tileSize];\n  }\n\n  protected getCanvasCoordinates(canvasWidth: number, canvasHeight: number, numTiles: number): Array<Pair<number>> {\n    const { tileSize } = this;\n    return flatMap(util.range(0, canvasHeight, tileSize), y =>\n      util.range(0, canvasWidth, tileSize).map(x => [x, y] as Pair<number>),\n    ).slice(0, numTiles);\n  }\n}\n","import * as L from 'leaflet';\nimport {\n  isUndefined,\n  mapValues,\n  noop,\n  pickBy,\n  values,\n  zipWith,\n} from 'lodash-es';\n\nimport './index.css';\n\nimport Renderer from './Renderer';\nimport {\n  GridLayerTile,\n  Pair,\n  PreloadTileCache,\n  TileCache,\n  TileCoordinates,\n  TileDatum,\n  TileElement,\n  TileEvent,\n  PixelValues,\n  HillshadeOptions,\n  ActiveTilesBounds,\n  Color,\n  SentinelValue,\n  ContourLabel,\n  ContourData,\n  Dictionary,\n} from './types';\nimport { ContourMultiPolygon } from 'd3-contour';\nimport * as util from './util';\nimport { select, selectAll, event } from \"d3-selection\";\nimport { scaleLinear } from \"d3-scale\";\nimport { geoPath } from \"d3-geo\";\nimport { contours } from \"d3-contour\";\nimport { json } from \"d3-request\";\nimport { min, max, scan, range } from \"d3-array\";\nimport { interpolateHcl } from \"d3-interpolate\";\nconst d3 = { select, selectAll, scaleLinear, geoPath, contours, interpolateHcl,\n  event, json, min, max, scan, range }\n\n/**\n * Augment Leaflet GridLayer definition to include some helpful \"private\" properties.\n *\n * Unfortunately, using properties that aren't part of GridLayer's public API makes this component\n * brittle. If GridLayer's implementation changes significantly, it could break this component.\n * I don't see a way around this limitation, however, without reimplementing much of GridLayer.\n */\ndeclare module 'leaflet' {\n  interface GridLayer {\n    _globalTileRange: L.Bounds;\n    _getTilePos(coords: L.Point): L.Point;\n    _keyToTileCoords(key: string): L.Point;\n    _pruneTiles(): void;\n    _removeAllTiles(): void;\n    _update(): void;\n    _level: Dictionary<any>;\n  }\n}\n\nconst BYTES_PER_WORD = 4; // four bytes in a 32-bit float\nconst littleEndian = util.machineIsLittleEndian();\n\nexport interface MouseEvent extends L.LeafletMouseEvent {\n  pixelValues?: PixelValues;\n}\n\ninterface EventsObject {\n  [name: string]: (event: L.LeafletEvent) => void;\n}\n\nexport interface Options extends L.GridLayerOptions {\n  url: string;\n  nodataValue: number;\n  colorScale?: Color[];\n  sentinelValues?: SentinelValue[];\n  extraPixelLayers?: number;\n  colorscaleMaxLength?: number,\n  sentinelMaxLength?: number,\n  preloadUrl?: string;\n  glOperation?: string;\n  multiLayers?: number;\n  operationUrlA?: string;\n  operationUrlB?: string;\n  operationUrlC?: string;\n  operationUrlD?: string;\n  operationUrlE?: string;\n  operationUrlF?: string;\n  filterLowA?: number;\n  filterHighA?: number;\n  filterLowB?: number;\n  filterHighB?: number;\n  filterLowC?: number;\n  filterHighC?: number;\n  filterLowD?: number;\n  filterHighD?: number;\n  filterLowE?: number;\n  filterHighE?: number;\n  filterLowF?: number;\n  filterHighF?: number;\n  multiplierA?: number;\n  multiplierB?: number;\n  multiplierC?: number;\n  multiplierD?: number;\n  multiplierE?: number;\n  multiplierF?: number;\n  transitions?: boolean;\n  transitionTimeMs?: number;\n  debug: boolean;\n\n  // Hillshading\n  hillshadeType: string;\n  hsElevationScale?: number;\n  hsSimpleZoomdelta?: number;\n  hsSimpleSlopescale?: number;\n  hsSimpleAzimuth?: number;\n  hsSimpleAltitude?: number;\n  hsAdvSoftIterations?: number;\n  hsAdvAmbientIterations?: number;\n  hsAdvSunRadiusMultiplier?: number;\n  hsAdvFinalSoftMultiplier?: number;\n  hsAdvFinalAmbientMultiplier?: number;\n  hsPregenUrl?: string;\n  _hillshadeOptions?: HillshadeOptions;\n\n  // Contours\n  contourPane?: HTMLElement;\n  contourCanvas?: HTMLCanvasElement;\n  contourType?: string;\n  contourSmoothLines: boolean;\n  contourSmoothInput: boolean;\n  contourSmoothInputKernel: number;\n  contourScaleFactor: number;\n  contourInterval: number;\n  contourIndexInterval: number;\n  contourLineColor: string;\n  contourLineWeight: number; // px\n  contourLineIndexWeight: number; // px\n  contourIndexLabels: boolean;\n  contourLabelFont: string;\n  contourLabelDistance: number;\n  contourIlluminatedHighlightColor: string;\n  contourIlluminatedShadowColor: string;\n  contourIlluminatedShadowSize: number; // px\n  contourHypso: boolean;\n  contourHypsoDomain: number[];\n  contourHypsoColors: string[];\n  contourBathy: boolean;\n  contourBathyDomain: number[];\n  contourBathyColors: string[];\n  contourBathyShadowColor: string[];\n  contourBathyHighlightColor: string[];\n\n  // handler for the 'load' event, fired when all tiles loaded.\n  onload?: (event: { url: string }) => void;\n\n  // mouse event handlers\n  onclick?: (event: MouseEvent) => void;\n  ondblclick?: (event: MouseEvent) => void;\n  onmousedown?: (event: MouseEvent) => void;\n  onmouseup?: (event: MouseEvent) => void;\n  onmouseover?: (event: MouseEvent) => void;\n  onmouseout?: (event: MouseEvent) => void;\n  onmousemove?: (event: MouseEvent) => void;\n  oncontextmenu?: (event: MouseEvent) => void;\n\n  // from TileLayerOptions\n  minZoom?: number;\n  maxZoom?: number;\n  subdomains?: string | string[];\n  maxNativeZoom?: number;\n  minNativeZoom?: number;\n  errorTileUrl?: string;\n  zoomOffset?: number;\n  tms?: boolean;\n  zoomReverse?: boolean;\n  detectRetina?: boolean;\n  crossOrigin?: boolean;\n}\n\nconst defaultOptions = {\n  colorScale: [],\n  sentinelValues: [],\n  transitions: false,\n  transitionTimeMs: 800,\n  debug: false,\n  extraPixelLayers: 0,\n  colorscaleMaxLength: 16,\n  sentinelMaxLength: 16,\n\n  // default TileLayer options\n  minZoom: 0,\n  maxZoom: 18,\n  subdomains: 'abc',\n  errorTileUrl: '',\n  zoomOffset: 0,\n  tms: false,\n  zoomReverse: false,\n  detectRetina: false,\n  crossOrigin: false,\n\n  //multi-analyze default options\n  glOperation: 'none',\n  multiLayers: 0,\n  operationUrlA: '',\n  operationUrlB: '',\n  operationUrlC: '',\n  operationUrlD: '',\n  operationUrlE: '',\n  operationUrlF: '',\n  filterLowA: 0,\n  filterHighA: 100000,\n  filterLowB: 0,\n  filterHighB: 100000,\n  filterLowC: 0,\n  filterHighC: 100000,\n  filterLowD: 0,\n  filterHighD: 100000,\n  filterLowE: 0,\n  filterHighE: 100000,\n  filterLowF: 0,\n  filterHighF: 100000,\n  multiplierA: 1,\n  multiplierB: 1,\n  multiplierC: 1,\n  multiplierD: 1,\n  multiplierE: 1,\n  multiplierF: 1,\n\n  // Hillshading default options\n  hillshadeType: 'none', // none, simple or pregen\n  hsElevationScale: 1.0,\n  hsSimpleZoomdelta: 0,\n  hsSimpleSlopescale: 3.0,\n  hsSimpleAzimuth: 315,\n  hsSimpleAltitude: 70,\n  hsAdvSoftIterations: 128,\n  hsAdvAmbientIterations: 40,\n  hsAdvSunRadiusMultiplier: 100,\n  hsAdvFinalSoftMultiplier: 4.0,\n  hsAdvFinalAmbientMultiplier: 0.25,\n  hsPregenUrl: '',\n  _hillshadeOptions: { hillshadeType: 'none' },\n\n  // Contours default options\n  contourType: 'none', // none, lines or illuminated\n  contourSmoothLines: false,\n  contourSmoothInput: false,\n  contourSmoothInputKernel: 7,\n  contourScaleFactor: 1,\n  contourInterval: 25,\n  contourIndexInterval: 100,\n  contourLineColor: '#000000',\n  contourIlluminatedHighlightColor: 'rgba(177,174,164,.5)',\n  contourIlluminatedShadowColor: '#5b5143',\n  contourIlluminatedShadowSize: 2, // px\n  contourLineWeight: 0.5, // px\n  contourLineIndexWeight: 2.0, // px\n  contourIndexLabels: false,\n  contourLabelFont: '12px Arial',\n  contourLabelDistance: 250,\n  contourHypso: false,\n  contourHypsoDomain: [0, 1000, 2000],\n  contourHypsoColors: [\"#486341\", \"#e5d9c9\", \"#dddddd\"],\n  contourBathy: false,\n  contourBathyDomain: [-2000, 0],\n  contourBathyColors: [\"#315d9b\", \"#d5f2ff\"],\n  contourBathyShadowColor: '#4e5c66',\n  contourBathyHighlightColor: 'rgba(224, 242, 255, .5)',\n};\n\n/**\n * The options type used internally. Because submitted options are merged with defaults, fewer\n * properties have the potential to be `undefined` compared with `Options`.\n */\nexport type InternalOptions = Options & typeof defaultOptions;\n\nexport default class GLOperations extends L.GridLayer {\n  static readonly defaultOptions = defaultOptions;\n\n  options: InternalOptions;\n\n  protected _map: L.Map;\n  protected _renderer: Renderer;\n  protected _preloadTileCache?: PreloadTileCache;\n  // We need to define the `_tiles` cache with the same type as in the base class,\n  // though our `_tiles` property is actually of type `TileCache`\n  protected _tiles: L.InternalTiles;\n\n  protected _contourData: ContourData = {};\n  // protected _mergedTileArray: number[];\n\n  constructor(options: Options) {\n    // Merge options with defaults and invoke GridLayer's constructor,\n    // which sets the merged options as `this.options`.\n    super(Object.assign({}, defaultOptions, options));\n\n    this._checkColorScaleAndSentinels();\n\n    const {\n      nodataValue,\n      preloadUrl,\n    } = this.options;\n\n    const tileSize: number = this._tileSizeAsNumber();\n    const renderer = new Renderer(tileSize, nodataValue, this.options.colorscaleMaxLength, this.options.sentinelMaxLength);\n\n    // Set instance properties.\n    Object.assign(this, {\n      _renderer: renderer,\n      _preloadTileCache: undefined,\n    });\n\n    this._maybePreload(preloadUrl);\n\n    // Listen for 'tileunload' event to remove the tile from the texture.\n    this.on('tileunload', this._onTileRemove.bind(this));\n\n    // Listen for all visible tiles loaded. If using contours then run update\n    this.on('load', _ => setTimeout(() => {\n      if (this.options.debug) console.log(\"all tiles loaded. Updating contours if enabled.\")\n      this._maybeUpdateMergedArrayAndDrawContours();\n      // delay due to: https://github.com/Leaflet/Leaflet/blob/master/src/map/Map.js#L1696\n    }, 300));\n\n    // Listen for zoom changes. Necessary when using fractional zoom levels.\n    setTimeout(() => {\n      this._map.on('zoomend', _ => setTimeout(async () => {\n        if (this.options.contourType !== 'none') {\n          if (this.options.debug) console.log(\"zoom changed. Moving contour canvas.\")\n          let activeTilesBounds: ActiveTilesBounds = await this._getActivetilesBounds();\n          this._moveContourCanvas(activeTilesBounds);\n        }\n      }, 50));\n    }, 300);\n  }\n\n\n  /**\n   * The GLTileLayerComponent exposes a declarative interface. Changes should be triggered by\n   * calling this method to update the options. Figuring out how to reconcile the layer's current\n   * state with the updated options is the responsibility of the component. Unlike many other\n   * Leaflet components, no other public methods are provided for imperatively changing the\n   * component's state.\n   */\n  updateOptions(options: Partial<Options>) {\n    const {\n      url: prevUrl,\n      glOperation: prevGlOperation,\n      operationUrlA: prevUrlA,\n      operationUrlB: prevUrlB,\n      operationUrlC: prevUrlC,\n      operationUrlD: prevUrlD,\n      operationUrlE: prevUrlE,\n      operationUrlF: prevUrlF,\n      colorScale: prevColorScale,\n      sentinelValues: prevSentinelValues,\n      filterLowA: prevFilterLowA,\n      filterHighA: prevFilterHighA,\n      filterLowB: prevFilterLowB,\n      filterHighB: prevFilterHighB,\n      filterLowC: prevFilterLowC,\n      filterHighC: prevFilterHighC,\n      filterLowD: prevFilterLowD,\n      filterHighD: prevFilterHighD,\n      filterLowE: prevFilterLowE,\n      filterHighE: prevFilterHighE,\n      filterLowF: prevFilterLowF,\n      filterHighF: prevFilterHighF,\n      multiplierA: prevMultiplierA,\n      multiplierB: prevMultiplierB,\n      multiplierC: prevMultiplierC,\n      multiplierD: prevMultiplierD,\n      multiplierE: prevMultiplierE,\n      multiplierF: prevMultiplierF,\n      multiLayers: prevMultiLayers,\n      hsPregenUrl: prevHsPregenUrl,\n      hillshadeType: prevHillshadeType,\n      hsSimpleSlopescale: prevHsSimpleSlopescale,\n      contourInterval: prevContourInterval,\n      contourIndexInterval: prevContourIndexInterval,\n      contourLineColor: prevContourLineColor,\n      contourLineWeight: prevContourLineWeight,\n      contourLineIndexWeight: prevContourLineIndexWeight,\n      contourType: prevContourType,\n      contourSmoothLines: prevContourSmoothLines,\n      contourSmoothInput: prevContourSmoothInput,\n      contourSmoothInputKernel: prevContourSmoothInputKernel,\n      contourIlluminatedHighlightColor: prevContourIlluminatedHighlightColor,\n      contourIlluminatedShadowColor: prevContourIlluminatedShadowColor,\n      contourIlluminatedShadowSize: prevContourIlluminatedShadowSize,\n      contourHypso: prevContourHypso,\n      contourHypsoDomain: prevContourHypsoDomain,\n      contourHypsoColors: prevContourHypsoColors,\n      contourBathy: prevContourBathy,\n      contourBathyDomain: prevContourBathyDomain,\n      contourBathyColors: prevContourBathyColors,\n      contourBathyShadowColor: prevContourBathyShadowColor,\n      contourBathyHighlightColor: prevContourBathyHighlightColor,\n      contourIndexLabels: prevContourIndexLabels,\n      contourLabelFont: prevContourLabelFont,\n      contourLabelDistance: prevContourLabelDistance,\n      colorscaleMaxLength: prevScaleMaxLength,\n      sentinelMaxLength: prevSentinelMaxLength,\n    } = this.options;\n    L.Util.setOptions(this, options);\n    // create new renderer of max length of sentinels or colorscale changes\n    if (this.options.colorscaleMaxLength !== prevScaleMaxLength || this.options.sentinelMaxLength !== prevSentinelMaxLength) {\n      if (this.options.debug) console.log(\"Creating new renderer\");\n      const tileSize: number = this._tileSizeAsNumber();\n      const renderer = new Renderer(tileSize, this.options.nodataValue, this.options.colorscaleMaxLength, this.options.sentinelMaxLength);\n\n      this._renderer.regl.destroy();\n      delete this._renderer;\n\n      Object.assign(this, {\n        _renderer: renderer\n      });\n    }\n    this._checkColorScaleAndSentinels();\n    this._maybePreload(this.options.preloadUrl);\n    this.options._hillshadeOptions = {\n      hillshadeType: this.options.hillshadeType,\n      hsElevationScale: this.options.hsElevationScale,\n      hsSimpleSlopescale: this.options.hsSimpleSlopescale,\n      hsSimpleAzimuth: this.options.hsSimpleAzimuth,\n      hsSimpleAltitude: this.options.hsSimpleAltitude,\n      hsSimpleZoomdelta: this.options.hsSimpleZoomdelta,\n      hsAdvSoftIterations: this.options.hsAdvSoftIterations,\n      hsAdvAmbientIterations: this.options.hsAdvAmbientIterations,\n      hsAdvSunRadiusMultiplier: this.options.hsAdvSunRadiusMultiplier,\n      hsAdvFinalSoftMultiplier: this.options.hsAdvFinalSoftMultiplier,\n      hsAdvFinalAmbientMultiplier: this.options.hsAdvFinalAmbientMultiplier,\n      hsPregenUrl: this.options.hsPregenUrl,\n    };\n\n    if (this.options.extraPixelLayers > 0 && this.options.glOperation === 'none') {\n      this._maybeLoadExtraLayers(prevUrlA, prevUrlB, prevUrlC, prevUrlD);\n    }\n    // TODO: Fix shader so hillshading works ok with larger texture than tileSize\n    if (this.options.hillshadeType !== prevHillshadeType) {\n      // reduce textureManager size as simple hillshading type currently gets \"edges\" around the tiles with larger texture.\n      if (this.options.hillshadeType === 'simple') {\n        this._renderer.setMaxTextureDimension(this._tileSizeAsNumber());\n      } else if (prevHillshadeType === 'simple') {\n        let maxTextureDimension = this._renderer.findMaxTextureDimension();\n        this._renderer.setMaxTextureDimension(maxTextureDimension);\n      }\n    }\n    if (this.options.glOperation === 'none') {\n      if (this.options.transitions) {\n        if (this.options.url !== prevUrl) {\n          this._updateTilesWithTransitions(prevColorScale, prevSentinelValues);\n          if (this.options.debug) console.log(\"Running GLOperations with transition on tiles\");\n        } else if (this.options.url === prevUrl) {\n          this._updateColorscaleWithTransitions(prevColorScale, prevSentinelValues);\n          if (this.options.debug) console.log(\"Running GLOperations with transition on colorscale only\");\n        }\n      } else {\n        if (this.options.url !== prevUrl || this.options.hillshadeType !== prevHillshadeType || this.options.hsPregenUrl !== prevHsPregenUrl || this.options.hsSimpleSlopescale !== prevHsSimpleSlopescale) {\n          this._updateTiles();\n          if (this.options.debug) console.log(\"Running GLOperations with new url, no transition and no operation\");\n        } else {\n          if (JSON.stringify(this.options.colorScale) !== JSON.stringify(prevColorScale)) {\n            this._updateTilesColorscaleOnly();\n            if (this.options.debug) console.log(\"Running GLOperations with same url, no transition and no operation\");\n          }\n        }\n      }\n    } else if (this.options.glOperation === 'multi') {\n      if (this.options.multiLayers === 1) {\n        this._updateTilesWithMultiAnalyze1(prevGlOperation, prevMultiLayers, prevUrlA,\n          prevFilterLowA, prevFilterHighA, prevMultiplierA);\n      } else if (this.options.multiLayers === 2) {\n        this._updateTilesWithMultiAnalyze2(prevGlOperation, prevMultiLayers, prevUrlA, prevUrlB,\n          prevFilterLowA, prevFilterHighA, prevFilterLowB, prevFilterHighB,\n          prevMultiplierA, prevMultiplierB);\n      } else if (this.options.multiLayers === 3) {\n          this._updateTilesWithMultiAnalyze3(prevGlOperation, prevMultiLayers, prevUrlA, prevUrlB, prevUrlC,\n            prevFilterLowA, prevFilterHighA, prevFilterLowB, prevFilterHighB, prevFilterLowC, prevFilterHighC,\n            prevMultiplierA, prevMultiplierB, prevMultiplierC);\n      } else if (this.options.multiLayers === 4) {\n        this._updateTilesWithMultiAnalyze4(prevGlOperation, prevMultiLayers, prevUrlA, prevUrlB, prevUrlC, prevUrlD,\n          prevFilterLowA, prevFilterHighA, prevFilterLowB, prevFilterHighB, prevFilterLowC, prevFilterHighC,\n          prevFilterLowD, prevFilterHighD, prevMultiplierA, prevMultiplierB, prevMultiplierC, prevMultiplierD);\n      } else if (this.options.multiLayers === 5) {\n        this._updateTilesWithMultiAnalyze5(prevGlOperation, prevMultiLayers, prevUrlA, prevUrlB, prevUrlC, prevUrlD, prevUrlE,\n          prevFilterLowA, prevFilterHighA, prevFilterLowB, prevFilterHighB, prevFilterLowC, prevFilterHighC,\n          prevFilterLowD, prevFilterHighD, prevFilterLowE, prevFilterHighE, prevMultiplierA, prevMultiplierB,\n          prevMultiplierC, prevMultiplierD, prevMultiplierE);\n      } else if (this.options.multiLayers === 6) {\n        this._updateTilesWithMultiAnalyze6(prevGlOperation, prevMultiLayers, prevUrlA, prevUrlB, prevUrlC, prevUrlD, prevUrlE, prevUrlF,\n          prevFilterLowA, prevFilterHighA, prevFilterLowB, prevFilterHighB, prevFilterLowC, prevFilterHighC,\n          prevFilterLowD, prevFilterHighD, prevFilterLowE, prevFilterHighE, prevFilterLowF, prevFilterHighF,\n          prevMultiplierA, prevMultiplierB, prevMultiplierC, prevMultiplierD, prevMultiplierE, prevMultiplierF);\n      };\n      if (this.options.debug) console.log(\"Running GLOperations with multiAnalyze\");\n    } else if (this.options.glOperation === 'diff') {\n      this._updateTilesWithDiff(prevGlOperation, prevUrlA, prevUrlB);\n      if (this.options.debug) console.log(\"Running GLOperations with diff\");\n    }\n\n    // Contour handling\n    if (this.options.contourType !== 'none') {\n      if (this.options.contourType !== prevContourType && prevContourType === 'none') {\n        if(this._contourData.mergedTileArray) {\n          setTimeout(() => {\n            this._calculateAndDrawContours();\n          }, 50);\n        } else {\n          setTimeout(() => {\n            this._maybeUpdateMergedArrayAndDrawContours();\n          }, 50);\n        }\n      } else if (\n        this.options.contourSmoothInput && (\n          this.options.contourSmoothInput !== prevContourSmoothInput ||\n          this.options.contourSmoothInputKernel !== prevContourSmoothInputKernel\n        )\n      ) {\n        setTimeout(async () => {\n          await this._smoothContourInput();\n          this._calculateAndDrawContours();\n        }, 50);\n      } else if (\n        this.options.contourInterval !== prevContourInterval ||\n        this.options.contourIndexInterval !== prevContourIndexInterval ||\n        this.options.contourSmoothLines !== prevContourSmoothLines ||\n        this.options.contourSmoothInput !== prevContourSmoothInput\n      ) {\n        setTimeout(() => {\n          this._calculateAndDrawContours();\n        }, 50);\n      } else if (\n        this.options.contourType !== prevContourType ||\n        this.options.contourLineColor !== prevContourLineColor ||\n        this.options.contourLineWeight !== prevContourLineWeight ||\n        this.options.contourLineIndexWeight !== prevContourLineIndexWeight ||\n        this.options.contourIlluminatedHighlightColor !== prevContourIlluminatedHighlightColor ||\n        this.options.contourIlluminatedShadowColor !== prevContourIlluminatedShadowColor ||\n        this.options.contourIlluminatedShadowSize !== prevContourIlluminatedShadowSize ||\n        this.options.contourHypso !== prevContourHypso ||\n        this.options.contourHypsoDomain !== prevContourHypsoDomain ||\n        this.options.contourHypsoColors !== prevContourHypsoColors ||\n        this.options.contourBathy !== prevContourBathy ||\n        this.options.contourBathyDomain !== prevContourBathyDomain ||\n        this.options.contourBathyColors !== prevContourBathyColors ||\n        this.options.contourBathyShadowColor !== prevContourBathyShadowColor ||\n        this.options.contourBathyHighlightColor !== prevContourBathyHighlightColor ||\n        this.options.contourIndexLabels !== prevContourIndexLabels ||\n        this.options.contourLabelFont !== prevContourLabelFont ||\n        this.options.contourLabelDistance !== prevContourLabelDistance\n      ) {\n        this._drawContours();\n      }\n    } else if (this.options.contourType !== prevContourType && this.options.contourType === 'none') {\n      this._clearContours();\n      this._contourData.mergedTileArray = undefined;\n    }\n  };\n\n\n  /**\n   * We need to register all mouse event handlers on the Leaflet Map component. `Leaflet.Layer`\n   * does this automatically for any handlers returned from the optional method `getEvents`.\n   *\n   * We enhance the `MouseEvent` object Leaflet provides to these handlers with an additional\n   * property containing the value of the pixel under the cursor.\n   */\n  getEvents() {\n    const {\n      onclick: click,\n      ondblclick: dblclick,\n      onmousedown: mousedown,\n      onmouseup: mouseup,\n      onmouseover: mouseover,\n      onmouseout: mouseout,\n      onmousemove: mousemove,\n      oncontextmenu: contextmenu,\n    } = this.options;\n    // Only include handlers that aren't undefined.\n    const definedHandlers = pickBy({\n      click,\n      dblclick,\n      mousedown,\n      mouseup,\n      mouseover,\n      mouseout,\n      mousemove,\n      contextmenu,\n    }, handler => !isUndefined(handler));\n    // Combine events defined on this class with events defined on the parent GridLayer.\n    return {\n      // Include events from GridLayer.\n      ...(L.GridLayer.prototype.getEvents as () => EventsObject).call(this),\n      // Wrap each handler to provide property `pixelValue` on the event object.\n      ...mapValues(definedHandlers, val => val && this._wrapMouseEventHandler(val)),\n    };\n  }\n\n  /**\n   * adapted from L.TileLayer (v1.2.0):\n   * modified to accept a `url` parameter to allow loading from a URL other than `this.options.url`\n   */\n  getTileUrl(coords: TileCoordinates, url: string) {\n    const data: any = {\n      r: L.Browser.retina ? '@2x' : '',\n      s: this._getSubdomain(coords),\n      x: coords.x,\n      y: coords.y,\n      z: this._getZoomForUrl(),\n    };\n    if (this._map && !((this._map.options as L.MapOptions).crs as L.CRS).infinite) {\n      const invertedY = (this._globalTileRange.max as L.Point).y - coords.y;\n      if (this.options.tms) {\n        data.y = invertedY;\n      }\n      data['-y'] = invertedY;\n    }\n\n    return L.Util.template(url, L.Util.extend(data, this.options));\n  }\n\n  /**\n   * Causes the layer to clear all the tiles and request them again\n   * Currently no changes from L.GridLayer implementation\n   */\n  redraw() {\n    if (this._map) {\n      if (this.options.debug) console.log(\"redraw() called\");\n      this._removeAllTiles();\n      this._update();\n    }\n    return this;\n  }\n\n  /**\n   * This function is called by the underlying Leaflet.GridLayer when it creates a new tile. This\n   * occurs (a) when the layer first loads and (b) when panning or zooming the map.\n   */\n  createTile(coords: TileCoordinates, done: L.DoneCallback): TileElement {\n    const {\n      colorScale,\n      sentinelValues,\n      extraPixelLayers,\n      tileSize,\n      url,\n      hsPregenUrl,\n      operationUrlA,\n      operationUrlB,\n      operationUrlC,\n      operationUrlD,\n      operationUrlE,\n      operationUrlF,\n      filterLowA,\n      filterHighA,\n      filterLowB,\n      filterHighB,\n      filterLowC,\n      filterHighC,\n      filterLowD,\n      filterHighD,\n      filterLowE,\n      filterHighE,\n      filterLowF,\n      filterHighF,\n      multiplierA,\n      multiplierB,\n      multiplierC,\n      multiplierD,\n      multiplierE,\n      multiplierF,\n    } = this.options;\n\n    if (this.options.debug) console.log(\"createTile\");\n\n    // Create a <canvas> element to contain the rendered image.\n    const tileCanvas = L.DomUtil.create('canvas') as TileElement;\n    // Configure the element.\n    Object.assign(tileCanvas, {\n      className: 'gl-tilelayer-tile',\n      width: tileSize,\n      height: tileSize,\n    });\n\n    if (this.options.glOperation === 'none') {\n      //Download an extra layer if required\n      if (extraPixelLayers === 1) {\n        this._fetchTileData(coords, operationUrlA).then((pixelDataA) => {\n          if (this.options.debug) console.log(\"createTile - extraPixelLayers === 1\");\n          tileCanvas.pixelDataA = pixelDataA;\n        });\n      };\n\n      if (this.options._hillshadeOptions.hillshadeType === 'pregen') {\n        Promise.all([\n          this._fetchTileData(coords, url),\n          this._fetchTileData(coords, hsPregenUrl),\n        ]).then((pixelDataArray) => {\n          // Render in `renderer`'s WebGL context.\n          if (this.options.debug) console.log(\"_fetchTileData with pregen hs\")\n          var pixelData: Uint8Array = pixelDataArray[0];\n          var pixelDataHs: Uint8Array = pixelDataArray[1];\n\n          const [sourceX, sourceY] = this._renderer.renderTileHsPregen(\n            { coords: coords, pixelData: pixelData },\n            { coords: coords, pixelData: pixelDataHs },\n            colorScale,\n            sentinelValues,\n            this.options._hillshadeOptions,\n          );\n\n          // Copy pixel data to a property on tile canvas element (for later retrieval).\n          tileCanvas.pixelData = pixelData;\n          tileCanvas.pixelDataHsPregen = pixelDataHs;\n\n          // Copy contents to tileCanvas.\n          this._copyToTileCanvas(tileCanvas, sourceX, sourceY);\n          done(undefined, tileCanvas);\n        });\n      } else {\n        // Retrieve and decode Float-32 PNG.\n        this._fetchTileData(coords, url).then((pixelData) => {\n          // Render in `renderer`'s WebGL context.\n          if (this.options.debug) console.log(\"_fetchTileData with no operation\")\n          const [sourceX, sourceY] = this._renderer.renderTile(\n            { coords, pixelData },\n            colorScale,\n            sentinelValues,\n            this.options._hillshadeOptions,\n            this._getZoomForUrl(),\n          );\n\n          // Copy pixel data to a property on tile canvas element (for later retrieval).\n          tileCanvas.pixelData = pixelData;\n\n          // Copy contents to tileCanvas.\n          this._copyToTileCanvas(tileCanvas, sourceX, sourceY);\n          done(undefined, tileCanvas);\n        });\n      }\n    } else if (this.options.glOperation === 'diff') {\n      Promise.all([\n        this._fetchTileData(coords, operationUrlA),\n        this._fetchTileData(coords, operationUrlB),\n      ]).then((pixelDataArray) => {\n        // Render in `renderer`'s WebGL context.\n        if (this.options.debug) console.log(\"_fetchTileData with diff\");\n        var pixelDataA: Uint8Array = pixelDataArray[0];\n        var pixelDataB: Uint8Array = pixelDataArray[1];\n        const [sourceX, sourceY, resultEncodedPixels] = this._renderer.renderTileDiff(\n          { coords: coords, pixelData: pixelDataA },\n          { coords: coords, pixelData: pixelDataB },\n          colorScale,\n          sentinelValues,\n        );\n\n        tileCanvas.pixelData = <Uint8Array>resultEncodedPixels;\n        tileCanvas.pixelDataA = pixelDataA;\n        tileCanvas.pixelDataB = pixelDataB;\n\n        // Copy contents to tileCanvas.\n        this._copyToTileCanvas(tileCanvas, sourceX, sourceY);\n        done(undefined, tileCanvas);\n      });\n    } else if (this.options.glOperation === 'multi' && this.options.multiLayers === 1) {\n      Promise.all([\n        this._fetchTileData(coords, operationUrlA)\n      ]).then((pixelDataArray) => {\n        // Render in `renderer`'s WebGL context.\n        if (this.options.debug) console.log(\"_fetchTileData with multi\");\n        var pixelDataA: Uint8Array = pixelDataArray[0];\n        const [sourceX, sourceY, resultEncodedPixels] = this._renderer.renderTileMulti1(\n          { coords: coords, pixelData: pixelDataA },\n          colorScale,\n          sentinelValues,\n          filterLowA,\n          filterHighA,\n          multiplierA,\n        );\n\n        // Copy pixel data to a property on tile canvas element (for later retrieval).\n        tileCanvas.pixelData = <Uint8Array>resultEncodedPixels;\n        tileCanvas.pixelDataA = pixelDataA;\n\n        // Copy contents to tileCanvas.\n        this._copyToTileCanvas(tileCanvas, sourceX, sourceY);\n        done(undefined, tileCanvas);\n      });\n    } else if (this.options.glOperation === 'multi' && this.options.multiLayers === 2) {\n      Promise.all([\n        this._fetchTileData(coords, operationUrlA),\n        this._fetchTileData(coords, operationUrlB),\n      ]).then((pixelDataArray) => {\n        // Render in `renderer`'s WebGL context.\n        if (this.options.debug) console.log(\"_fetchTileData with multi\");\n        var pixelDataA: Uint8Array = pixelDataArray[0];\n        var pixelDataB: Uint8Array = pixelDataArray[1];\n        const [sourceX, sourceY, resultEncodedPixels] = this._renderer.renderTileMulti2(\n          { coords: coords, pixelData: pixelDataA },\n          { coords: coords, pixelData: pixelDataB },\n          colorScale,\n          sentinelValues,\n          filterLowA,\n          filterHighA,\n          filterLowB,\n          filterHighB,\n          multiplierA,\n          multiplierB,\n        );\n\n        // Copy pixel data to a property on tile canvas element (for later retrieval).\n        tileCanvas.pixelData = <Uint8Array>resultEncodedPixels;\n        tileCanvas.pixelDataA = pixelDataA;\n        tileCanvas.pixelDataB = pixelDataB;\n\n        // Copy contents to tileCanvas.\n        this._copyToTileCanvas(tileCanvas, sourceX, sourceY);\n        done(undefined, tileCanvas);\n      });\n    } else if (this.options.glOperation === 'multi' && this.options.multiLayers === 3) {\n      Promise.all([\n        this._fetchTileData(coords, operationUrlA),\n        this._fetchTileData(coords, operationUrlB),\n        this._fetchTileData(coords, operationUrlC),\n      ]).then((pixelDataArray) => {\n        // Render in `renderer`'s WebGL context.\n        if (this.options.debug) console.log(\"_fetchTileData with multi\");\n        var pixelDataA: Uint8Array = pixelDataArray[0];\n        var pixelDataB: Uint8Array = pixelDataArray[1];\n        var pixelDataC: Uint8Array = pixelDataArray[2];\n        const [sourceX, sourceY, resultEncodedPixels] = this._renderer.renderTileMulti3(\n          { coords: coords, pixelData: pixelDataA },\n          { coords: coords, pixelData: pixelDataB },\n          { coords: coords, pixelData: pixelDataC },\n          colorScale,\n          sentinelValues,\n          filterLowA,\n          filterHighA,\n          filterLowB,\n          filterHighB,\n          filterLowC,\n          filterHighC,\n          multiplierA,\n          multiplierB,\n          multiplierC,\n        );\n\n        // Copy pixel data to a property on tile canvas element (for later retrieval).\n        tileCanvas.pixelData = <Uint8Array>resultEncodedPixels;\n        tileCanvas.pixelDataA = pixelDataA;\n        tileCanvas.pixelDataB = pixelDataB;\n        tileCanvas.pixelDataC = pixelDataC;\n\n        // Copy contents to tileCanvas.\n        this._copyToTileCanvas(tileCanvas, sourceX, sourceY);\n        done(undefined, tileCanvas);\n      });\n    } else if (this.options.glOperation === 'multi' && this.options.multiLayers === 4) {\n      Promise.all([\n        this._fetchTileData(coords, operationUrlA),\n        this._fetchTileData(coords, operationUrlB),\n        this._fetchTileData(coords, operationUrlC),\n        this._fetchTileData(coords, operationUrlD),\n      ]).then((pixelDataArray) => {\n        // Render in `renderer`'s WebGL context.\n        if (this.options.debug) console.log(\"_fetchTileData with multi\");\n        var pixelDataA: Uint8Array = pixelDataArray[0];\n        var pixelDataB: Uint8Array = pixelDataArray[1];\n        var pixelDataC: Uint8Array = pixelDataArray[2];\n        var pixelDataD: Uint8Array = pixelDataArray[3];\n        const [sourceX, sourceY, resultEncodedPixels] = this._renderer.renderTileMulti4(\n          { coords: coords, pixelData: pixelDataA },\n          { coords: coords, pixelData: pixelDataB },\n          { coords: coords, pixelData: pixelDataC },\n          { coords: coords, pixelData: pixelDataD },\n          colorScale,\n          sentinelValues,\n          filterLowA,\n          filterHighA,\n          filterLowB,\n          filterHighB,\n          filterLowC,\n          filterHighC,\n          filterLowD,\n          filterHighD,\n          multiplierA,\n          multiplierB,\n          multiplierC,\n          multiplierD,\n        );\n\n        // Copy pixel data to a property on tile canvas element (for later retrieval).\n        tileCanvas.pixelData = <Uint8Array>resultEncodedPixels;\n        tileCanvas.pixelDataA = pixelDataA;\n        tileCanvas.pixelDataB = pixelDataB;\n        tileCanvas.pixelDataC = pixelDataC;\n        tileCanvas.pixelDataD = pixelDataD;\n\n        // Copy contents to tileCanvas.\n        this._copyToTileCanvas(tileCanvas, sourceX, sourceY);\n        done(undefined, tileCanvas);\n      });\n    } else if (this.options.glOperation === 'multi' && this.options.multiLayers === 5) {\n      Promise.all([\n        this._fetchTileData(coords, operationUrlA),\n        this._fetchTileData(coords, operationUrlB),\n        this._fetchTileData(coords, operationUrlC),\n        this._fetchTileData(coords, operationUrlD),\n        this._fetchTileData(coords, operationUrlE),\n      ]).then((pixelDataArray) => {\n        // Render in `renderer`'s WebGL context.\n        if (this.options.debug) console.log(\"_fetchTileData with multi\");\n        var pixelDataA: Uint8Array = pixelDataArray[0];\n        var pixelDataB: Uint8Array = pixelDataArray[1];\n        var pixelDataC: Uint8Array = pixelDataArray[2];\n        var pixelDataD: Uint8Array = pixelDataArray[3];\n        var pixelDataE: Uint8Array = pixelDataArray[4];\n        const [sourceX, sourceY, resultEncodedPixels] = this._renderer.renderTileMulti5(\n          { coords: coords, pixelData: pixelDataA },\n          { coords: coords, pixelData: pixelDataB },\n          { coords: coords, pixelData: pixelDataC },\n          { coords: coords, pixelData: pixelDataD },\n          { coords: coords, pixelData: pixelDataE },\n          colorScale,\n          sentinelValues,\n          filterLowA,\n          filterHighA,\n          filterLowB,\n          filterHighB,\n          filterLowC,\n          filterHighC,\n          filterLowD,\n          filterHighD,\n          filterLowE,\n          filterHighE,\n          multiplierA,\n          multiplierB,\n          multiplierC,\n          multiplierD,\n          multiplierE,\n        );\n\n        // Copy pixel data to a property on tile canvas element (for later retrieval).\n        tileCanvas.pixelData = <Uint8Array>resultEncodedPixels;\n        tileCanvas.pixelDataA = pixelDataA;\n        tileCanvas.pixelDataB = pixelDataB;\n        tileCanvas.pixelDataC = pixelDataC;\n        tileCanvas.pixelDataD = pixelDataD;\n        tileCanvas.pixelDataE = pixelDataE;\n\n        // Copy contents to tileCanvas.\n        this._copyToTileCanvas(tileCanvas, sourceX, sourceY);\n        done(undefined, tileCanvas);\n      });\n    } else if (this.options.glOperation === 'multi' && this.options.multiLayers === 6) {\n      Promise.all([\n        this._fetchTileData(coords, operationUrlA),\n        this._fetchTileData(coords, operationUrlB),\n        this._fetchTileData(coords, operationUrlC),\n        this._fetchTileData(coords, operationUrlD),\n        this._fetchTileData(coords, operationUrlE),\n        this._fetchTileData(coords, operationUrlF),\n      ]).then((pixelDataArray) => {\n        // Render in `renderer`'s WebGL context.\n        if (this.options.debug) console.log(\"_fetchTileData with multi\");\n        var pixelDataA: Uint8Array = pixelDataArray[0];\n        var pixelDataB: Uint8Array = pixelDataArray[1];\n        var pixelDataC: Uint8Array = pixelDataArray[2];\n        var pixelDataD: Uint8Array = pixelDataArray[3];\n        var pixelDataE: Uint8Array = pixelDataArray[4];\n        var pixelDataF: Uint8Array = pixelDataArray[5];\n        const [sourceX, sourceY, resultEncodedPixels] = this._renderer.renderTileMulti6(\n          { coords: coords, pixelData: pixelDataA },\n          { coords: coords, pixelData: pixelDataB },\n          { coords: coords, pixelData: pixelDataC },\n          { coords: coords, pixelData: pixelDataD },\n          { coords: coords, pixelData: pixelDataE },\n          { coords: coords, pixelData: pixelDataF },\n          colorScale,\n          sentinelValues,\n          filterLowA,\n          filterHighA,\n          filterLowB,\n          filterHighB,\n          filterLowC,\n          filterHighC,\n          filterLowD,\n          filterHighD,\n          filterLowE,\n          filterHighE,\n          filterLowF,\n          filterHighF,\n          multiplierA,\n          multiplierB,\n          multiplierC,\n          multiplierD,\n          multiplierE,\n          multiplierF,\n        );\n\n        // Copy pixel data to a property on tile canvas element (for later retrieval).\n        tileCanvas.pixelData = <Uint8Array>resultEncodedPixels;\n        tileCanvas.pixelDataA = pixelDataA;\n        tileCanvas.pixelDataB = pixelDataB;\n        tileCanvas.pixelDataC = pixelDataC;\n        tileCanvas.pixelDataD = pixelDataD;\n        tileCanvas.pixelDataE = pixelDataE;\n        tileCanvas.pixelDataF = pixelDataF;\n\n        // Copy contents to tileCanvas.\n        this._copyToTileCanvas(tileCanvas, sourceX, sourceY);\n        done(undefined, tileCanvas);\n      });\n    }\n\n    return tileCanvas;\n  }\n\n  /**\n   * Check invariant: Either `colorScale` or `sentinelValues` must be of non-zero length.\n   */\n  protected _checkColorScaleAndSentinels() {\n    const {\n      colorScale,\n      sentinelValues,\n      colorscaleMaxLength,\n      sentinelMaxLength,\n    } = this.options;\n    if (colorScale.length === 0 && sentinelValues.length === 0) {\n      throw new Error('Either `colorScale` or `sentinelValues` must be of non-zero length.');\n    }\n    if (colorScale.length > colorscaleMaxLength) {\n      throw new Error(\n        `Color scale length ${colorScale.length} exceeds the maximum, ${colorscaleMaxLength}.`,\n      );\n    }\n    if (sentinelValues.length > sentinelMaxLength) {\n      throw new Error(\n        `Sentinel values length ${sentinelValues.length} exceeds the maximum, ${sentinelMaxLength}.`,\n      );\n    }\n  }\n\n  /**\n   * adapted from eponymous private method in L.TileLayer (v1.2.0)\n   */\n  protected _getSubdomain(tilePoint: TileCoordinates): string {\n    const index = Math.abs(tilePoint.x + tilePoint.y) % this.options.subdomains.length;\n    return this.options.subdomains[index];\n  }\n\n  /**\n   * adapted from eponymous private method in L.TileLayer (v1.2.0)\n   */\n  protected _getZoomForUrl(): number {\n    const {\n      maxZoom,\n      zoomReverse,\n      zoomOffset,\n    } = this.options;\n    const tileZoom = this._tileZoom as number;\n    const zoom = zoomReverse ? maxZoom - tileZoom : tileZoom;\n    return zoom + zoomOffset;\n  }\n\n  /**\n   * Handler function for Leaflet.GridLayer's 'tileunload' event.\n   */\n  protected _onTileRemove({ coords, tile }: TileEvent) {\n    if (this.options.debug) console.log(\"_onTileRemove()\");\n    // for https://github.com/Leaflet/Leaflet/issues/137\n    if (!L.Browser.android) {\n      tile.onload = noop;\n    }\n    this._renderer.removeTile(coords);\n  }\n\n  /**\n   * Redraw all active tiles with new url.\n   */\n  protected async _updateTiles() {\n    const activeTiles: GridLayerTile[] = this._getActiveTiles();\n\n    // Fetch data from the new URL.\n    const tilesData: TileDatum[] = await this._getTilesData(activeTiles);\n    if (this.options.debug) console.log(\"_updateTiles() with url \"+this.options.url);\n\n    const { colorScale, sentinelValues = [] } = this.options;\n\n    // Render using the new data.\n    let canvasCoordinates: Array<Pair<number>>;\n    let tilesDataHs: TileDatum[];\n    if (this.options._hillshadeOptions.hillshadeType === 'pregen') {\n      tilesDataHs = await this._getTilesData(activeTiles, this.options.hsPregenUrl);\n      canvasCoordinates = this._renderer.renderTilesHsPregen(\n        tilesData,\n        tilesDataHs,\n        colorScale,\n        sentinelValues,\n        this.options._hillshadeOptions,\n      );\n    } else {\n      canvasCoordinates = this._renderer.renderTiles(\n        tilesData,\n        colorScale,\n        sentinelValues,\n        this.options._hillshadeOptions,\n        this._getZoomForUrl(),\n      );\n    }\n\n    // Update tiles.\n    canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n      // Copy rendered pixels to the tile canvas.\n      const tile = activeTiles[index];\n      this._copyToTileCanvas(tile.el, sourceX, sourceY);\n\n      // Copy new pixel data.\n      tile.el.pixelData = tilesData[index].pixelData;\n      if (this.options._hillshadeOptions.hillshadeType === 'pregen') {\n        tile.el.pixelDataHsPregen = tilesDataHs[index].pixelData;\n      }\n    });\n  }\n\n  /**\n   * Redraw all active tiles. Only colorscale changed.\n   */\n  protected async _updateTilesColorscaleOnly() {\n    if (this.options.debug) console.log(\"_updateTilesColorscaleOnly()\");\n    const activeTiles: GridLayerTile[] = this._getActiveTiles();\n    const { colorScale, sentinelValues = [] } = this.options;\n\n    // Render using the new data.\n    if (this.options._hillshadeOptions.hillshadeType === 'pregen') {\n      // Fetch data from the existing tiles.\n      const tilesData: TileDatum[] = activeTiles.map(({ coords, el }) => ({\n        coords: coords,\n        pixelData: el.pixelData as Uint8Array,\n      }));\n      const tilesDataHs: TileDatum[] = activeTiles.map(({ coords, el }) => ({\n        coords: coords,\n        pixelData: el.pixelDataHsPregen as Uint8Array,\n      }));\n\n      let canvasCoordinates = this._renderer.renderTilesHsPregen(\n        tilesData,\n        tilesDataHs,\n        colorScale,\n        sentinelValues,\n        this.options._hillshadeOptions,\n      );\n\n      canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n        // Copy rendered pixels to the tile canvas.\n        const tile = activeTiles[index];\n        this._copyToTileCanvas(tile.el, sourceX, sourceY);\n      });\n    } else {\n      // Fetch data from the existing tiles.\n      const tilesData: TileDatum[] = activeTiles.map(({ coords, el }) => ({\n        coords: coords,\n        pixelData: el.pixelData as Uint8Array,\n      }));\n\n      let canvasCoordinates = this._renderer.renderTiles(\n        tilesData,\n        colorScale,\n        sentinelValues,\n        this.options._hillshadeOptions,\n        this._getZoomForUrl(),\n      );\n\n      canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n        // Copy rendered pixels to the tile canvas.\n        const tile = activeTiles[index];\n        this._copyToTileCanvas(tile.el, sourceX, sourceY);\n      });\n    }\n  }\n\n  /**\n   * Redraw all active tiles with updated tilesUrl, animating the transition over a time interval specified in\n   * `options.transitionTimeMs`.\n   */\n  protected async _updateTilesWithTransitions(\n    prevColorScale: Color[],\n    prevSentinelValues: SentinelValue[],\n  ) {\n    if (this.options.debug) console.log(\"_updateTilesWithTransitions()\");\n    const activeTiles: GridLayerTile[] = this._getActiveTiles();\n\n    const prevTilesData: TileDatum[] = activeTiles.map(({ coords, el }) => ({\n      coords,\n      pixelData: el.pixelData as Uint8Array,\n    }));\n\n    // Fetch data from the new URL.\n    const newTilesData: TileDatum[] = await this._getTilesData(activeTiles);\n\n    // Copy new pixel data to tiles.\n    activeTiles.forEach((tile, index) => {\n      tile.el.pixelData = newTilesData[index].pixelData;\n    });\n\n    const {\n      colorScale: newColorScale,\n      sentinelValues: newSentinelValues = [],\n      transitionTimeMs,\n    } = this.options;\n\n    // This function will be passed to the Renderer, which will call it after rendering a frame\n    // in its offscreen <canvas>.\n    const onFrameRendered = (canvasCoordinates: Array<Pair<number>>) => {\n      canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n        // Copy rendered pixels to the tile <canvas>.\n        const tile = activeTiles[index];\n        this._copyToTileCanvas(tile.el, sourceX, sourceY);\n      });\n    };\n\n    // Renderer hooks the render calls to requestAnimationFrame, calling `onFrameRendered` after each is drawn.\n    if (JSON.stringify(newColorScale) === JSON.stringify(prevColorScale) && JSON.stringify(newSentinelValues) === JSON.stringify(prevSentinelValues)) {\n      this._renderer.renderTilesWithTransition(\n        prevTilesData,\n        newTilesData,\n        newColorScale,\n        newSentinelValues,\n        transitionTimeMs,\n        onFrameRendered,\n      );\n    } else {\n      this._renderer.renderTilesWithTransitionAndNewColorScale(\n        prevTilesData,\n        newTilesData,\n        prevColorScale,\n        newColorScale,\n        prevSentinelValues,\n        newSentinelValues,\n        transitionTimeMs,\n        onFrameRendered,\n      );\n    }\n  }\n\n  /**\n   * Redraw tiles with updated colorscale, animating the transition over a time interval specified in\n   * `options.transitionTimeMs`.\n   */\n  protected async _updateColorscaleWithTransitions(\n    prevColorScale: Color[],\n    prevSentinelValues: SentinelValue[],\n  ) {\n    if (this.options.debug) console.log(\"_updateColorscaleWithTransitions()\");\n    const activeTiles: GridLayerTile[] = this._getActiveTiles();\n\n    const tilesData: TileDatum[] = activeTiles.map(({ coords, el }) => ({\n      coords,\n      pixelData: el.pixelData as Uint8Array,\n    }));\n\n    const {\n      colorScale: newColorScale,\n      sentinelValues: newSentinelValues = [],\n      transitionTimeMs,\n    } = this.options;\n\n    // This function will be passed to the Renderer, which will call it after rendering a frame\n    // in its offscreen <canvas>.\n    const onFrameRendered = (canvasCoordinates: Array<Pair<number>>) => {\n      canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n        // Copy rendered pixels to the tile <canvas>.\n        const tile = activeTiles[index];\n        this._copyToTileCanvas(tile.el, sourceX, sourceY);\n      });\n    };\n\n    // Renderer hooks the render calls to requestAnimationFrame, calling `onFrameRendered` after each is drawn.\n    if (JSON.stringify(newColorScale) !== JSON.stringify(prevColorScale) || JSON.stringify(newSentinelValues) !== JSON.stringify(prevSentinelValues)) {\n      this._renderer.renderTilesWithTransitionAndNewColorScaleOnly(\n        tilesData,\n        prevColorScale,\n        newColorScale,\n        prevSentinelValues,\n        newSentinelValues,\n        transitionTimeMs,\n        onFrameRendered,\n      );\n    }\n  }\n\n  /**\n   * Redraw with diff between two tileLayers\n   */\n  protected async _updateTilesWithDiff(\n    prevGlOperation: string,\n    prevUrlA: string,\n    prevUrlB: string\n  ) {\n    if (this.options.debug) console.log(\"_updateTilesWithDiff()\");\n    const activeTiles: GridLayerTile[] = this._getActiveTiles();\n\n    let tilesA: TileDatum[] = [];\n    let tilesB: TileDatum[] = [];\n    if (\n      this.options.glOperation === prevGlOperation &&\n      this.options.operationUrlA === prevUrlA &&\n      this.options.operationUrlB === prevUrlB\n    ) {\n      if (this.options.debug) console.log(\"_updateTilesWithDiff: both same url. Getting data from existing result\");\n        // Fetch data from the existing tiles.\n        tilesA = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelData as Uint8Array,\n        }));\n    } else {\n      // Fetch tilesA data\n      if (this.options.operationUrlA !== prevUrlA) {\n        if (this.options.debug) console.log(\"_updateTilesWithDiff: new A url. Downloading new tiles\");\n        tilesA = await this._getTilesData(activeTiles, this.options.operationUrlA);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataA = tilesA[index].pixelData;\n        });\n      } else {\n        if (this.options.debug) console.log(\"_updateTilesWithDiff: same A url. Getting data from existing tiles\");\n        // Fetch data from the existing tiles.\n        tilesA = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataA as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesB data\n      if (this.options.operationUrlB !== prevUrlB) {\n        if (this.options.debug) console.log(\"_updateTilesWithDiff: new B url. Downloading new tiles\");\n        tilesB = await this._getTilesData(activeTiles, this.options.operationUrlB);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataB = tilesB[index].pixelData;\n        });\n      } else {\n        if (this.options.debug) console.log(\"_updateTilesWithDiff: same B url. Getting data from existing tiles\");\n        // Fetch data from the existing tiles.\n        tilesB = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataB as Uint8Array,\n        }));\n      }\n    }\n\n    const {\n      colorScale: newColorScale,\n      sentinelValues: newSentinelValues = [],\n    } = this.options;\n\n    if (\n      this.options.glOperation === prevGlOperation &&\n      this.options.operationUrlA === prevUrlA &&\n      this.options.operationUrlB === prevUrlB\n    ) {\n      if (this.options.debug) console.log(\"_updateTilesWithDiff: both same urls. Running renderTiles()\");\n      const canvasCoordinates = this._renderer.renderTiles(\n        tilesA,\n        newColorScale,\n        newSentinelValues,\n        this.options._hillshadeOptions,\n      );\n\n      canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n        // Copy rendered pixels to the tile canvas.\n        const tile = activeTiles[index];\n        this._copyToTileCanvas(tile.el, sourceX, sourceY);\n\n      });\n    } else {\n      if (this.options.debug) console.log(\"_updateTilesWithDiff: not same urls. Running renderTilesWithDiff()\");\n\n      // This function will be passed to the Renderer, which will call it after rendering a frame\n      // in its offscreen <canvas>.\n      const onFrameRendered = (canvasCoordinates: Array<Pair<number>>) => {\n        canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n          // Copy rendered pixels to the tile <canvas>.\n          const tile = activeTiles[index];\n          this._copyToTileCanvas(tile.el, sourceX, sourceY);\n        });\n      };\n\n      let resultEncodedPixels: Uint8Array[];\n      resultEncodedPixels = this._renderer.renderTilesWithDiff(\n        tilesA,\n        tilesB,\n        newColorScale,\n        newSentinelValues,\n        onFrameRendered,\n      );\n\n      // Copy result pixel data to tiles to use for mouseEvents.\n      activeTiles.forEach((tile, index) => {\n        tile.el.pixelData = resultEncodedPixels[index];\n      });\n    }\n  }\n\n\n  /**\n   * Redraw tiles with operations on 1 tileLayer\n   */\n  protected async _updateTilesWithMultiAnalyze1(\n    prevGlOperation: string,\n    prevMultiLayers: number,\n    prevUrlA: string,\n    prevFilterLowA: number,\n    prevFilterHighA: number,\n    prevMultiplierA: number,\n  ) {\n    if (this.options.debug) console.log(\"_updateTilesWithMultiAnalyze1()\");\n    const activeTiles: GridLayerTile[] = this._getActiveTiles();\n\n    const {\n      colorScale: newColorScale,\n      sentinelValues: newSentinelValues = [],\n    } = this.options;\n\n    if (\n      this.options.glOperation === prevGlOperation &&\n      this.options.operationUrlA === prevUrlA &&\n      this.options.filterLowA === prevFilterLowA &&\n      this.options.filterHighA === prevFilterHighA &&\n      this.options.multiplierA === prevMultiplierA &&\n      this.options.multiLayers === prevMultiLayers\n    ) {\n      if (this.options.debug) console.log(\"_updateTilesWithMultiAnalyze1: all same urls. Fetching from existing tiles. Running renderTiles()\");\n      // Fetch data from the existing tiles.\n      let tilesA: TileDatum[] = activeTiles.map(({ coords, el }) => ({\n        coords,\n        pixelData: el.pixelData as Uint8Array,\n      }));\n\n      const canvasCoordinates = this._renderer.renderTiles(\n        tilesA,\n        newColorScale,\n        newSentinelValues,\n        this.options._hillshadeOptions,\n      );\n\n      canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n        // Copy rendered pixels to the tile canvas.\n        const tile = activeTiles[index];\n        this._copyToTileCanvas(tile.el, sourceX, sourceY);\n      });\n    } else {\n      let tilesA: TileDatum[] = [];\n      // Fetch tilesA data\n      if (this.options.operationUrlA !== prevUrlA) {\n        tilesA = await this._getTilesData(activeTiles, this.options.operationUrlA);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataA = tilesA[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesA = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataA as Uint8Array,\n        }));\n      }\n\n      // This function will be passed to the Renderer, which will call it after rendering a frame\n      // in its offscreen <canvas>.\n      const onFrameRendered = (canvasCoordinates: Array<Pair<number>>) => {\n        canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n          // Copy rendered pixels to the tile <canvas>.\n          const tile = activeTiles[index];\n          this._copyToTileCanvas(tile.el, sourceX, sourceY);\n        });\n      };\n\n      // Renderer hooks the render calls to requestAnimationFrame, calling `onFrameRendered` after each is drawn.\n      let resultEncodedPixels: Uint8Array[] = this._renderer.renderTilesWithMultiAnalyze1(\n        tilesA,\n        newColorScale,\n        newSentinelValues,\n        this.options.filterLowA,\n        this.options.filterHighA,\n        this.options.multiplierA,\n        onFrameRendered,\n      );\n\n      // Copy result pixel data to tiles to use for mouseEvents.\n      activeTiles.forEach((tile, index) => {\n        tile.el.pixelData = resultEncodedPixels[index];\n      });\n    }\n  }\n\n\n  /**\n   * Redraw tiles with operations on 2 tileLayers\n   */\n  protected async _updateTilesWithMultiAnalyze2(\n    prevGlOperation: string,\n    prevMultiLayers: number,\n    prevUrlA: string,\n    prevUrlB: string,\n    prevFilterLowA: number,\n    prevFilterHighA: number,\n    prevFilterLowB: number,\n    prevFilterHighB: number,\n    prevMultiplierA: number,\n    prevMultiplierB: number\n  ) {\n    if (this.options.debug) console.log(\"_updateTilesWithMultiAnalyze2()\");\n    const activeTiles: GridLayerTile[] = this._getActiveTiles();\n\n    const {\n      colorScale: newColorScale,\n      sentinelValues: newSentinelValues = [],\n    } = this.options;\n\n    if (\n      this.options.glOperation === prevGlOperation &&\n      this.options.operationUrlA === prevUrlA &&\n      this.options.operationUrlB === prevUrlB &&\n      this.options.filterLowA === prevFilterLowA &&\n      this.options.filterHighA === prevFilterHighA &&\n      this.options.filterLowB === prevFilterLowB &&\n      this.options.filterHighB === prevFilterHighB &&\n      this.options.multiplierA === prevMultiplierA &&\n      this.options.multiplierB === prevMultiplierB &&\n      this.options.multiLayers === prevMultiLayers\n    ) {\n      if (this.options.debug) console.log(\"_updateTilesWithMultiAnalyze2: all same urls. Fetching from existing tiles. Running renderTiles()\");\n      // Fetch data from the existing tiles.\n      let tilesA: TileDatum[] = activeTiles.map(({ coords, el }) => ({\n        coords,\n        pixelData: el.pixelData as Uint8Array,\n      }));\n\n      const canvasCoordinates = this._renderer.renderTiles(\n        tilesA,\n        newColorScale,\n        newSentinelValues,\n        this.options._hillshadeOptions,\n      );\n\n      canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n        // Copy rendered pixels to the tile canvas.\n        const tile = activeTiles[index];\n        this._copyToTileCanvas(tile.el, sourceX, sourceY);\n      });\n    } else {\n      let tilesA: TileDatum[] = [];\n      let tilesB: TileDatum[] = [];\n      // Fetch tilesA data\n      if (this.options.operationUrlA !== prevUrlA) {\n        tilesA = await this._getTilesData(activeTiles, this.options.operationUrlA);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataA = tilesA[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesA = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataA as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesB data\n      if (this.options.operationUrlB !== prevUrlB) {\n        tilesB = await this._getTilesData(activeTiles, this.options.operationUrlB);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataB = tilesB[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesB = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataB as Uint8Array,\n        }));\n      }\n\n      // This function will be passed to the Renderer, which will call it after rendering a frame\n      // in its offscreen <canvas>.\n      const onFrameRendered = (canvasCoordinates: Array<Pair<number>>) => {\n        canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n          // Copy rendered pixels to the tile <canvas>.\n          const tile = activeTiles[index];\n          this._copyToTileCanvas(tile.el, sourceX, sourceY);\n        });\n      };\n\n      // Renderer hooks the render calls to requestAnimationFrame, calling `onFrameRendered` after each is drawn.\n      let resultEncodedPixels: Uint8Array[] = this._renderer.renderTilesWithMultiAnalyze2(\n        tilesA,\n        tilesB,\n        newColorScale,\n        newSentinelValues,\n        this.options.filterLowA,\n        this.options.filterHighA,\n        this.options.filterLowB,\n        this.options.filterHighB,\n        this.options.multiplierA,\n        this.options.multiplierB,\n        onFrameRendered,\n      );\n\n      // Copy result pixel data to tiles to use for mouseEvents.\n      activeTiles.forEach((tile, index) => {\n        tile.el.pixelData = resultEncodedPixels[index];\n      });\n    }\n  }\n\n\n  /**\n   * Redraw tiles with operations on 3 tileLayers\n   */\n  protected async _updateTilesWithMultiAnalyze3(\n    prevGlOperation: string,\n    prevMultiLayers: number,\n    prevUrlA: string,\n    prevUrlB: string,\n    prevUrlC: string,\n    prevFilterLowA: number,\n    prevFilterHighA: number,\n    prevFilterLowB: number,\n    prevFilterHighB: number,\n    prevFilterLowC: number,\n    prevFilterHighC: number,\n    prevMultiplierA: number,\n    prevMultiplierB: number,\n    prevMultiplierC: number\n  ) {\n    if (this.options.debug) console.log(\"_updateTilesWithMultiAnalyze3()\");\n    const activeTiles: GridLayerTile[] = this._getActiveTiles();\n\n    const {\n      colorScale: newColorScale,\n      sentinelValues: newSentinelValues = [],\n    } = this.options;\n\n    if (\n      this.options.glOperation === prevGlOperation &&\n      this.options.operationUrlA === prevUrlA &&\n      this.options.operationUrlB === prevUrlB &&\n      this.options.operationUrlC === prevUrlC &&\n      this.options.filterLowA === prevFilterLowA &&\n      this.options.filterHighA === prevFilterHighA &&\n      this.options.filterLowB === prevFilterLowB &&\n      this.options.filterHighB === prevFilterHighB &&\n      this.options.filterLowC === prevFilterLowC &&\n      this.options.filterHighC === prevFilterHighC &&\n      this.options.multiplierA === prevMultiplierA &&\n      this.options.multiplierB === prevMultiplierB &&\n      this.options.multiplierC === prevMultiplierC &&\n      this.options.multiLayers === prevMultiLayers\n    ) {\n      if (this.options.debug) console.log(\"_updateTilesWithMultiAnalyze3: all same urls. Fetching from existing tiles. Running renderTiles()\");\n      // Fetch data from the existing tiles.\n      let tilesA: TileDatum[] = activeTiles.map(({ coords, el }) => ({\n        coords,\n        pixelData: el.pixelData as Uint8Array,\n      }));\n\n      const canvasCoordinates = this._renderer.renderTiles(\n        tilesA,\n        newColorScale,\n        newSentinelValues,\n        this.options._hillshadeOptions,\n      );\n\n      canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n        // Copy rendered pixels to the tile canvas.\n        const tile = activeTiles[index];\n        this._copyToTileCanvas(tile.el, sourceX, sourceY);\n      });\n    } else {\n      let tilesA: TileDatum[] = [];\n      let tilesB: TileDatum[] = [];\n      let tilesC: TileDatum[] = [];\n      // Fetch tilesA data\n      if (this.options.operationUrlA !== prevUrlA) {\n        tilesA = await this._getTilesData(activeTiles, this.options.operationUrlA);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataA = tilesA[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesA = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataA as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesB data\n      if (this.options.operationUrlB !== prevUrlB) {\n        tilesB = await this._getTilesData(activeTiles, this.options.operationUrlB);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataB = tilesB[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesB = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataB as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesC data\n      if (this.options.operationUrlC !== prevUrlC) {\n        tilesC = await this._getTilesData(activeTiles, this.options.operationUrlC);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataC = tilesC[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesC = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataC as Uint8Array,\n        }));\n      }\n\n      // This function will be passed to the Renderer, which will call it after rendering a frame\n      // in its offscreen <canvas>.\n      const onFrameRendered = (canvasCoordinates: Array<Pair<number>>) => {\n        canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n          // Copy rendered pixels to the tile <canvas>.\n          const tile = activeTiles[index];\n          this._copyToTileCanvas(tile.el, sourceX, sourceY);\n        });\n      };\n\n      // Renderer hooks the render calls to requestAnimationFrame, calling `onFrameRendered` after each is drawn.\n      let resultEncodedPixels: Uint8Array[] = this._renderer.renderTilesWithMultiAnalyze3(\n        tilesA,\n        tilesB,\n        tilesC,\n        newColorScale,\n        newSentinelValues,\n        this.options.filterLowA,\n        this.options.filterHighA,\n        this.options.filterLowB,\n        this.options.filterHighB,\n        this.options.filterLowC,\n        this.options.filterHighC,\n        this.options.multiplierA,\n        this.options.multiplierB,\n        this.options.multiplierC,\n        onFrameRendered,\n      );\n\n      // Copy result pixel data to tiles to use for mouseEvents.\n      activeTiles.forEach((tile, index) => {\n        tile.el.pixelData = resultEncodedPixels[index];\n      });\n    }\n  }\n\n\n  /**\n   * Redraw tiles with operations on 4 tileLayers\n   */\n  protected async _updateTilesWithMultiAnalyze4(\n    prevGlOperation: string,\n    prevMultiLayers: number,\n    prevUrlA: string,\n    prevUrlB: string,\n    prevUrlC: string,\n    prevUrlD: string,\n    prevFilterLowA: number,\n    prevFilterHighA: number,\n    prevFilterLowB: number,\n    prevFilterHighB: number,\n    prevFilterLowC: number,\n    prevFilterHighC: number,\n    prevFilterLowD: number,\n    prevFilterHighD: number,\n    prevMultiplierA: number,\n    prevMultiplierB: number,\n    prevMultiplierC: number,\n    prevMultiplierD: number\n  ) {\n    if (this.options.debug) console.log(\"_updateTilesWithMultiAnalyze4()\");\n    const activeTiles: GridLayerTile[] = this._getActiveTiles();\n\n    const {\n      colorScale: newColorScale,\n      sentinelValues: newSentinelValues = [],\n    } = this.options;\n\n    if (\n      this.options.glOperation === prevGlOperation &&\n      this.options.operationUrlA === prevUrlA &&\n      this.options.operationUrlB === prevUrlB &&\n      this.options.operationUrlC === prevUrlC &&\n      this.options.operationUrlD === prevUrlD &&\n      this.options.filterLowA === prevFilterLowA &&\n      this.options.filterHighA === prevFilterHighA &&\n      this.options.filterLowB === prevFilterLowB &&\n      this.options.filterHighB === prevFilterHighB &&\n      this.options.filterLowC === prevFilterLowC &&\n      this.options.filterHighC === prevFilterHighC &&\n      this.options.filterLowD === prevFilterLowD &&\n      this.options.filterHighD === prevFilterHighD &&\n      this.options.multiplierA === prevMultiplierA &&\n      this.options.multiplierB === prevMultiplierB &&\n      this.options.multiplierC === prevMultiplierC &&\n      this.options.multiplierD === prevMultiplierD &&\n      this.options.multiLayers === prevMultiLayers\n    ) {\n      if (this.options.debug) console.log(\"_updateTilesWithMultiAnalyze4: all same urls. Fetching from existing tiles. Running renderTiles()\");\n      // Fetch data from the existing tiles.\n      let tilesA: TileDatum[] = activeTiles.map(({ coords, el }) => ({\n        coords,\n        pixelData: el.pixelData as Uint8Array,\n      }));\n\n      const canvasCoordinates = this._renderer.renderTiles(\n        tilesA,\n        newColorScale,\n        newSentinelValues,\n        this.options._hillshadeOptions,\n      );\n\n      canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n        // Copy rendered pixels to the tile canvas.\n        const tile = activeTiles[index];\n        this._copyToTileCanvas(tile.el, sourceX, sourceY);\n      });\n    } else {\n      let tilesA: TileDatum[] = [];\n      let tilesB: TileDatum[] = [];\n      let tilesC: TileDatum[] = [];\n      let tilesD: TileDatum[] = [];\n      // Fetch tilesA data\n      if (this.options.operationUrlA !== prevUrlA) {\n        tilesA = await this._getTilesData(activeTiles, this.options.operationUrlA);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataA = tilesA[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesA = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataA as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesB data\n      if (this.options.operationUrlB !== prevUrlB) {\n        tilesB = await this._getTilesData(activeTiles, this.options.operationUrlB);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataB = tilesB[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesB = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataB as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesC data\n      if (this.options.operationUrlC !== prevUrlC) {\n        tilesC = await this._getTilesData(activeTiles, this.options.operationUrlC);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataC = tilesC[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesC = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataC as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesD data\n      if (this.options.operationUrlD !== prevUrlD) {\n        tilesD = await this._getTilesData(activeTiles, this.options.operationUrlD);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataD = tilesD[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesD = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataD as Uint8Array,\n        }));\n      }\n      // This function will be passed to the Renderer, which will call it after rendering a frame\n      // in its offscreen <canvas>.\n      const onFrameRendered = (canvasCoordinates: Array<Pair<number>>) => {\n        canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n          // Copy rendered pixels to the tile <canvas>.\n          const tile = activeTiles[index];\n          this._copyToTileCanvas(tile.el, sourceX, sourceY);\n        });\n      };\n\n      // Renderer hooks the render calls to requestAnimationFrame, calling `onFrameRendered` after each is drawn.\n      // let resultEncodedPixels: Float32Array[] = this._renderer.renderTilesWithMultiAnalyze4(\n      let resultEncodedPixels: Uint8Array[] = this._renderer.renderTilesWithMultiAnalyze4(\n        tilesA,\n        tilesB,\n        tilesC,\n        tilesD,\n        newColorScale,\n        newSentinelValues,\n        this.options.filterLowA,\n        this.options.filterHighA,\n        this.options.filterLowB,\n        this.options.filterHighB,\n        this.options.filterLowC,\n        this.options.filterHighC,\n        this.options.filterLowD,\n        this.options.filterHighD,\n        this.options.multiplierA,\n        this.options.multiplierB,\n        this.options.multiplierC,\n        this.options.multiplierD,\n        onFrameRendered,\n      );\n\n      // Copy result pixel data to tiles to use for mouseEvents.\n      activeTiles.forEach((tile, index) => {\n        tile.el.pixelData = resultEncodedPixels[index];\n      });\n    }\n  }\n\n  /**\n   * Redraw tiles with operations on 5 tileLayers\n   */\n  protected async _updateTilesWithMultiAnalyze5(\n    prevGlOperation: string,\n    prevMultiLayers: number,\n    prevUrlA: string,\n    prevUrlB: string,\n    prevUrlC: string,\n    prevUrlD: string,\n    prevUrlE: string,\n    prevFilterLowA: number,\n    prevFilterHighA: number,\n    prevFilterLowB: number,\n    prevFilterHighB: number,\n    prevFilterLowC: number,\n    prevFilterHighC: number,\n    prevFilterLowD: number,\n    prevFilterHighD: number,\n    prevFilterLowE: number,\n    prevFilterHighE: number,\n    prevMultiplierA: number,\n    prevMultiplierB: number,\n    prevMultiplierC: number,\n    prevMultiplierD: number,\n    prevMultiplierE: number,\n  ) {\n    if (this.options.debug) console.log(\"_updateTilesWithMultiAnalyze5()\");\n    const activeTiles: GridLayerTile[] = this._getActiveTiles();\n\n    const {\n      colorScale: newColorScale,\n      sentinelValues: newSentinelValues = [],\n    } = this.options;\n\n    if (\n      this.options.glOperation === prevGlOperation &&\n      this.options.operationUrlA === prevUrlA &&\n      this.options.operationUrlB === prevUrlB &&\n      this.options.operationUrlC === prevUrlC &&\n      this.options.operationUrlD === prevUrlD &&\n      this.options.operationUrlE === prevUrlE &&\n      this.options.filterLowA === prevFilterLowA &&\n      this.options.filterHighA === prevFilterHighA &&\n      this.options.filterLowB === prevFilterLowB &&\n      this.options.filterHighB === prevFilterHighB &&\n      this.options.filterLowC === prevFilterLowC &&\n      this.options.filterHighC === prevFilterHighC &&\n      this.options.filterLowD === prevFilterLowD &&\n      this.options.filterHighD === prevFilterHighD &&\n      this.options.filterLowE === prevFilterLowE &&\n      this.options.filterHighE === prevFilterHighE &&\n      this.options.multiplierA === prevMultiplierA &&\n      this.options.multiplierB === prevMultiplierB &&\n      this.options.multiplierC === prevMultiplierC &&\n      this.options.multiplierD === prevMultiplierD &&\n      this.options.multiplierE === prevMultiplierE &&\n      this.options.multiLayers === prevMultiLayers\n    ) {\n      if (this.options.debug) console.log(\"_updateTilesWithMultiAnalyze5: all same urls. Fetching from existing tiles. Running renderTiles()\");\n      // Fetch data from the existing tiles.\n      let tilesA: TileDatum[] = activeTiles.map(({ coords, el }) => ({\n        coords,\n        pixelData: el.pixelData as Uint8Array,\n      }));\n\n      const canvasCoordinates = this._renderer.renderTiles(\n        tilesA,\n        newColorScale,\n        newSentinelValues,\n        this.options._hillshadeOptions,\n      );\n\n      canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n        // Copy rendered pixels to the tile canvas.\n        const tile = activeTiles[index];\n        this._copyToTileCanvas(tile.el, sourceX, sourceY);\n      });\n    } else {\n      let tilesA: TileDatum[] = [];\n      let tilesB: TileDatum[] = [];\n      let tilesC: TileDatum[] = [];\n      let tilesD: TileDatum[] = [];\n      let tilesE: TileDatum[] = [];\n      // Fetch tilesA data\n      if (this.options.operationUrlA !== prevUrlA) {\n        tilesA = await this._getTilesData(activeTiles, this.options.operationUrlA);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataA = tilesA[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesA = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataA as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesB data\n      if (this.options.operationUrlB !== prevUrlB) {\n        tilesB = await this._getTilesData(activeTiles, this.options.operationUrlB);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataB = tilesB[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesB = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataB as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesC data\n      if (this.options.operationUrlC !== prevUrlC) {\n        tilesC = await this._getTilesData(activeTiles, this.options.operationUrlC);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataC = tilesC[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesC = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataC as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesD data\n      if (this.options.operationUrlD !== prevUrlD) {\n        tilesD = await this._getTilesData(activeTiles, this.options.operationUrlD);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataD = tilesD[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesD = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataD as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesE data\n      if (this.options.operationUrlE !== prevUrlE) {\n        tilesE = await this._getTilesData(activeTiles, this.options.operationUrlE);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataE = tilesE[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesE = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataE as Uint8Array,\n        }));\n      }\n\n      // This function will be passed to the Renderer, which will call it after rendering a frame\n      // in its offscreen <canvas>.\n      const onFrameRendered = (canvasCoordinates: Array<Pair<number>>) => {\n        canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n          // Copy rendered pixels to the tile <canvas>.\n          const tile = activeTiles[index];\n          this._copyToTileCanvas(tile.el, sourceX, sourceY);\n        });\n      };\n\n      // Renderer hooks the render calls to requestAnimationFrame, calling `onFrameRendered` after each is drawn.\n      let resultEncodedPixels: Uint8Array[] = this._renderer.renderTilesWithMultiAnalyze5(\n        tilesA,\n        tilesB,\n        tilesC,\n        tilesD,\n        tilesE,\n        newColorScale,\n        newSentinelValues,\n        this.options.filterLowA,\n        this.options.filterHighA,\n        this.options.filterLowB,\n        this.options.filterHighB,\n        this.options.filterLowC,\n        this.options.filterHighC,\n        this.options.filterLowD,\n        this.options.filterHighD,\n        this.options.filterLowE,\n        this.options.filterHighE,\n        this.options.multiplierA,\n        this.options.multiplierB,\n        this.options.multiplierC,\n        this.options.multiplierD,\n        this.options.multiplierE,\n        onFrameRendered,\n      );\n\n      // Copy result pixel data to tiles to use for mouseEvents.\n      activeTiles.forEach((tile, index) => {\n        tile.el.pixelData = resultEncodedPixels[index];\n      });\n    }\n  }\n\n\n  /**\n   * Redraw tiles with operations on 6 tileLayers\n   */\n  protected async _updateTilesWithMultiAnalyze6(\n    prevGlOperation: string,\n    prevMultiLayers: number,\n    prevUrlA: string,\n    prevUrlB: string,\n    prevUrlC: string,\n    prevUrlD: string,\n    prevUrlE: string,\n    prevUrlF: string,\n    prevFilterLowA: number,\n    prevFilterHighA: number,\n    prevFilterLowB: number,\n    prevFilterHighB: number,\n    prevFilterLowC: number,\n    prevFilterHighC: number,\n    prevFilterLowD: number,\n    prevFilterHighD: number,\n    prevFilterLowE: number,\n    prevFilterHighE: number,\n    prevFilterLowF: number,\n    prevFilterHighF: number,\n    prevMultiplierA: number,\n    prevMultiplierB: number,\n    prevMultiplierC: number,\n    prevMultiplierD: number,\n    prevMultiplierE: number,\n    prevMultiplierF: number,\n  ) {\n    if (this.options.debug) console.log(\"_updateTilesWithMultiAnalyze6()\");\n    const activeTiles: GridLayerTile[] = this._getActiveTiles();\n\n    const {\n      colorScale: newColorScale,\n      sentinelValues: newSentinelValues = [],\n    } = this.options;\n\n    if (\n      this.options.glOperation === prevGlOperation &&\n      this.options.operationUrlA === prevUrlA &&\n      this.options.operationUrlB === prevUrlB &&\n      this.options.operationUrlC === prevUrlC &&\n      this.options.operationUrlD === prevUrlD &&\n      this.options.operationUrlE === prevUrlE &&\n      this.options.operationUrlF === prevUrlF &&\n      this.options.filterLowA === prevFilterLowA &&\n      this.options.filterHighA === prevFilterHighA &&\n      this.options.filterLowB === prevFilterLowB &&\n      this.options.filterHighB === prevFilterHighB &&\n      this.options.filterLowC === prevFilterLowC &&\n      this.options.filterHighC === prevFilterHighC &&\n      this.options.filterLowD === prevFilterLowD &&\n      this.options.filterHighD === prevFilterHighD &&\n      this.options.filterLowE === prevFilterLowE &&\n      this.options.filterHighE === prevFilterHighE &&\n      this.options.filterLowF === prevFilterLowF &&\n      this.options.filterHighF === prevFilterHighF &&\n      this.options.multiplierA === prevMultiplierA &&\n      this.options.multiplierB === prevMultiplierB &&\n      this.options.multiplierC === prevMultiplierC &&\n      this.options.multiplierD === prevMultiplierD &&\n      this.options.multiplierE === prevMultiplierE &&\n      this.options.multiplierF === prevMultiplierF &&\n      this.options.multiLayers === prevMultiLayers\n    ) {\n      if (this.options.debug) console.log(\"_updateTilesWithMultiAnalyze6: all same urls. Fetching from existing tiles. Running renderTiles()\");\n      // Fetch data from the existing tiles.\n      let tilesA: TileDatum[] = activeTiles.map(({ coords, el }) => ({\n        coords,\n        pixelData: el.pixelData as Uint8Array,\n      }));\n\n      const canvasCoordinates = this._renderer.renderTiles(\n        tilesA,\n        newColorScale,\n        newSentinelValues,\n        this.options._hillshadeOptions,\n      );\n\n      canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n        // Copy rendered pixels to the tile canvas.\n        const tile = activeTiles[index];\n        this._copyToTileCanvas(tile.el, sourceX, sourceY);\n      });\n    } else {\n      let tilesA: TileDatum[] = [];\n      let tilesB: TileDatum[] = [];\n      let tilesC: TileDatum[] = [];\n      let tilesD: TileDatum[] = [];\n      let tilesE: TileDatum[] = [];\n      let tilesF: TileDatum[] = [];\n\n      // Fetch tilesA data\n      if (this.options.operationUrlA !== prevUrlA) {\n        tilesA = await this._getTilesData(activeTiles, this.options.operationUrlA);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataA = tilesA[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesA = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataA as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesB data\n      if (this.options.operationUrlB !== prevUrlB) {\n        tilesB = await this._getTilesData(activeTiles, this.options.operationUrlB);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataB = tilesB[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesB = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataB as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesC data\n      if (this.options.operationUrlC !== prevUrlC) {\n        tilesC = await this._getTilesData(activeTiles, this.options.operationUrlC);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataC = tilesC[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesC = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataC as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesD data\n      if (this.options.operationUrlD !== prevUrlD) {\n        tilesD = await this._getTilesData(activeTiles, this.options.operationUrlD);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataD = tilesD[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesD = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataD as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesE data\n      if (this.options.operationUrlE !== prevUrlE) {\n        tilesE = await this._getTilesData(activeTiles, this.options.operationUrlE);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataE = tilesE[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesE = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataE as Uint8Array,\n        }));\n      }\n\n      // Fetch tilesF data\n      if (this.options.operationUrlF !== prevUrlF) {\n        tilesF = await this._getTilesData(activeTiles, this.options.operationUrlF);\n\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataF = tilesF[index].pixelData;\n        });\n      } else {\n        // Fetch data from the existing tiles.\n        tilesF = activeTiles.map(({ coords, el }) => ({\n          coords,\n          pixelData: el.pixelDataF as Uint8Array,\n        }));\n      }\n\n      // This function will be passed to the Renderer, which will call it after rendering a frame\n      // in its offscreen <canvas>.\n      const onFrameRendered = (canvasCoordinates: Array<Pair<number>>) => {\n        canvasCoordinates.forEach(([sourceX, sourceY], index) => {\n          // Copy rendered pixels to the tile <canvas>.\n          const tile = activeTiles[index];\n          this._copyToTileCanvas(tile.el, sourceX, sourceY);\n        });\n      };\n\n      // Renderer hooks the render calls to requestAnimationFrame, calling `onFrameRendered` after each is drawn.\n      let resultEncodedPixels: Uint8Array[] = this._renderer.renderTilesWithMultiAnalyze6(\n        tilesA,\n        tilesB,\n        tilesC,\n        tilesD,\n        tilesE,\n        tilesF,\n        newColorScale,\n        newSentinelValues,\n        this.options.filterLowA,\n        this.options.filterHighA,\n        this.options.filterLowB,\n        this.options.filterHighB,\n        this.options.filterLowC,\n        this.options.filterHighC,\n        this.options.filterLowD,\n        this.options.filterHighD,\n        this.options.filterLowE,\n        this.options.filterHighE,\n        this.options.filterLowF,\n        this.options.filterHighF,\n        this.options.multiplierA,\n        this.options.multiplierB,\n        this.options.multiplierC,\n        this.options.multiplierD,\n        this.options.multiplierE,\n        this.options.multiplierF,\n        onFrameRendered,\n      );\n\n      // Copy result pixel data to tiles to use for mouseEvents.\n      activeTiles.forEach((tile, index) => {\n        tile.el.pixelData = resultEncodedPixels[index];\n      });\n    }\n  }\n\n\n  /**\n   * Preload tiles if it makes sense to do so.\n   */\n  protected _maybePreload(preloadUrl?: string) {\n    if (\n      // Preload tiles if a preloadUrl is given and...\n      preloadUrl && (\n        // either the preload cache is empty\n        !this._preloadTileCache\n        // or its url is out of date.\n        || this._preloadTileCache.url !== preloadUrl\n      )\n    ) {\n      this._preloadTiles(preloadUrl);\n    }\n  }\n\n  /**\n   * Load extra layers if required\n   */\n  protected async _maybeLoadExtraLayers(prevUrlA: string, prevUrlB: string, prevUrlC: string, prevUrlD: string) {\n    let activeTiles: GridLayerTile[] = [];\n    if ( this.options.extraPixelLayers >= 1) {\n      activeTiles = this._getActiveTiles();\n\n      if (prevUrlA !== this.options.operationUrlA) {\n        let tilesA = await this._getTilesData(activeTiles, this.options.operationUrlA);\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataA = tilesA[index].pixelData;\n        });\n      }\n    }\n\n    if ( this.options.extraPixelLayers >= 2) {\n      if (prevUrlB !== this.options.operationUrlB) {\n        let tilesB = await this._getTilesData(activeTiles, this.options.operationUrlB);\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataB = tilesB[index].pixelData;\n        });\n      }\n    }\n\n    if ( this.options.extraPixelLayers >= 3) {\n      if (prevUrlC !== this.options.operationUrlC) {\n        let tilesC = await this._getTilesData(activeTiles, this.options.operationUrlC);\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataC = tilesC[index].pixelData;\n        });\n      }\n    }\n\n    if ( this.options.extraPixelLayers >= 4) {\n      if (prevUrlD !== this.options.operationUrlD) {\n        let tilesD = await this._getTilesData(activeTiles, this.options.operationUrlD);\n        // Copy new pixel data to tiles.\n        activeTiles.forEach((tile, index) => {\n          tile.el.pixelDataD = tilesD[index].pixelData;\n        });\n      }\n    }\n  }\n\n  /**\n   * Load tiles from the given URL and store them in the preload cache.\n   */\n  protected async _preloadTiles(url: string) {\n    const activeTiles: GridLayerTile[] = this._getActiveTiles();\n    const tilesData: TileDatum[] = await this._fetchTilesData(activeTiles, url);\n    this._preloadTileCache = {\n      url,\n      tiles: tilesData,\n    };\n  }\n\n  /**\n   * Use Leaflet.GridLayer's _pruneTiles method to clear out any stale tiles, then return the\n   * remaining (active) tiles, sorted by z, x, y.\n   */\n  protected _getActiveTiles(): GridLayerTile[] {\n    if (this.options.debug) console.log(\"_getActiveTiles()\");\n    // Remove inactive tiles from the cache.\n    this._pruneTiles();\n    // Any tiles remaining are active tiles.\n    // We sort them by their tile coordinates (by z, then x, then y) to ensure consistent ordering.\n    const tiles = util.staticCast<TileCache>(this._tiles);\n    return values(tiles).sort((a, b) => util.compareTileCoordinates(a.coords, b.coords));\n  }\n\n  /**\n   * Retrieve pixel data for the given tiles, either from the preload cache or from the server.\n   */\n  protected async _getTilesData(tiles: GridLayerTile[], url: string = this.options.url): Promise<TileDatum[]> {\n    if (this.options.debug) console.log(\"_getTilesData() with url: \" + url);\n    const preloadTileCache: PreloadTileCache | undefined = this._preloadTileCache;\n    if (\n      preloadTileCache\n      && url === preloadTileCache.url\n      && util.sameTiles(\n        preloadTileCache.tiles.map(({ coords }) => coords),\n        tiles.map(({ coords }) => coords),\n      )\n    ) {\n      // Clear the preload cache and return its contents.\n      this._preloadTileCache = undefined;\n      return Promise.resolve(preloadTileCache.tiles);\n    } else {\n      return this._fetchTilesData(tiles, url);\n    }\n  }\n\n  /**\n   * Fetch pixel data for the supplied tiles from the supplied URL.\n   */\n  protected async _fetchTilesData(tiles: GridLayerTile[], url: string): Promise<TileDatum[]> {\n    const pixelData = await Promise.all(tiles.map(({ coords }) => this._fetchTileData(coords, url)));\n\n    if (this.options.debug) console.log(\"_fetchTilesData() with url:\" + url);\n\n    // Fire the 'load' event to notify any listeners that the tiles have finished loading.\n    this.fire('load', { url });\n\n    return zipWith<GridLayerTile | Uint8Array, TileDatum>(\n      tiles,\n      pixelData,\n      ({ coords }: GridLayerTile, data: Uint8Array) => ({\n        coords,\n        pixelData: data,\n      }),\n    );\n  }\n\n  /**\n   * Fetch pixel data for an individual tile from the given URL.\n   */\n  protected _fetchTileData(coords: TileCoordinates, url: string): Promise<Uint8Array> {\n    return util.fetchPNGData(this.getTileUrl(coords, url), this.options.nodataValue, this._tileSizeAsNumber());\n  }\n\n  /**\n   * L.GridLayer's `tileSize` option can be either a number or a Point object.\n   * For this tile layer, we assume tiles will have equal width and height, so to simplify things\n   * we normalize `tileSize` as a number.\n   */\n  protected _tileSizeAsNumber(): number {\n    const { tileSize } = this.options;\n    return (\n      typeof tileSize === 'number'\n      ? tileSize\n      : (tileSize as L.Point).x\n    );\n  }\n\n  /**\n   * Copy pixels from the Renderer's (offscreen) <canvas> to a tile's (onscreen) canvas.\n   */\n  protected _copyToTileCanvas(tile: TileElement, sourceX: number, sourceY: number) {\n    if (this.options.debug) console.log(\"_copyToTileCanvas()\")\n    const tileSize = this._tileSizeAsNumber();\n    const tileCanvas2DContext = tile.getContext('2d');\n    if (tileCanvas2DContext === null) {\n      throw new Error('Tile canvas 2D context is null.');\n    }\n    // Clear the current contents of the canvas. Otherwise, the new image will be composited with\n    // the existing image.\n    tileCanvas2DContext.clearRect(0, 0, tileSize, tileSize);\n    // Copy the image data from the Renderer's canvas to the tile's canvas.\n    tileCanvas2DContext.drawImage(\n      this._renderer.canvas,\n      sourceX, sourceY, tileSize, tileSize, // source canvas offset (x, y) and size (x, y)\n      0, 0, tileSize, tileSize,             // destination canvas offset (x, y) and size (x, y)\n    );\n  }\n\n  /**\n   * Get active tiles boundary information\n   */\n  protected async _getActivetilesBounds() {\n    const activeTiles: GridLayerTile[] = this._getActiveTiles();\n\n    let xMin = activeTiles[0].coords.x;\n    let xMax = activeTiles[0].coords.x;\n    let yMin = activeTiles[0].coords.y;\n    let yMax = activeTiles[0].coords.y;\n\n    activeTiles.forEach((tile) => {\n      if (tile.coords.x > xMax) {\n        xMax = tile.coords.x;\n      }\n      if (tile.coords.x < xMin) {\n        xMin = tile.coords.x;\n      }\n      if (tile.coords.y > yMax) {\n        yMax = tile.coords.y;\n      }\n      if (tile.coords.y < yMin) {\n        yMin = tile.coords.y;\n      }\n    });\n\n    let xTiles = xMax - xMin + 1;\n    let yTiles = yMax - yMin + 1;\n\n    let activeTilesBounds: ActiveTilesBounds = {\n      xMin: xMin,\n      xMax: xMax,\n      yMin: yMin,\n      yMax: yMax,\n      xTiles: xTiles,\n      yTiles: yTiles\n    }\n\n    return activeTilesBounds\n  }\n\n  /**\n   * Get pixelData from each tile and merge to a single array\n   */\n  protected async _mergePixelData(activeTilesBounds: ActiveTilesBounds, tileSize: number) {\n    if (this.options.debug) console.log(\"_mergePixelData()\")\n    let z = this._tileZoom;\n    const canvasMerged = document.createElement(\"canvas\");\n    this._contourData.width = activeTilesBounds.xTiles * tileSize;\n    this._contourData.height = activeTilesBounds.yTiles * tileSize;\n    canvasMerged.width = this._contourData.width\n    canvasMerged.height = this._contourData.height\n    const ctx = canvasMerged.getContext(\"2d\");\n\n    let nodataTile: Uint8Array = util.createNoDataTile(\n      this.options.nodataValue,\n      tileSize\n    );\n\n    // draw pixelData for all active tiles to a single canvas\n    for (let i = 0; i <= activeTilesBounds.xTiles; i++) {\n      let x = activeTilesBounds.xMin + i;\n      for (let j = 0; j <= activeTilesBounds.yTiles; j++) {\n        let y = activeTilesBounds.yMin + j;\n\n        let uint8: Uint8Array;\n        try {\n          let element: TileElement = <TileElement>this._tiles[`${x}:${y}:${z}`].el\n          uint8 = <Uint8Array>element.pixelData\n        } catch(err) {\n          uint8 = nodataTile;\n        }\n        var uac = new Uint8ClampedArray(uint8);\n        // TODO: uint8 length = 262400. 4 * tileSize * tileSize = 262144. Why different?\n        var uac2 = new Uint8ClampedArray(uac.buffer, 0, 4 * tileSize * tileSize)\n        var idata = new ImageData(uac2, tileSize, tileSize);\n\n        ctx!.putImageData(idata, i * tileSize, j * tileSize);\n      }\n    }\n\n    // extract float values from canvas\n    var imageData = ctx!.getImageData(0, 0, activeTilesBounds.xTiles * tileSize, activeTilesBounds.yTiles * tileSize);\n    var mergedPixelData = new Float32Array(imageData.data.buffer);\n\n    // replace noDataValues with NaN\n    mergedPixelData = mergedPixelData.map(function(item) {\n      // TODO: Assuming noDataValue is set to default (-999999). Need to fix.\n      if(item < -900000) {\n      // if(item === this.options.nodataValue) {\n        item = NaN;\n      }\n      return item;\n    }, this);\n\n    let mergedPixelArray: number[] = Array.from(mergedPixelData);\n\n    const arrSum = function(arr: number[]){\n      return arr.reduce(function(a,b){\n        return (isNaN(a) ? 0 : a) + (isNaN(b) ? 0 : b)\n      }, 0);\n    }\n    if (this.options.debug) {console.log(\"sum mergedPixelArray\"); console.log(arrSum(mergedPixelArray));}\n\n    let contourCanvas: HTMLCanvasElement;\n    if (this.options.contourCanvas) {\n      contourCanvas = this.options.contourCanvas;\n    } else {\n      console.log(\"Error: contourCanvas not specified.\")\n      return\n    }\n    let width = <number>this._contourData.width\n    let height = <number>this._contourData.height\n    contourCanvas.width = width;\n    contourCanvas.height = height;\n\n    this._contourData.mergedTileArray = mergedPixelArray;\n    this._contourData.smoothedTileArray = undefined;\n\n    return\n  }\n\n  /**\n   * Merge tiles, calculate new contours and draw on seperate canvas\n   */\n  protected async _maybeUpdateMergedArrayAndDrawContours() {\n    if (this.options.contourType === 'none') return;\n\n    this._map.fire('contourDrawing', {status: true});\n    if (this.options.debug) console.log(\"_maybeUpdateMergedArrayAndDrawContours()\")\n\n    await this._clearContours();\n\n    setTimeout(async () => {\n      let activeTilesBounds: ActiveTilesBounds = await this._getActivetilesBounds();\n      const tileSize = this._tileSizeAsNumber();\n\n      await this._mergePixelData(activeTilesBounds, tileSize);\n      if (this.options.contourSmoothInput) {\n        await this._smoothContourInput();\n      }\n      await this._calculateAndDrawContours();\n      await this._moveContourCanvas(activeTilesBounds);\n    }, 50);\n  }\n\n  /**\n   * Calculate new contours and draw on seperate canvas\n   */\n  protected async _smoothContourInput() {\n    if (this.options.debug) console.log(\"_smoothContourInput()\");\n    let valuesNan = <number[]>this._contourData.mergedTileArray;\n    let valuesNoNan = valuesNan.map(function(item) {\n      //TODO: fix for other noDataValues\n      if(isNaN(item)) {\n        item = this.options.nodataValue;\n      }\n      return item;\n    }, this);\n    let valuesNoNanUint = new Uint8Array(Float32Array.from(valuesNoNan).buffer);\n\n    const resultEncodedPixels = this._renderer.renderConvolutionSmooth(\n      valuesNoNanUint,\n      <number>this._contourData.width,\n      <number>this._contourData.height,\n      this.options.contourSmoothInputKernel\n    );\n\n    //TODO fix for nodataValue other than default\n    //Replace nodata with NaN\n    let newArr = [];\n    for(let x = 0; x < resultEncodedPixels.length; x += 1) {\n      let value = resultEncodedPixels[x];\n      if(value === this.options.nodataValue) {\n        value = NaN;\n      }\n      newArr.push(value);\n    }\n    this._contourData.smoothedTileArray = newArr;\n  }\n\n  /**\n   * Calculate new contours and draw on seperate canvas\n   */\n  protected async _calculateAndDrawContours() {\n    if (this.options.contourType === 'none') return;\n\n    this._map.fire('contourDrawing', {status: true});\n    if (this.options.debug) console.log(\"_calculateAndDrawContours()\")\n    await this._clearContours();\n    await this._calculateContours();\n    setTimeout(() => {\n      this._drawContours();\n    }, 50);\n  }\n\n  /**\n   * Add a label to a contour\n   */\n  protected _addlabel(\n      context: CanvasRenderingContext2D,\n      label: ContourLabel,\n      labelColor: string,\n      labelFont: string\n    ) {\n    context.save();\n    context.translate(label.xy[0], label.xy[1]);\n    context.rotate(label.angle + (Math.cos(label.angle) < 0 ? Math.PI : 0));\n    context.textAlign = \"center\";\n    context.fillStyle = labelColor;\n    context.font = labelFont;\n    context.fillText(label.text, -1, 4);\n    context.restore();\n  }\n\n  /**\n   * Calculate contours\n   */\n  protected async _calculateContours() {\n    if (this.options.debug) console.log(\"_calculateContours()\")\n\n    let values;\n    if (this.options.contourSmoothInput) {\n      values = <number[]>this._contourData.smoothedTileArray;\n    } else {\n      values = <number[]>this._contourData.mergedTileArray;\n    }\n\n    if (this.options.contourScaleFactor !== 1) {\n      values = values.map(x => x * this.options.contourScaleFactor);\n    }\n\n    if (this.options.debug) {console.log(\"valuesArray\"); console.log(values)};\n\n    let max = <number>d3.max(values, d => d !== this.options.nodataValue ? d : NaN);\n    let min = <number>d3.min(values, d => d !== this.options.nodataValue ? d : NaN);\n    max = Math.ceil(max/this.options.contourInterval) * this.options.contourInterval;\n    min = Math.floor(min/this.options.contourInterval) * this.options.contourInterval;\n    if (this.options.debug) {console.log(\"Contours: max\"); console.log(max)};\n    if (this.options.debug) {console.log(\"Contours: min\"); console.log(min)};\n\n    // countour line values\n    let thresholds = [];\n    for (var i = min; i <= max; i += this.options.contourInterval) {\n      thresholds.push(i);\n    }\n    if (this.options.debug) {console.log(\"Contour thresholds\"); console.log(thresholds)};\n\n    let contour = d3.contours()\n      .size([<number>this._contourData.width, <number>this._contourData.height]);\n\n    contour.thresholds(thresholds);\n    contour.smooth(this.options.contourSmoothLines)\n\n    let contoursGeoData = contour(values);\n    this._contourData.contoursGeoData = contoursGeoData;\n    if (this.options.debug) {console.log(\"contoursGeoData\"); console.log(contoursGeoData)};\n\n    return\n  }\n\n  /**\n   * Clear contours canvas after turning off contours\n   */\n  protected async _clearContours() {\n    if (this.options.debug) console.log(\"_clearContours()\")\n\n    let contourCanvas: HTMLCanvasElement;\n    let contourCtx: CanvasRenderingContext2D;\n    if (this.options.contourCanvas) {\n      contourCanvas = this.options.contourCanvas;\n      contourCtx = <CanvasRenderingContext2D>contourCanvas.getContext('2d');\n    } else {\n      console.log(\"Error: contourCanvas not specified.\")\n      return\n    }\n\n    contourCtx.setTransform(1, 0, 0, 1, 0, 0);\n    contourCtx.clearRect(0, 0, <number>this._contourData.width, <number>this._contourData.height);\n    contourCtx.beginPath(); // still necessary?\n  }\n\n  /**\n   * Move contours canvas to fit active tiles\n   */\n  protected async _moveContourCanvas(activeTilesBounds: ActiveTilesBounds) {\n    if (this.options.debug) console.log(\"_moveContourCanvas()\")\n\n    let contourCanvas: HTMLCanvasElement;\n    if (this.options.contourCanvas) {\n      contourCanvas = this.options.contourCanvas;\n    } else {\n      console.log(\"Error: contourCanvas not specified.\")\n      return\n    }\n\n    let contourPane: HTMLElement;\n    if (this.options.contourPane) {\n      contourPane = this.options.contourPane;\n    } else {\n      console.log(\"Error: contourPane not specified.\")\n      return\n    }\n\n    let scale = this._map.getZoomScale(this._map.getZoom(), this._level.zoom);\n    let pixelOrigin = this._map.getPixelOrigin();\n    let transformPane = this._level.origin.multiplyBy(scale)\n                        .subtract(pixelOrigin);\n    let activeTilesPos = this._getTilePos(this._keyToTileCoords(`${activeTilesBounds.xMin}:${activeTilesBounds.yMin}:${this._level.zoom}`));\n\n    L.DomUtil.setTransform(contourPane, transformPane, scale);\n    L.DomUtil.setTransform(contourCanvas, activeTilesPos);\n  }\n\n  /**\n   * Draw contours on seperate canvas\n   */\n  protected async _drawContours() {\n    if (this.options.debug) console.log(\"_drawContours()\")\n\n    let width = <number>this._contourData.width\n    let height = <number>this._contourData.height\n\n    let contourCanvas: HTMLCanvasElement;\n    let contourCtx: CanvasRenderingContext2D;\n    if (this.options.contourCanvas) {\n      contourCanvas = this.options.contourCanvas;\n      contourCtx = <CanvasRenderingContext2D>contourCanvas.getContext('2d');\n    } else {\n      console.log(\"Error: contourCanvas not specified.\")\n      return\n    }\n\n    let path = d3.geoPath().context(contourCtx);\n\n    let bathyColor = d3.scaleLinear<string>()\n      .domain(this.options.contourBathyDomain)\n      .range(this.options.contourBathyColors);\n    let hypsoColor = d3.scaleLinear<string>()\n      .domain(this.options.contourHypsoDomain)\n      .range(this.options.contourHypsoColors)\n      .interpolate(d3.interpolateHcl);\n\n    let contoursGeoData = <ContourMultiPolygon[]>this._contourData.contoursGeoData;\n\n    let contourIndexInterval = this.options.contourIndexInterval;\n    let bathyHigh = this.options.contourBathyDomain[this.options.contourBathyDomain.length - 1];\n\n    contourCtx.clearRect(0, 0, width, height);\n    contourCtx.save()\n\n    if (this.options.contourType == 'lines') {\n      contourCtx.lineWidth = this.options.contourLineWeight;\n      contourCtx.strokeStyle = this.options.contourLineColor;\n\n      if (!this.options.contourHypso && !this.options.contourBathy) {\n        contourCtx.beginPath();\n        contoursGeoData.forEach(function (c) {\n          if (contourIndexInterval == 0 || c.value % contourIndexInterval != 0) path(c);\n        });\n        contourCtx.stroke();\n      } else {\n        contoursGeoData.forEach(function (c) {\n          contourCtx.beginPath();\n          var fill;\n          if (c.value >= bathyHigh || !this.options.contourBathy) {\n            if (this.options.contourHypso) fill = hypsoColor(c.value);\n          } else {\n            if (this.options.contourBathy) fill = bathyColor(c.value);\n          }\n          path(c);\n          if (fill) {\n            contourCtx.fillStyle = fill;\n            contourCtx.fill();\n          }\n          contourCtx.stroke();\n        }, this);\n      }\n\n      // draw thicker index lines, if specified\n      if (this.options.contourIndexInterval != 0) {\n        if (!this.options.contourIndexLabels) {\n          contourCtx.lineWidth = this.options.contourLineIndexWeight;\n          contourCtx.beginPath();\n          contoursGeoData.forEach(function (c) {\n            if (c.value % contourIndexInterval == 0) path(c);\n          });\n          contourCtx.stroke();\n        } else {\n          // calculate label positions and a mask around each\n          let labels: ContourLabel[] = [];\n          for (const c of contoursGeoData) {\n            const threshold = c.value\n\n            if (c.value % this.options.contourIndexInterval == 0) {\n              c.coordinates.forEach(polygon =>\n                polygon.forEach((ring, j) => {\n                  const p = ring.slice(1, Infinity),\n                    // best number of steps to divide ring.length\n                    possibilities = d3.range(this.options.contourLabelDistance, this.options.contourLabelDistance * 1.4),\n                    scores = possibilities.map(d => -((p.length - 1) % d)),\n                    n = possibilities[<number>d3.scan(scores)],\n                    // best starting point: bottom for first rings, top for holes\n                    start =\n                      1 + (<number>d3.scan(p.map(xy => (j === 0 ? -1 : 1) * xy[1])) % n),\n                    margin = 10;\n\n                  p.forEach((xy, i) => {\n                    if (\n                      i % n === start &&\n                      xy[0] > margin &&\n                      xy[0] < width - margin &&\n                      xy[1] > margin &&\n                      xy[1] < height - margin\n                    ) {\n                      const a = (i - 2 + p.length) % p.length,\n                        b = (i + 2) % p.length,\n                        dx = p[b][0] - p[a][0],\n                        dy = p[b][1] - p[a][1];\n                      if (dx === 0 && dy === 0) return;\n\n                      labels.push({\n                        threshold,\n                        xy: xy.map(d => 1.0 * d),\n                        angle: Math.atan2(dy, dx),\n                        text: `${c.value}`\n                      });\n                    }\n                  });\n                }, this)\n              , this);\n            }\n\n            // create the mask for this threshold:\n            // the full rectangle minus a ring around each label\n            contourCtx.save();\n            contourCtx.beginPath();\n            contourCtx.moveTo(0, 0),\n            contourCtx.lineTo(width, 0),\n            contourCtx.lineTo(width, height),\n            contourCtx.lineTo(0, height),\n            contourCtx.lineTo(0, 0);\n            for (const label of labels) {\n              for (let i = 0; i < 2 * Math.PI; i += 0.2) {\n                const pos = [Math.cos(i) * 20, -Math.sin(i) * 10],\n                  c = Math.cos(label.angle),\n                  s = Math.sin(label.angle);\n                  contourCtx[i === 0 ? \"moveTo\" : \"lineTo\"](\n                  label.xy[0] + pos[0] * c - pos[1] * s,\n                  label.xy[1] + pos[1] * c + pos[0] * s\n                );\n              }\n            }\n            // contourCtx.stroke(); // uncomment to see the mask\n            contourCtx.clip();\n\n            // draw index contour for this threshold\n            if (c.value % this.options.contourIndexInterval === 0 ) {\n              contourCtx.beginPath(),\n                (contourCtx.strokeStyle = this.options.contourLineColor),\n                (contourCtx.lineWidth = this.options.contourLineIndexWeight),\n                path(c),\n                contourCtx.stroke();\n            }\n\n            // draw labels for this threshold\n            contourCtx.restore();\n            for (const label of labels) {\n              this._addlabel(\n                contourCtx,\n                label,\n                this.options.contourLineColor,\n                this.options.contourLabelFont\n              );\n            }\n          }\n        }\n      }\n    } else if (this.options.contourType == 'illuminated') {\n      contourCtx.lineWidth = this.options.contourIlluminatedShadowSize + 1;\n      contourCtx.shadowBlur = this.options.contourIlluminatedShadowSize;\n      contourCtx.shadowOffsetX = this.options.contourIlluminatedShadowSize;\n      contourCtx.shadowOffsetY = this.options.contourIlluminatedShadowSize;\n\n      contoursGeoData.forEach(function (c) {\n        contourCtx.beginPath();\n        if (c.value >= bathyHigh || !this.options.contourBathy) {\n          contourCtx.shadowColor = this.options.contourIlluminatedShadowColor;\n          contourCtx.strokeStyle = this.options.contourIlluminatedHighlightColor;\n          if (this.options.contourHypso) contourCtx.fillStyle = hypsoColor(c.value);\n        } else {\n          contourCtx.shadowColor = this.options.contourBathyShadowColor;\n          contourCtx.strokeStyle = this.options.contourBathyHighlightColor;\n          if (this.options.contourBathy) contourCtx.fillStyle = bathyColor(c.value);\n        }\n        path(c);  // draw the shape\n        // draw the light stroke first, then the fill with drop shadow\n        // the effect is a light edge on side and dark on the other, giving the raised/illuminated contour appearance\n        contourCtx.stroke();\n        if (this.options.contourHypso || this.options.contourBathy) {\n          contourCtx.fill();\n        }\n      }, this);\n    }\n    contourCtx.restore();\n    this._map.fire('contourDrawing', {status: false});\n  }\n\n  /**\n   * Wraps a handler for a Leaflet MouseEvent, providing an extra property, `pixelValue`, to the\n   * event object.\n   */\n  protected _wrapMouseEventHandler(handler: (event: MouseEvent) => void): (event: L.LeafletMouseEvent) => void {\n    return (event) => {\n      const { latlng } = event;\n      const pixelCoords: L.Point = this._map.project(latlng, this._tileZoom as number).floor();\n      // Find the tile containing the point.\n      const containingTile: GridLayerTile | undefined = this._getTileContainingPoint(pixelCoords);\n      // Find position within tile.\n      const coordsInTile: L.Point | undefined = containingTile && this._getCoordsInTile(containingTile, pixelCoords);\n      //get byteindex for coordsInTile\n\n      let byteIndex: number | undefined = undefined;\n      if (coordsInTile !== undefined) {\n        byteIndex = (coordsInTile!.y * this._tileSizeAsNumber() + coordsInTile!.x) * BYTES_PER_WORD;\n      }\n\n      let pixelValues: PixelValues = {};\n      if (byteIndex === undefined) {\n        pixelValues['pixelValue'] = undefined;\n      } else {\n        // Get pixel value.\n        const { pixelData } = containingTile!.el;\n        pixelValues['pixelValue'] = coordsInTile && this._getPixelValue(pixelData, byteIndex);\n      }\n\n      // Find values from additional layers if specified\n      if (byteIndex !== undefined && this.options.extraPixelLayers >= 1) {\n        const { pixelDataA } = containingTile!.el;\n        pixelValues['pixelValueA'] = coordsInTile && this._getPixelValue(pixelDataA, byteIndex);\n      }\n      if (byteIndex !== undefined && this.options.extraPixelLayers >= 2) {\n        const { pixelDataB } = containingTile!.el;\n        pixelValues['pixelValueB'] = coordsInTile && this._getPixelValue(pixelDataB, byteIndex);\n      }\n      if (byteIndex !== undefined && this.options.extraPixelLayers >= 3) {\n        const { pixelDataC } = containingTile!.el;\n        pixelValues['pixelValueC'] = coordsInTile && this._getPixelValue(pixelDataC, byteIndex);\n      }\n      if (byteIndex !== undefined && this.options.extraPixelLayers >= 4) {\n        const { pixelDataD } = containingTile!.el;\n        pixelValues['pixelValueD'] = coordsInTile && this._getPixelValue(pixelDataD, byteIndex);\n      }\n      if (byteIndex !== undefined && this.options.extraPixelLayers >= 5) {\n        const { pixelDataE } = containingTile!.el;\n        pixelValues['pixelValueE'] = coordsInTile && this._getPixelValue(pixelDataE, byteIndex);\n      }\n      if (byteIndex !== undefined && this.options.extraPixelLayers >= 6) {\n        const { pixelDataF } = containingTile!.el;\n        pixelValues['pixelValueF'] = coordsInTile && this._getPixelValue(pixelDataF, byteIndex);\n      }\n\n      // Call handler with pixel values.\n      handler({ ...event, pixelValues });\n    };\n  }\n\n  /**\n   * Get the tile containing the given point (in pixel coordinates) or `undefined` if no tile\n   * contains the point.\n   */\n  protected _getTileContainingPoint(point: L.Point): GridLayerTile | undefined {\n    const tiles = util.staticCast<TileCache>(this._tiles);\n    return values(tiles).find(tile => {\n      return tile.coords.z === this._tileZoom && this._tileBounds(tile).contains(point);\n    });\n  }\n\n  /**\n   * Compute the bounds (in projected pixel coordinates) of the given tile.\n   */\n  protected _tileBounds(tile: GridLayerTile) {\n    const { x, y } = tile.coords;\n    const tileSize = this._tileSizeAsNumber();\n    const topLeft = L.point(x * tileSize, y * tileSize);\n    const bottomRight = L.point(\n      topLeft.x + (tileSize - 1),\n      topLeft.y + (tileSize - 1),\n    );\n    return L.bounds(topLeft, bottomRight);\n  }\n\n  /**\n   * Convert absolute pixel coordinates to pixel coordinates relative to a given tile's upper left\n   * corner.\n   */\n  protected _getCoordsInTile(tile: GridLayerTile, pixelCoords: L.Point): L.Point {\n    const { x: tileX, y: tileY } = tile.coords;\n    const tileSize = this._tileSizeAsNumber();\n    return L.point(\n      pixelCoords.x - (tileX * tileSize),\n      pixelCoords.y - (tileY * tileSize),\n    );\n  }\n\n  /**\n   * Get the floating-point value of the pixel at the given coordinates in the given tile.\n   * Returns `undefined` if the value is equal to `nodataValue`.\n   * If the value matches a sentinel value, returns the corresponding `SentinelValue` object.\n   */\n  protected _getPixelValue(pixelData: Uint8Array | Float32Array | undefined, byteIndex: number): number | SentinelValue | undefined {\n    if (!pixelData) {\n      return undefined;\n    }\n    const {\n      nodataValue,\n      sentinelValues,\n    } = this.options;\n\n    const tileDataView = new DataView(pixelData.buffer);\n    // To find the byte index:\n    // (1) get the index of the start of the row in which the pixel is located\n    // (2) add to that the column index\n    // (3) multiply by the number of bytes used for each pixel\n\n    // use the byte index and the machine's endianness to obtain the pixel value\n    const pixelValue = tileDataView.getFloat32(byteIndex, littleEndian);\n    // Check for nodata value.\n    if (pixelValue === nodataValue) {\n      return undefined;\n    }\n    // Check for sentinel value.\n    const sentinel = sentinelValues && sentinelValues.find(({ offset }) => offset === pixelValue);\n    // If pixelValue matches no sentinel, just return pixelValue.\n    return sentinel || pixelValue;\n  }\n}\n\n\n"],"names":["decode","memoize","util.machineIsLittleEndian","bindStructArray","util.bindStructArray","util.getTransformMatrix","util.defineMacros","util.getTexCoordVertices","isEmpty","flatMap","util.range","L.DomUtil","commands.getCommonDrawConfiguration","commands.getColorStructArray","commands.createDrawTileCommand","commands.createDrawTileHsSimpleCommand","commands.createDrawTileHsPregenCommand","commands.createDrawTileInterpolateColorCommand","commands.createDrawTileInterpolateColorOnlyCommand","commands.createDrawTileInterpolateValueCommand","commands.createCalcTileMultiAnalyze1Command","commands.createDrawTileMultiAnalyze1Command","commands.createCalcTileMultiAnalyze2Command","commands.createDrawTileMultiAnalyze2Command","commands.createCalcTileMultiAnalyze3Command","commands.createDrawTileMultiAnalyze3Command","commands.createCalcTileMultiAnalyze4Command","commands.createDrawTileMultiAnalyze4Command","commands.createCalcTileMultiAnalyze5Command","commands.createDrawTileMultiAnalyze5Command","commands.createCalcTileMultiAnalyze6Command","commands.createDrawTileMultiAnalyze6Command","commands.createDrawTileDiffCommand","commands.createCalcTileDiffCommand","commands.createConvolutionSmoothCommand","util.convertColorScale","zipWith","chunk","util.Timer","littleEndian","tslib_1.__extends","L.Util","pickBy","isUndefined","L.GridLayer","mapValues","L.Browser","noop","util.staticCast","values","util.compareTileCoordinates","util.sameTiles","util.fetchPNGData","util.createNoDataTile","L.point","L.bounds"],"mappings":"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"}